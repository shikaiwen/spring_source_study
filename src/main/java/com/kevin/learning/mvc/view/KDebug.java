package com.kevin.learning.mvc.view;


import java.io.FileInputStream;
import java.io.IOException;
import java.io.Writer;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.Enumeration;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.util.FileCopyUtils;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;

import freemarker.core.Environment;
import freemarker.ext.servlet.HttpRequestHashModel;
import freemarker.ext.servlet.HttpRequestParametersHashModel;
import freemarker.ext.servlet.HttpSessionHashModel;
import freemarker.ext.servlet.ServletContextHashModel;
import freemarker.template.TemplateCollectionModel;
import freemarker.template.TemplateDirectiveBody;
import freemarker.template.TemplateDirectiveModel;
import freemarker.template.TemplateException;
import freemarker.template.TemplateHashModel;
import freemarker.template.TemplateModel;
import freemarker.template.TemplateModelIterator;

public class KDebug implements TemplateDirectiveModel{
	
	static final String nodeName = "name";
	static final String open = "open";
	
	public void prepareResouce(Writer out) throws IOException{
		
		out.write("<style>"); 
		byte [] style = KDebug.decode( KDebug.getZTreeCss() );
		String css = new String(style);
//		System.out.println(css);
		out.write(  css  ); 
		out.write("</style>");
		
//		out.write("<br/>");
//		out.write("<br/>");
//		out.write("<br/>");
		
		out.write("<script>"); 
		byte [] jquery = KDebug.decode(KDebug.getJquery() );
		String jqueryStr = new String(jquery);
//		System.out.println(jqueryStr);
		out.write( jqueryStr );
		
		out.write("</script>");
		
//		out.write("<br/>");
//		out.write("<br/>");
//		out.write("<br/>");
		
		out.write("<script>"); 
		byte [] ztreeJs = KDebug.decode(KDebug.getZTreeJs() );
		String ztreeJsStr = new String(ztreeJs);
//		System.out.println(ztreeJsStr);
		out.write( ztreeJsStr );
		
		out.write("</script>");
//		out.write("<script>"); out.write(  KDebug.decode( KDebug.getZTreeJs() ) ); out.write("</script>");
	     
	}

	
	
	public static void main(String[] args) throws Exception, IOException {
		getRes();
		
	}
	
	public static String getRes(){
		byte[] data;
		try {
			data = FileCopyUtils.copyToByteArray(new FileInputStream("D:/mypro/spring_source_study/src/main/webapp/zTreeStyle.css"));
//			data = FileCopyUtils.copyToByteArray(new FileInputStream("D:/mypro/spring_source_study/src/main/webapp/jquery.ztree.all.js"));
			Class clazz = Class.forName("com.sun.org.apache.xerces.internal.impl.dv.util.Base64");
			Method mainMethod= clazz.getMethod("encode", byte[].class);  
	        mainMethod.setAccessible(true);  
	        
	        Object retObj=mainMethod.invoke(null, new Object[]{ data  });  
	        System.out.println(retObj);
	        return retObj.toString();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public static String getZTreeCss(){
		
		return "";
	}
	
	public static String getZTreeJs(){
		return "Ci8qCiAqIEpRdWVyeSB6VHJlZSBjb3JlIHYzLjUuMjMKICogaHR0cDovL3pUcmVlLm1lLwogKgogKiBDb3B5cmlnaHQgKGMpIDIwMTAgSHVudGVyLnoKICoKICogTGljZW5zZWQgc2FtZSBhcyBqcXVlcnkgLSBNSVQgTGljZW5zZQogKiBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocAogKgogKiBlbWFpbDogaHVudGVyLnpAMjYzLm5ldAogKiBEYXRlOiAyMDE2LTA0LTAxCiAqLwooZnVuY3Rpb24oJCl7Cgl2YXIgc2V0dGluZ3MgPSB7fSwgcm9vdHMgPSB7fSwgY2FjaGVzID0ge30sCgkvL2RlZmF1bHQgY29uc3RzIG9mIGNvcmUKCV9jb25zdHMgPSB7CgkJY2xhc3NOYW1lOiB7CgkJCUJVVFRPTjogImJ1dHRvbiIsCgkJCUxFVkVMOiAibGV2ZWwiLAoJCQlJQ09fTE9BRElORzogImljb19sb2FkaW5nIiwKCQkJU1dJVENIOiAic3dpdGNoIiwKCQkJTkFNRTogJ25vZGVfbmFtZScKCQl9LAoJCWV2ZW50OiB7CgkJCU5PREVDUkVBVEVEOiAienRyZWVfbm9kZUNyZWF0ZWQiLAoJCQlDTElDSzogInp0cmVlX2NsaWNrIiwKCQkJRVhQQU5EOiAienRyZWVfZXhwYW5kIiwKCQkJQ09MTEFQU0U6ICJ6dHJlZV9jb2xsYXBzZSIsCgkJCUFTWU5DX1NVQ0NFU1M6ICJ6dHJlZV9hc3luY19zdWNjZXNzIiwKCQkJQVNZTkNfRVJST1I6ICJ6dHJlZV9hc3luY19lcnJvciIsCgkJCVJFTU9WRTogInp0cmVlX3JlbW92ZSIsCgkJCVNFTEVDVEVEOiAienRyZWVfc2VsZWN0ZWQiLAoJCQlVTlNFTEVDVEVEOiAienRyZWVfdW5zZWxlY3RlZCIKCQl9LAoJCWlkOiB7CgkJCUE6ICJfYSIsCgkJCUlDT046ICJfaWNvIiwKCQkJU1BBTjogIl9zcGFuIiwKCQkJU1dJVENIOiAiX3N3aXRjaCIsCgkJCVVMOiAiX3VsIgoJCX0sCgkJbGluZTogewoJCQlST09UOiAicm9vdCIsCgkJCVJPT1RTOiAicm9vdHMiLAoJCQlDRU5URVI6ICJjZW50ZXIiLAoJCQlCT1RUT006ICJib3R0b20iLAoJCQlOT0xJTkU6ICJub2xpbmUiLAoJCQlMSU5FOiAibGluZSIKCQl9LAoJCWZvbGRlcjogewoJCQlPUEVOOiAib3BlbiIsCgkJCUNMT1NFOiAiY2xvc2UiLAoJCQlET0NVOiAiZG9jdSIKCQl9LAoJCW5vZGU6IHsKCQkJQ1VSU0VMRUNURUQ6ICJjdXJTZWxlY3RlZE5vZGUiCgkJfQoJfSwKCS8vZGVmYXVsdCBzZXR0aW5nIG9mIGNvcmUKCV9zZXR0aW5nID0gewoJCXRyZWVJZDogIiIsCgkJdHJlZU9iajogbnVsbCwKCQl2aWV3OiB7CgkJCWFkZERpeURvbTogbnVsbCwKCQkJYXV0b0NhbmNlbFNlbGVjdGVkOiB0cnVlLAoJCQlkYmxDbGlja0V4cGFuZDogdHJ1ZSwKCQkJZXhwYW5kU3BlZWQ6ICJmYXN0IiwKCQkJZm9udENzczoge30sCgkJCW5hbWVJc0hUTUw6IGZhbHNlLAoJCQlzZWxlY3RlZE11bHRpOiB0cnVlLAoJCQlzaG93SWNvbjogdHJ1ZSwKCQkJc2hvd0xpbmU6IHRydWUsCgkJCXNob3dUaXRsZTogdHJ1ZSwKCQkJdHh0U2VsZWN0ZWRFbmFibGU6IGZhbHNlCgkJfSwKCQlkYXRhOiB7CgkJCWtleTogewoJCQkJY2hpbGRyZW46ICJjaGlsZHJlbiIsCgkJCQluYW1lOiAibmFtZSIsCgkJCQl0aXRsZTogIiIsCgkJCQl1cmw6ICJ1cmwiLAoJCQkJaWNvbjogImljb24iCgkJCX0sCgkJCXNpbXBsZURhdGE6IHsKCQkJCWVuYWJsZTogZmFsc2UsCgkJCQlpZEtleTogImlkIiwKCQkJCXBJZEtleTogInBJZCIsCgkJCQlyb290UElkOiBudWxsCgkJCX0sCgkJCWtlZXA6IHsKCQkJCXBhcmVudDogZmFsc2UsCgkJCQlsZWFmOiBmYWxzZQoJCQl9CgkJfSwKCQlhc3luYzogewoJCQllbmFibGU6IGZhbHNlLAoJCQljb250ZW50VHlwZTogImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCIsCgkJCXR5cGU6ICJwb3N0IiwKCQkJZGF0YVR5cGU6ICJ0ZXh0IiwKCQkJdXJsOiAiIiwKCQkJYXV0b1BhcmFtOiBbXSwKCQkJb3RoZXJQYXJhbTogW10sCgkJCWRhdGFGaWx0ZXI6IG51bGwKCQl9LAoJCWNhbGxiYWNrOiB7CgkJCWJlZm9yZUFzeW5jOm51bGwsCgkJCWJlZm9yZUNsaWNrOm51bGwsCgkJCWJlZm9yZURibENsaWNrOm51bGwsCgkJCWJlZm9yZVJpZ2h0Q2xpY2s6bnVsbCwKCQkJYmVmb3JlTW91c2VEb3duOm51bGwsCgkJCWJlZm9yZU1vdXNlVXA6bnVsbCwKCQkJYmVmb3JlRXhwYW5kOm51bGwsCgkJCWJlZm9yZUNvbGxhcHNlOm51bGwsCgkJCWJlZm9yZVJlbW92ZTpudWxsLAoKCQkJb25Bc3luY0Vycm9yOm51bGwsCgkJCW9uQXN5bmNTdWNjZXNzOm51bGwsCgkJCW9uTm9kZUNyZWF0ZWQ6bnVsbCwKCQkJb25DbGljazpudWxsLAoJCQlvbkRibENsaWNrOm51bGwsCgkJCW9uUmlnaHRDbGljazpudWxsLAoJCQlvbk1vdXNlRG93bjpudWxsLAoJCQlvbk1vdXNlVXA6bnVsbCwKCQkJb25FeHBhbmQ6bnVsbCwKCQkJb25Db2xsYXBzZTpudWxsLAoJCQlvblJlbW92ZTpudWxsCgkJfQoJfSwKCS8vZGVmYXVsdCByb290IG9mIGNvcmUKCS8velRyZWUgdXNlIHJvb3QgdG8gc2F2ZSBmdWxsIGRhdGEKCV9pbml0Um9vdCA9IGZ1bmN0aW9uIChzZXR0aW5nKSB7CgkJdmFyIHIgPSBkYXRhLmdldFJvb3Qoc2V0dGluZyk7CgkJaWYgKCFyKSB7CgkJCXIgPSB7fTsKCQkJZGF0YS5zZXRSb290KHNldHRpbmcsIHIpOwoJCX0KCQlyW3NldHRpbmcuZGF0YS5rZXkuY2hpbGRyZW5dID0gW107CgkJci5leHBhbmRUcmlnZ2VyRmxhZyA9IGZhbHNlOwoJCXIuY3VyU2VsZWN0ZWRMaXN0ID0gW107CgkJci5ub1NlbGVjdGlvbiA9IHRydWU7CgkJci5jcmVhdGVkTm9kZXMgPSBbXTsKCQlyLnpJZCA9IDA7CgkJci5fdmVyID0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKTsKCX0sCgkvL2RlZmF1bHQgY2FjaGUgb2YgY29yZQoJX2luaXRDYWNoZSA9IGZ1bmN0aW9uKHNldHRpbmcpIHsKCQl2YXIgYyA9IGRhdGEuZ2V0Q2FjaGUoc2V0dGluZyk7CgkJaWYgKCFjKSB7CgkJCWMgPSB7fTsKCQkJZGF0YS5zZXRDYWNoZShzZXR0aW5nLCBjKTsKCQl9CgkJYy5ub2RlcyA9IFtdOwoJCWMuZG9tcyA9IFtdOwoJfSwKCS8vZGVmYXVsdCBiaW5kRXZlbnQgb2YgY29yZQoJX2JpbmRFdmVudCA9IGZ1bmN0aW9uKHNldHRpbmcpIHsKCQl2YXIgbyA9IHNldHRpbmcudHJlZU9iaiwKCQljID0gY29uc3RzLmV2ZW50OwoJCW8uYmluZChjLk5PREVDUkVBVEVELCBmdW5jdGlvbiAoZXZlbnQsIHRyZWVJZCwgbm9kZSkgewoJCQl0b29scy5hcHBseShzZXR0aW5nLmNhbGxiYWNrLm9uTm9kZUNyZWF0ZWQsIFtldmVudCwgdHJlZUlkLCBub2RlXSk7CgkJfSk7CgoJCW8uYmluZChjLkNMSUNLLCBmdW5jdGlvbiAoZXZlbnQsIHNyY0V2ZW50LCB0cmVlSWQsIG5vZGUsIGNsaWNrRmxhZykgewoJCQl0b29scy5hcHBseShzZXR0aW5nLmNhbGxiYWNrLm9uQ2xpY2ssIFtzcmNFdmVudCwgdHJlZUlkLCBub2RlLCBjbGlja0ZsYWddKTsKCQl9KTsKCgkJby5iaW5kKGMuRVhQQU5ELCBmdW5jdGlvbiAoZXZlbnQsIHRyZWVJZCwgbm9kZSkgewoJCQl0b29scy5hcHBseShzZXR0aW5nLmNhbGxiYWNrLm9uRXhwYW5kLCBbZXZlbnQsIHRyZWVJZCwgbm9kZV0pOwoJCX0pOwoKCQlvLmJpbmQoYy5DT0xMQVBTRSwgZnVuY3Rpb24gKGV2ZW50LCB0cmVlSWQsIG5vZGUpIHsKCQkJdG9vbHMuYXBwbHkoc2V0dGluZy5jYWxsYmFjay5vbkNvbGxhcHNlLCBbZXZlbnQsIHRyZWVJZCwgbm9kZV0pOwoJCX0pOwoKCQlvLmJpbmQoYy5BU1lOQ19TVUNDRVNTLCBmdW5jdGlvbiAoZXZlbnQsIHRyZWVJZCwgbm9kZSwgbXNnKSB7CgkJCXRvb2xzLmFwcGx5KHNldHRpbmcuY2FsbGJhY2sub25Bc3luY1N1Y2Nlc3MsIFtldmVudCwgdHJlZUlkLCBub2RlLCBtc2ddKTsKCQl9KTsKCgkJby5iaW5kKGMuQVNZTkNfRVJST1IsIGZ1bmN0aW9uIChldmVudCwgdHJlZUlkLCBub2RlLCBYTUxIdHRwUmVxdWVzdCwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pIHsKCQkJdG9vbHMuYXBwbHkoc2V0dGluZy5jYWxsYmFjay5vbkFzeW5jRXJyb3IsIFtldmVudCwgdHJlZUlkLCBub2RlLCBYTUxIdHRwUmVxdWVzdCwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd25dKTsKCQl9KTsKCgkJby5iaW5kKGMuUkVNT1ZFLCBmdW5jdGlvbiAoZXZlbnQsIHRyZWVJZCwgdHJlZU5vZGUpIHsKCQkJdG9vbHMuYXBwbHkoc2V0dGluZy5jYWxsYmFjay5vblJlbW92ZSwgW2V2ZW50LCB0cmVlSWQsIHRyZWVOb2RlXSk7CgkJfSk7CgoJCW8uYmluZChjLlNFTEVDVEVELCBmdW5jdGlvbiAoZXZlbnQsIHRyZWVJZCwgbm9kZSkgewoJCQl0b29scy5hcHBseShzZXR0aW5nLmNhbGxiYWNrLm9uU2VsZWN0ZWQsIFt0cmVlSWQsIG5vZGVdKTsKCQl9KTsKCQlvLmJpbmQoYy5VTlNFTEVDVEVELCBmdW5jdGlvbiAoZXZlbnQsIHRyZWVJZCwgbm9kZSkgewoJCQl0b29scy5hcHBseShzZXR0aW5nLmNhbGxiYWNrLm9uVW5TZWxlY3RlZCwgW3RyZWVJZCwgbm9kZV0pOwoJCX0pOwoJfSwKCV91bmJpbmRFdmVudCA9IGZ1bmN0aW9uKHNldHRpbmcpIHsKCQl2YXIgbyA9IHNldHRpbmcudHJlZU9iaiwKCQljID0gY29uc3RzLmV2ZW50OwoJCW8udW5iaW5kKGMuTk9ERUNSRUFURUQpCgkJLnVuYmluZChjLkNMSUNLKQoJCS51bmJpbmQoYy5FWFBBTkQpCgkJLnVuYmluZChjLkNPTExBUFNFKQoJCS51bmJpbmQoYy5BU1lOQ19TVUNDRVNTKQoJCS51bmJpbmQoYy5BU1lOQ19FUlJPUikKCQkudW5iaW5kKGMuUkVNT1ZFKQoJCS51bmJpbmQoYy5TRUxFQ1RFRCkKCQkudW5iaW5kKGMuVU5TRUxFQ1RFRCk7Cgl9LAoJLy9kZWZhdWx0IGV2ZW50IHByb3h5IG9mIGNvcmUKCV9ldmVudFByb3h5ID0gZnVuY3Rpb24oZXZlbnQpIHsKCQl2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0LAoJCXNldHRpbmcgPSBkYXRhLmdldFNldHRpbmcoZXZlbnQuZGF0YS50cmVlSWQpLAoJCXRJZCA9ICIiLCBub2RlID0gbnVsbCwKCQlub2RlRXZlbnRUeXBlID0gIiIsIHRyZWVFdmVudFR5cGUgPSAiIiwKCQlub2RlRXZlbnRDYWxsYmFjayA9IG51bGwsIHRyZWVFdmVudENhbGxiYWNrID0gbnVsbCwKCQl0bXAgPSBudWxsOwoKCQlpZiAodG9vbHMuZXFzKGV2ZW50LnR5cGUsICJtb3VzZWRvd24iKSkgewoJCQl0cmVlRXZlbnRUeXBlID0gIm1vdXNlZG93biI7CgkJfSBlbHNlIGlmICh0b29scy5lcXMoZXZlbnQudHlwZSwgIm1vdXNldXAiKSkgewoJCQl0cmVlRXZlbnRUeXBlID0gIm1vdXNldXAiOwoJCX0gZWxzZSBpZiAodG9vbHMuZXFzKGV2ZW50LnR5cGUsICJjb250ZXh0bWVudSIpKSB7CgkJCXRyZWVFdmVudFR5cGUgPSAiY29udGV4dG1lbnUiOwoJCX0gZWxzZSBpZiAodG9vbHMuZXFzKGV2ZW50LnR5cGUsICJjbGljayIpKSB7CgkJCWlmICh0b29scy5lcXModGFyZ2V0LnRhZ05hbWUsICJzcGFuIikgJiYgdGFyZ2V0LmdldEF0dHJpYnV0ZSgidHJlZU5vZGUiKyBjb25zdHMuaWQuU1dJVENIKSAhPT0gbnVsbCkgewoJCQkJdElkID0gdG9vbHMuZ2V0Tm9kZU1haW5Eb20odGFyZ2V0KS5pZDsKCQkJCW5vZGVFdmVudFR5cGUgPSAic3dpdGNoTm9kZSI7CgkJCX0gZWxzZSB7CgkJCQl0bXAgPSB0b29scy5nZXRNRG9tKHNldHRpbmcsIHRhcmdldCwgW3t0YWdOYW1lOiJhIiwgYXR0ck5hbWU6InRyZWVOb2RlIitjb25zdHMuaWQuQX1dKTsKCQkJCWlmICh0bXApIHsKCQkJCQl0SWQgPSB0b29scy5nZXROb2RlTWFpbkRvbSh0bXApLmlkOwoJCQkJCW5vZGVFdmVudFR5cGUgPSAiY2xpY2tOb2RlIjsKCQkJCX0KCQkJfQoJCX0gZWxzZSBpZiAodG9vbHMuZXFzKGV2ZW50LnR5cGUsICJkYmxjbGljayIpKSB7CgkJCXRyZWVFdmVudFR5cGUgPSAiZGJsY2xpY2siOwoJCQl0bXAgPSB0b29scy5nZXRNRG9tKHNldHRpbmcsIHRhcmdldCwgW3t0YWdOYW1lOiJhIiwgYXR0ck5hbWU6InRyZWVOb2RlIitjb25zdHMuaWQuQX1dKTsKCQkJaWYgKHRtcCkgewoJCQkJdElkID0gdG9vbHMuZ2V0Tm9kZU1haW5Eb20odG1wKS5pZDsKCQkJCW5vZGVFdmVudFR5cGUgPSAic3dpdGNoTm9kZSI7CgkJCX0KCQl9CgkJaWYgKHRyZWVFdmVudFR5cGUubGVuZ3RoID4gMCAmJiB0SWQubGVuZ3RoID09IDApIHsKCQkJdG1wID0gdG9vbHMuZ2V0TURvbShzZXR0aW5nLCB0YXJnZXQsIFt7dGFnTmFtZToiYSIsIGF0dHJOYW1lOiJ0cmVlTm9kZSIrY29uc3RzLmlkLkF9XSk7CgkJCWlmICh0bXApIHt0SWQgPSB0b29scy5nZXROb2RlTWFpbkRvbSh0bXApLmlkO30KCQl9CgkJLy8gZXZlbnQgdG8gbm9kZQoJCWlmICh0SWQubGVuZ3RoPjApIHsKCQkJbm9kZSA9IGRhdGEuZ2V0Tm9kZUNhY2hlKHNldHRpbmcsIHRJZCk7CgkJCXN3aXRjaCAobm9kZUV2ZW50VHlwZSkgewoJCQkJY2FzZSAic3dpdGNoTm9kZSIgOgoJCQkJCWlmICghbm9kZS5pc1BhcmVudCkgewoJCQkJCQlub2RlRXZlbnRUeXBlID0gIiI7CgkJCQkJfSBlbHNlIGlmICh0b29scy5lcXMoZXZlbnQudHlwZSwgImNsaWNrIikKCQkJCQkJfHwgKHRvb2xzLmVxcyhldmVudC50eXBlLCAiZGJsY2xpY2siKSAmJiB0b29scy5hcHBseShzZXR0aW5nLnZpZXcuZGJsQ2xpY2tFeHBhbmQsIFtzZXR0aW5nLnRyZWVJZCwgbm9kZV0sIHNldHRpbmcudmlldy5kYmxDbGlja0V4cGFuZCkpKSB7CgkJCQkJCW5vZGVFdmVudENhbGxiYWNrID0gaGFuZGxlci5vblN3aXRjaE5vZGU7CgkJCQkJfSBlbHNlIHsKCQkJCQkJbm9kZUV2ZW50VHlwZSA9ICIiOwoJCQkJCX0KCQkJCQlicmVhazsKCQkJCWNhc2UgImNsaWNrTm9kZSIgOgoJCQkJCW5vZGVFdmVudENhbGxiYWNrID0gaGFuZGxlci5vbkNsaWNrTm9kZTsKCQkJCQlicmVhazsKCQkJfQoJCX0KCQkvLyBldmVudCB0byB6VHJlZQoJCXN3aXRjaCAodHJlZUV2ZW50VHlwZSkgewoJCQljYXNlICJtb3VzZWRvd24iIDoKCQkJCXRyZWVFdmVudENhbGxiYWNrID0gaGFuZGxlci5vblpUcmVlTW91c2Vkb3duOwoJCQkJYnJlYWs7CgkJCWNhc2UgIm1vdXNldXAiIDoKCQkJCXRyZWVFdmVudENhbGxiYWNrID0gaGFuZGxlci5vblpUcmVlTW91c2V1cDsKCQkJCWJyZWFrOwoJCQljYXNlICJkYmxjbGljayIgOgoJCQkJdHJlZUV2ZW50Q2FsbGJhY2sgPSBoYW5kbGVyLm9uWlRyZWVEYmxjbGljazsKCQkJCWJyZWFrOwoJCQljYXNlICJjb250ZXh0bWVudSIgOgoJCQkJdHJlZUV2ZW50Q2FsbGJhY2sgPSBoYW5kbGVyLm9uWlRyZWVDb250ZXh0bWVudTsKCQkJCWJyZWFrOwoJCX0KCQl2YXIgcHJveHlSZXN1bHQgPSB7CgkJCXN0b3A6IGZhbHNlLAoJCQlub2RlOiBub2RlLAoJCQlub2RlRXZlbnRUeXBlOiBub2RlRXZlbnRUeXBlLAoJCQlub2RlRXZlbnRDYWxsYmFjazogbm9kZUV2ZW50Q2FsbGJhY2ssCgkJCXRyZWVFdmVudFR5cGU6IHRyZWVFdmVudFR5cGUsCgkJCXRyZWVFdmVudENhbGxiYWNrOiB0cmVlRXZlbnRDYWxsYmFjawoJCX07CgkJcmV0dXJuIHByb3h5UmVzdWx0Cgl9LAoJLy9kZWZhdWx0IGluaXQgbm9kZSBvZiBjb3JlCglfaW5pdE5vZGUgPSBmdW5jdGlvbihzZXR0aW5nLCBsZXZlbCwgbiwgcGFyZW50Tm9kZSwgaXNGaXJzdE5vZGUsIGlzTGFzdE5vZGUsIG9wZW5GbGFnKSB7CgkJaWYgKCFuKSByZXR1cm47CgkJdmFyIHIgPSBkYXRhLmdldFJvb3Qoc2V0dGluZyksCgkJY2hpbGRLZXkgPSBzZXR0aW5nLmRhdGEua2V5LmNoaWxkcmVuOwoJCW4ubGV2ZWwgPSBsZXZlbDsKCQluLnRJZCA9IHNldHRpbmcudHJlZUlkICsgIl8iICsgKCsrci56SWQpOwoJCW4ucGFyZW50VElkID0gcGFyZW50Tm9kZSA/IHBhcmVudE5vZGUudElkIDogbnVsbDsKCQluLm9wZW4gPSAodHlwZW9mIG4ub3BlbiA9PSAic3RyaW5nIikgPyB0b29scy5lcXMobi5vcGVuLCAidHJ1ZSIpIDogISFuLm9wZW47CgkJaWYgKG5bY2hpbGRLZXldICYmIG5bY2hpbGRLZXldLmxlbmd0aCA+IDApIHsKCQkJbi5pc1BhcmVudCA9IHRydWU7CgkJCW4uekFzeW5jID0gdHJ1ZTsKCQl9IGVsc2UgewoJCQluLmlzUGFyZW50ID0gKHR5cGVvZiBuLmlzUGFyZW50ID09ICJzdHJpbmciKSA/IHRvb2xzLmVxcyhuLmlzUGFyZW50LCAidHJ1ZSIpIDogISFuLmlzUGFyZW50OwoJCQluLm9wZW4gPSAobi5pc1BhcmVudCAmJiAhc2V0dGluZy5hc3luYy5lbmFibGUpID8gbi5vcGVuIDogZmFsc2U7CgkJCW4uekFzeW5jID0gIW4uaXNQYXJlbnQ7CgkJfQoJCW4uaXNGaXJzdE5vZGUgPSBpc0ZpcnN0Tm9kZTsKCQluLmlzTGFzdE5vZGUgPSBpc0xhc3ROb2RlOwoJCW4uZ2V0UGFyZW50Tm9kZSA9IGZ1bmN0aW9uKCkge3JldHVybiBkYXRhLmdldE5vZGVDYWNoZShzZXR0aW5nLCBuLnBhcmVudFRJZCk7fTsKCQluLmdldFByZU5vZGUgPSBmdW5jdGlvbigpIHtyZXR1cm4gZGF0YS5nZXRQcmVOb2RlKHNldHRpbmcsIG4pO307CgkJbi5nZXROZXh0Tm9kZSA9IGZ1bmN0aW9uKCkge3JldHVybiBkYXRhLmdldE5leHROb2RlKHNldHRpbmcsIG4pO307CgkJbi5nZXRJbmRleCA9IGZ1bmN0aW9uKCkge3JldHVybiBkYXRhLmdldE5vZGVJbmRleChzZXR0aW5nLCBuKTt9OwoJCW4uZ2V0UGF0aCA9IGZ1bmN0aW9uKCkge3JldHVybiBkYXRhLmdldE5vZGVQYXRoKHNldHRpbmcsIG4pO307CgkJbi5pc0FqYXhpbmcgPSBmYWxzZTsKCQlkYXRhLmZpeFBJZEtleVZhbHVlKHNldHRpbmcsIG4pOwoJfSwKCV9pbml0ID0gewoJCWJpbmQ6IFtfYmluZEV2ZW50XSwKCQl1bmJpbmQ6IFtfdW5iaW5kRXZlbnRdLAoJCWNhY2hlczogW19pbml0Q2FjaGVdLAoJCW5vZGVzOiBbX2luaXROb2RlXSwKCQlwcm94eXM6IFtfZXZlbnRQcm94eV0sCgkJcm9vdHM6IFtfaW5pdFJvb3RdLAoJCWJlZm9yZUE6IFtdLAoJCWFmdGVyQTogW10sCgkJaW5uZXJCZWZvcmVBOiBbXSwKCQlpbm5lckFmdGVyQTogW10sCgkJelRyZWVUb29sczogW10KCX0sCgkvL21ldGhvZCBvZiBvcGVyYXRlIGRhdGEKCWRhdGEgPSB7CgkJYWRkTm9kZUNhY2hlOiBmdW5jdGlvbihzZXR0aW5nLCBub2RlKSB7CgkJCWRhdGEuZ2V0Q2FjaGUoc2V0dGluZykubm9kZXNbZGF0YS5nZXROb2RlQ2FjaGVJZChub2RlLnRJZCldID0gbm9kZTsKCQl9LAoJCWdldE5vZGVDYWNoZUlkOiBmdW5jdGlvbih0SWQpIHsKCQkJcmV0dXJuIHRJZC5zdWJzdHJpbmcodElkLmxhc3RJbmRleE9mKCJfIikrMSk7CgkJfSwKCQlhZGRBZnRlckE6IGZ1bmN0aW9uKGFmdGVyQSkgewoJCQlfaW5pdC5hZnRlckEucHVzaChhZnRlckEpOwoJCX0sCgkJYWRkQmVmb3JlQTogZnVuY3Rpb24oYmVmb3JlQSkgewoJCQlfaW5pdC5iZWZvcmVBLnB1c2goYmVmb3JlQSk7CgkJfSwKCQlhZGRJbm5lckFmdGVyQTogZnVuY3Rpb24oaW5uZXJBZnRlckEpIHsKCQkJX2luaXQuaW5uZXJBZnRlckEucHVzaChpbm5lckFmdGVyQSk7CgkJfSwKCQlhZGRJbm5lckJlZm9yZUE6IGZ1bmN0aW9uKGlubmVyQmVmb3JlQSkgewoJCQlfaW5pdC5pbm5lckJlZm9yZUEucHVzaChpbm5lckJlZm9yZUEpOwoJCX0sCgkJYWRkSW5pdEJpbmQ6IGZ1bmN0aW9uKGJpbmRFdmVudCkgewoJCQlfaW5pdC5iaW5kLnB1c2goYmluZEV2ZW50KTsKCQl9LAoJCWFkZEluaXRVbkJpbmQ6IGZ1bmN0aW9uKHVuYmluZEV2ZW50KSB7CgkJCV9pbml0LnVuYmluZC5wdXNoKHVuYmluZEV2ZW50KTsKCQl9LAoJCWFkZEluaXRDYWNoZTogZnVuY3Rpb24oaW5pdENhY2hlKSB7CgkJCV9pbml0LmNhY2hlcy5wdXNoKGluaXRDYWNoZSk7CgkJfSwKCQlhZGRJbml0Tm9kZTogZnVuY3Rpb24oaW5pdE5vZGUpIHsKCQkJX2luaXQubm9kZXMucHVzaChpbml0Tm9kZSk7CgkJfSwKCQlhZGRJbml0UHJveHk6IGZ1bmN0aW9uKGluaXRQcm94eSwgaXNGaXJzdCkgewoJCQlpZiAoISFpc0ZpcnN0KSB7CgkJCQlfaW5pdC5wcm94eXMuc3BsaWNlKDAsMCxpbml0UHJveHkpOwoJCQl9IGVsc2UgewoJCQkJX2luaXQucHJveHlzLnB1c2goaW5pdFByb3h5KTsKCQkJfQoJCX0sCgkJYWRkSW5pdFJvb3Q6IGZ1bmN0aW9uKGluaXRSb290KSB7CgkJCV9pbml0LnJvb3RzLnB1c2goaW5pdFJvb3QpOwoJCX0sCgkJYWRkTm9kZXNEYXRhOiBmdW5jdGlvbihzZXR0aW5nLCBwYXJlbnROb2RlLCBpbmRleCwgbm9kZXMpIHsKCQkJdmFyIGNoaWxkS2V5ID0gc2V0dGluZy5kYXRhLmtleS5jaGlsZHJlbiwgcGFyYW1zOwoJCQlpZiAoIXBhcmVudE5vZGVbY2hpbGRLZXldKSB7CgkJCQlwYXJlbnROb2RlW2NoaWxkS2V5XSA9IFtdOwoJCQkJaW5kZXggPSAtMTsKCQkJfSBlbHNlIGlmIChpbmRleCA+PSBwYXJlbnROb2RlW2NoaWxkS2V5XS5sZW5ndGgpIHsKCQkJCWluZGV4ID0gLTE7CgkJCX0KCgkJCWlmIChwYXJlbnROb2RlW2NoaWxkS2V5XS5sZW5ndGggPiAwICYmIGluZGV4ID09PSAwKSB7CgkJCQlwYXJlbnROb2RlW2NoaWxkS2V5XVswXS5pc0ZpcnN0Tm9kZSA9IGZhbHNlOwoJCQkJdmlldy5zZXROb2RlTGluZUljb3Moc2V0dGluZywgcGFyZW50Tm9kZVtjaGlsZEtleV1bMF0pOwoJCQl9IGVsc2UgaWYgKHBhcmVudE5vZGVbY2hpbGRLZXldLmxlbmd0aCA+IDAgJiYgaW5kZXggPCAwKSB7CgkJCQlwYXJlbnROb2RlW2NoaWxkS2V5XVtwYXJlbnROb2RlW2NoaWxkS2V5XS5sZW5ndGggLSAxXS5pc0xhc3ROb2RlID0gZmFsc2U7CgkJCQl2aWV3LnNldE5vZGVMaW5lSWNvcyhzZXR0aW5nLCBwYXJlbnROb2RlW2NoaWxkS2V5XVtwYXJlbnROb2RlW2NoaWxkS2V5XS5sZW5ndGggLSAxXSk7CgkJCX0KCQkJcGFyZW50Tm9kZS5pc1BhcmVudCA9IHRydWU7CgoJCQlpZiAoaW5kZXg8MCkgewoJCQkJcGFyZW50Tm9kZVtjaGlsZEtleV0gPSBwYXJlbnROb2RlW2NoaWxkS2V5XS5jb25jYXQobm9kZXMpOwoJCQl9IGVsc2UgewoJCQkJcGFyYW1zID0gW2luZGV4LCAwXS5jb25jYXQobm9kZXMpOwoJCQkJcGFyZW50Tm9kZVtjaGlsZEtleV0uc3BsaWNlLmFwcGx5KHBhcmVudE5vZGVbY2hpbGRLZXldLCBwYXJhbXMpOwoJCQl9CgkJfSwKCQlhZGRTZWxlY3RlZE5vZGU6IGZ1bmN0aW9uKHNldHRpbmcsIG5vZGUpIHsKCQkJdmFyIHJvb3QgPSBkYXRhLmdldFJvb3Qoc2V0dGluZyk7CgkJCWlmICghZGF0YS5pc1NlbGVjdGVkTm9kZShzZXR0aW5nLCBub2RlKSkgewoJCQkJcm9vdC5jdXJTZWxlY3RlZExpc3QucHVzaChub2RlKTsKCQkJfQoJCX0sCgkJYWRkQ3JlYXRlZE5vZGU6IGZ1bmN0aW9uKHNldHRpbmcsIG5vZGUpIHsKCQkJaWYgKCEhc2V0dGluZy5jYWxsYmFjay5vbk5vZGVDcmVhdGVkIHx8ICEhc2V0dGluZy52aWV3LmFkZERpeURvbSkgewoJCQkJdmFyIHJvb3QgPSBkYXRhLmdldFJvb3Qoc2V0dGluZyk7CgkJCQlyb290LmNyZWF0ZWROb2Rlcy5wdXNoKG5vZGUpOwoJCQl9CgkJfSwKCQlhZGRaVHJlZVRvb2xzOiBmdW5jdGlvbih6VHJlZVRvb2xzKSB7CgkJCV9pbml0LnpUcmVlVG9vbHMucHVzaCh6VHJlZVRvb2xzKTsKCQl9LAoJCWV4U2V0dGluZzogZnVuY3Rpb24ocykgewoJCQkkLmV4dGVuZCh0cnVlLCBfc2V0dGluZywgcyk7CgkJfSwKCQlmaXhQSWRLZXlWYWx1ZTogZnVuY3Rpb24oc2V0dGluZywgbm9kZSkgewoJCQlpZiAoc2V0dGluZy5kYXRhLnNpbXBsZURhdGEuZW5hYmxlKSB7CgkJCQlub2RlW3NldHRpbmcuZGF0YS5zaW1wbGVEYXRhLnBJZEtleV0gPSBub2RlLnBhcmVudFRJZCA/IG5vZGUuZ2V0UGFyZW50Tm9kZSgpW3NldHRpbmcuZGF0YS5zaW1wbGVEYXRhLmlkS2V5XSA6IHNldHRpbmcuZGF0YS5zaW1wbGVEYXRhLnJvb3RQSWQ7CgkJCX0KCQl9LAoJCWdldEFmdGVyQTogZnVuY3Rpb24oc2V0dGluZywgbm9kZSwgYXJyYXkpIHsKCQkJZm9yICh2YXIgaT0wLCBqPV9pbml0LmFmdGVyQS5sZW5ndGg7IGk8ajsgaSsrKSB7CgkJCQlfaW5pdC5hZnRlckFbaV0uYXBwbHkodGhpcywgYXJndW1lbnRzKTsKCQkJfQoJCX0sCgkJZ2V0QmVmb3JlQTogZnVuY3Rpb24oc2V0dGluZywgbm9kZSwgYXJyYXkpIHsKCQkJZm9yICh2YXIgaT0wLCBqPV9pbml0LmJlZm9yZUEubGVuZ3RoOyBpPGo7IGkrKykgewoJCQkJX2luaXQuYmVmb3JlQVtpXS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwoJCQl9CgkJfSwKCQlnZXRJbm5lckFmdGVyQTogZnVuY3Rpb24oc2V0dGluZywgbm9kZSwgYXJyYXkpIHsKCQkJZm9yICh2YXIgaT0wLCBqPV9pbml0LmlubmVyQWZ0ZXJBLmxlbmd0aDsgaTxqOyBpKyspIHsKCQkJCV9pbml0LmlubmVyQWZ0ZXJBW2ldLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CgkJCX0KCQl9LAoJCWdldElubmVyQmVmb3JlQTogZnVuY3Rpb24oc2V0dGluZywgbm9kZSwgYXJyYXkpIHsKCQkJZm9yICh2YXIgaT0wLCBqPV9pbml0LmlubmVyQmVmb3JlQS5sZW5ndGg7IGk8ajsgaSsrKSB7CgkJCQlfaW5pdC5pbm5lckJlZm9yZUFbaV0uYXBwbHkodGhpcywgYXJndW1lbnRzKTsKCQkJfQoJCX0sCgkJZ2V0Q2FjaGU6IGZ1bmN0aW9uKHNldHRpbmcpIHsKCQkJcmV0dXJuIGNhY2hlc1tzZXR0aW5nLnRyZWVJZF07CgkJfSwKCQlnZXROb2RlSW5kZXg6IGZ1bmN0aW9uKHNldHRpbmcsIG5vZGUpIHsKCQkJaWYgKCFub2RlKSByZXR1cm4gbnVsbDsKCQkJdmFyIGNoaWxkS2V5ID0gc2V0dGluZy5kYXRhLmtleS5jaGlsZHJlbiwKCQkJcCA9IG5vZGUucGFyZW50VElkID8gbm9kZS5nZXRQYXJlbnROb2RlKCkgOiBkYXRhLmdldFJvb3Qoc2V0dGluZyk7CgkJCWZvciAodmFyIGk9MCwgbD1wW2NoaWxkS2V5XS5sZW5ndGgtMTsgaTw9bDsgaSsrKSB7CgkJCQlpZiAocFtjaGlsZEtleV1baV0gPT09IG5vZGUpIHsKCQkJCQlyZXR1cm4gaTsKCQkJCX0KCQkJfQoJCQlyZXR1cm4gLTE7CgkJfSwKCQlnZXROZXh0Tm9kZTogZnVuY3Rpb24oc2V0dGluZywgbm9kZSkgewoJCQlpZiAoIW5vZGUpIHJldHVybiBudWxsOwoJCQl2YXIgY2hpbGRLZXkgPSBzZXR0aW5nLmRhdGEua2V5LmNoaWxkcmVuLAoJCQlwID0gbm9kZS5wYXJlbnRUSWQgPyBub2RlLmdldFBhcmVudE5vZGUoKSA6IGRhdGEuZ2V0Um9vdChzZXR0aW5nKTsKCQkJZm9yICh2YXIgaT0wLCBsPXBbY2hpbGRLZXldLmxlbmd0aC0xOyBpPD1sOyBpKyspIHsKCQkJCWlmIChwW2NoaWxkS2V5XVtpXSA9PT0gbm9kZSkgewoJCQkJCXJldHVybiAoaT09bCA/IG51bGwgOiBwW2NoaWxkS2V5XVtpKzFdKTsKCQkJCX0KCQkJfQoJCQlyZXR1cm4gbnVsbDsKCQl9LAoJCWdldE5vZGVCeVBhcmFtOiBmdW5jdGlvbihzZXR0aW5nLCBub2Rlcywga2V5LCB2YWx1ZSkgewoJCQlpZiAoIW5vZGVzIHx8ICFrZXkpIHJldHVybiBudWxsOwoJCQl2YXIgY2hpbGRLZXkgPSBzZXR0aW5nLmRhdGEua2V5LmNoaWxkcmVuOwoJCQlmb3IgKHZhciBpID0gMCwgbCA9IG5vZGVzLmxlbmd0aDsgaSA8IGw7IGkrKykgewoJCQkJaWYgKG5vZGVzW2ldW2tleV0gPT0gdmFsdWUpIHsKCQkJCQlyZXR1cm4gbm9kZXNbaV07CgkJCQl9CgkJCQl2YXIgdG1wID0gZGF0YS5nZXROb2RlQnlQYXJhbShzZXR0aW5nLCBub2Rlc1tpXVtjaGlsZEtleV0sIGtleSwgdmFsdWUpOwoJCQkJaWYgKHRtcCkgcmV0dXJuIHRtcDsKCQkJfQoJCQlyZXR1cm4gbnVsbDsKCQl9LAoJCWdldE5vZGVDYWNoZTogZnVuY3Rpb24oc2V0dGluZywgdElkKSB7CgkJCWlmICghdElkKSByZXR1cm4gbnVsbDsKCQkJdmFyIG4gPSBjYWNoZXNbc2V0dGluZy50cmVlSWRdLm5vZGVzW2RhdGEuZ2V0Tm9kZUNhY2hlSWQodElkKV07CgkJCXJldHVybiBuID8gbiA6IG51bGw7CgkJfSwKCQlnZXROb2RlTmFtZTogZnVuY3Rpb24oc2V0dGluZywgbm9kZSkgewoJCQl2YXIgbmFtZUtleSA9IHNldHRpbmcuZGF0YS5rZXkubmFtZTsKCQkJcmV0dXJuICIiICsgbm9kZVtuYW1lS2V5XTsKCQl9LAoJCWdldE5vZGVQYXRoOiBmdW5jdGlvbihzZXR0aW5nLCBub2RlKSB7CgkJCWlmICghbm9kZSkgcmV0dXJuIG51bGw7CgoJCQl2YXIgcGF0aDsKCQkJaWYobm9kZS5wYXJlbnRUSWQpIHsKCQkJCXBhdGggPSBub2RlLmdldFBhcmVudE5vZGUoKS5nZXRQYXRoKCk7CgkJCX0gZWxzZSB7CgkJCQlwYXRoID0gW107CgkJCX0KCgkJCWlmIChwYXRoKSB7CgkJCQlwYXRoLnB1c2gobm9kZSk7CgkJCX0KCgkJCXJldHVybiBwYXRoOwoJCX0sCgkJZ2V0Tm9kZVRpdGxlOiBmdW5jdGlvbihzZXR0aW5nLCBub2RlKSB7CgkJCXZhciB0ID0gc2V0dGluZy5kYXRhLmtleS50aXRsZSA9PT0gIiIgPyBzZXR0aW5nLmRhdGEua2V5Lm5hbWUgOiBzZXR0aW5nLmRhdGEua2V5LnRpdGxlOwoJCQlyZXR1cm4gIiIgKyBub2RlW3RdOwoJCX0sCgkJZ2V0Tm9kZXM6IGZ1bmN0aW9uKHNldHRpbmcpIHsKCQkJcmV0dXJuIGRhdGEuZ2V0Um9vdChzZXR0aW5nKVtzZXR0aW5nLmRhdGEua2V5LmNoaWxkcmVuXTsKCQl9LAoJCWdldE5vZGVzQnlQYXJhbTogZnVuY3Rpb24oc2V0dGluZywgbm9kZXMsIGtleSwgdmFsdWUpIHsKCQkJaWYgKCFub2RlcyB8fCAha2V5KSByZXR1cm4gW107CgkJCXZhciBjaGlsZEtleSA9IHNldHRpbmcuZGF0YS5rZXkuY2hpbGRyZW4sCgkJCXJlc3VsdCA9IFtdOwoJCQlmb3IgKHZhciBpID0gMCwgbCA9IG5vZGVzLmxlbmd0aDsgaSA8IGw7IGkrKykgewoJCQkJaWYgKG5vZGVzW2ldW2tleV0gPT0gdmFsdWUpIHsKCQkJCQlyZXN1bHQucHVzaChub2Rlc1tpXSk7CgkJCQl9CgkJCQlyZXN1bHQgPSByZXN1bHQuY29uY2F0KGRhdGEuZ2V0Tm9kZXNCeVBhcmFtKHNldHRpbmcsIG5vZGVzW2ldW2NoaWxkS2V5XSwga2V5LCB2YWx1ZSkpOwoJCQl9CgkJCXJldHVybiByZXN1bHQ7CgkJfSwKCQlnZXROb2Rlc0J5UGFyYW1GdXp6eTogZnVuY3Rpb24oc2V0dGluZywgbm9kZXMsIGtleSwgdmFsdWUpIHsKCQkJaWYgKCFub2RlcyB8fCAha2V5KSByZXR1cm4gW107CgkJCXZhciBjaGlsZEtleSA9IHNldHRpbmcuZGF0YS5rZXkuY2hpbGRyZW4sCgkJCXJlc3VsdCA9IFtdOwoJCQl2YWx1ZSA9IHZhbHVlLnRvTG93ZXJDYXNlKCk7CgkJCWZvciAodmFyIGkgPSAwLCBsID0gbm9kZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CgkJCQlpZiAodHlwZW9mIG5vZGVzW2ldW2tleV0gPT0gInN0cmluZyIgJiYgbm9kZXNbaV1ba2V5XS50b0xvd2VyQ2FzZSgpLmluZGV4T2YodmFsdWUpPi0xKSB7CgkJCQkJcmVzdWx0LnB1c2gobm9kZXNbaV0pOwoJCQkJfQoJCQkJcmVzdWx0ID0gcmVzdWx0LmNvbmNhdChkYXRhLmdldE5vZGVzQnlQYXJhbUZ1enp5KHNldHRpbmcsIG5vZGVzW2ldW2NoaWxkS2V5XSwga2V5LCB2YWx1ZSkpOwoJCQl9CgkJCXJldHVybiByZXN1bHQ7CgkJfSwKCQlnZXROb2Rlc0J5RmlsdGVyOiBmdW5jdGlvbihzZXR0aW5nLCBub2RlcywgZmlsdGVyLCBpc1NpbmdsZSwgaW52b2tlUGFyYW0pIHsKCQkJaWYgKCFub2RlcykgcmV0dXJuIChpc1NpbmdsZSA/IG51bGwgOiBbXSk7CgkJCXZhciBjaGlsZEtleSA9IHNldHRpbmcuZGF0YS5rZXkuY2hpbGRyZW4sCgkJCXJlc3VsdCA9IGlzU2luZ2xlID8gbnVsbCA6IFtdOwoJCQlmb3IgKHZhciBpID0gMCwgbCA9IG5vZGVzLmxlbmd0aDsgaSA8IGw7IGkrKykgewoJCQkJaWYgKHRvb2xzLmFwcGx5KGZpbHRlciwgW25vZGVzW2ldLCBpbnZva2VQYXJhbV0sIGZhbHNlKSkgewoJCQkJCWlmIChpc1NpbmdsZSkge3JldHVybiBub2Rlc1tpXTt9CgkJCQkJcmVzdWx0LnB1c2gobm9kZXNbaV0pOwoJCQkJfQoJCQkJdmFyIHRtcFJlc3VsdCA9IGRhdGEuZ2V0Tm9kZXNCeUZpbHRlcihzZXR0aW5nLCBub2Rlc1tpXVtjaGlsZEtleV0sIGZpbHRlciwgaXNTaW5nbGUsIGludm9rZVBhcmFtKTsKCQkJCWlmIChpc1NpbmdsZSAmJiAhIXRtcFJlc3VsdCkge3JldHVybiB0bXBSZXN1bHQ7fQoJCQkJcmVzdWx0ID0gaXNTaW5nbGUgPyB0bXBSZXN1bHQgOiByZXN1bHQuY29uY2F0KHRtcFJlc3VsdCk7CgkJCX0KCQkJcmV0dXJuIHJlc3VsdDsKCQl9LAoJCWdldFByZU5vZGU6IGZ1bmN0aW9uKHNldHRpbmcsIG5vZGUpIHsKCQkJaWYgKCFub2RlKSByZXR1cm4gbnVsbDsKCQkJdmFyIGNoaWxkS2V5ID0gc2V0dGluZy5kYXRhLmtleS5jaGlsZHJlbiwKCQkJcCA9IG5vZGUucGFyZW50VElkID8gbm9kZS5nZXRQYXJlbnROb2RlKCkgOiBkYXRhLmdldFJvb3Qoc2V0dGluZyk7CgkJCWZvciAodmFyIGk9MCwgbD1wW2NoaWxkS2V5XS5sZW5ndGg7IGk8bDsgaSsrKSB7CgkJCQlpZiAocFtjaGlsZEtleV1baV0gPT09IG5vZGUpIHsKCQkJCQlyZXR1cm4gKGk9PTAgPyBudWxsIDogcFtjaGlsZEtleV1baS0xXSk7CgkJCQl9CgkJCX0KCQkJcmV0dXJuIG51bGw7CgkJfSwKCQlnZXRSb290OiBmdW5jdGlvbihzZXR0aW5nKSB7CgkJCXJldHVybiBzZXR0aW5nID8gcm9vdHNbc2V0dGluZy50cmVlSWRdIDogbnVsbDsKCQl9LAoJCWdldFJvb3RzOiBmdW5jdGlvbigpIHsKCQkJcmV0dXJuIHJvb3RzOwoJCX0sCgkJZ2V0U2V0dGluZzogZnVuY3Rpb24odHJlZUlkKSB7CgkJCXJldHVybiBzZXR0aW5nc1t0cmVlSWRdOwoJCX0sCgkJZ2V0U2V0dGluZ3M6IGZ1bmN0aW9uKCkgewoJCQlyZXR1cm4gc2V0dGluZ3M7CgkJfSwKCQlnZXRaVHJlZVRvb2xzOiBmdW5jdGlvbih0cmVlSWQpIHsKCQkJdmFyIHIgPSB0aGlzLmdldFJvb3QodGhpcy5nZXRTZXR0aW5nKHRyZWVJZCkpOwoJCQlyZXR1cm4gciA/IHIudHJlZVRvb2xzIDogbnVsbDsKCQl9LAoJCWluaXRDYWNoZTogZnVuY3Rpb24oc2V0dGluZykgewoJCQlmb3IgKHZhciBpPTAsIGo9X2luaXQuY2FjaGVzLmxlbmd0aDsgaTxqOyBpKyspIHsKCQkJCV9pbml0LmNhY2hlc1tpXS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwoJCQl9CgkJfSwKCQlpbml0Tm9kZTogZnVuY3Rpb24oc2V0dGluZywgbGV2ZWwsIG5vZGUsIHBhcmVudE5vZGUsIHByZU5vZGUsIG5leHROb2RlKSB7CgkJCWZvciAodmFyIGk9MCwgaj1faW5pdC5ub2Rlcy5sZW5ndGg7IGk8ajsgaSsrKSB7CgkJCQlfaW5pdC5ub2Rlc1tpXS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwoJCQl9CgkJfSwKCQlpbml0Um9vdDogZnVuY3Rpb24oc2V0dGluZykgewoJCQlmb3IgKHZhciBpPTAsIGo9X2luaXQucm9vdHMubGVuZ3RoOyBpPGo7IGkrKykgewoJCQkJX2luaXQucm9vdHNbaV0uYXBwbHkodGhpcywgYXJndW1lbnRzKTsKCQkJfQoJCX0sCgkJaXNTZWxlY3RlZE5vZGU6IGZ1bmN0aW9uKHNldHRpbmcsIG5vZGUpIHsKCQkJdmFyIHJvb3QgPSBkYXRhLmdldFJvb3Qoc2V0dGluZyk7CgkJCWZvciAodmFyIGk9MCwgaj1yb290LmN1clNlbGVjdGVkTGlzdC5sZW5ndGg7IGk8ajsgaSsrKSB7CgkJCQlpZihub2RlID09PSByb290LmN1clNlbGVjdGVkTGlzdFtpXSkgcmV0dXJuIHRydWU7CgkJCX0KCQkJcmV0dXJuIGZhbHNlOwoJCX0sCgkJcmVtb3ZlTm9kZUNhY2hlOiBmdW5jdGlvbihzZXR0aW5nLCBub2RlKSB7CgkJCXZhciBjaGlsZEtleSA9IHNldHRpbmcuZGF0YS5rZXkuY2hpbGRyZW47CgkJCWlmIChub2RlW2NoaWxkS2V5XSkgewoJCQkJZm9yICh2YXIgaT0wLCBsPW5vZGVbY2hpbGRLZXldLmxlbmd0aDsgaTxsOyBpKyspIHsKCQkJCQlkYXRhLnJlbW92ZU5vZGVDYWNoZShzZXR0aW5nLCBub2RlW2NoaWxkS2V5XVtpXSk7CgkJCQl9CgkJCX0KCQkJZGF0YS5nZXRDYWNoZShzZXR0aW5nKS5ub2Rlc1tkYXRhLmdldE5vZGVDYWNoZUlkKG5vZGUudElkKV0gPSBudWxsOwoJCX0sCgkJcmVtb3ZlU2VsZWN0ZWROb2RlOiBmdW5jdGlvbihzZXR0aW5nLCBub2RlKSB7CgkJCXZhciByb290ID0gZGF0YS5nZXRSb290KHNldHRpbmcpOwoJCQlmb3IgKHZhciBpPTAsIGo9cm9vdC5jdXJTZWxlY3RlZExpc3QubGVuZ3RoOyBpPGo7IGkrKykgewoJCQkJaWYobm9kZSA9PT0gcm9vdC5jdXJTZWxlY3RlZExpc3RbaV0gfHwgIWRhdGEuZ2V0Tm9kZUNhY2hlKHNldHRpbmcsIHJvb3QuY3VyU2VsZWN0ZWRMaXN0W2ldLnRJZCkpIHsKCQkJCQlyb290LmN1clNlbGVjdGVkTGlzdC5zcGxpY2UoaSwgMSk7CgkJCQkJc2V0dGluZy50cmVlT2JqLnRyaWdnZXIoY29uc3RzLmV2ZW50LlVOU0VMRUNURUQsIFtzZXR0aW5nLnRyZWVJZCwgbm9kZV0pOwoJCQkJCWktLTtqLS07CgkJCQl9CgkJCX0KCQl9LAoJCXNldENhY2hlOiBmdW5jdGlvbihzZXR0aW5nLCBjYWNoZSkgewoJCQljYWNoZXNbc2V0dGluZy50cmVlSWRdID0gY2FjaGU7CgkJfSwKCQlzZXRSb290OiBmdW5jdGlvbihzZXR0aW5nLCByb290KSB7CgkJCXJvb3RzW3NldHRpbmcudHJlZUlkXSA9IHJvb3Q7CgkJfSwKCQlzZXRaVHJlZVRvb2xzOiBmdW5jdGlvbihzZXR0aW5nLCB6VHJlZVRvb2xzKSB7CgkJCWZvciAodmFyIGk9MCwgaj1faW5pdC56VHJlZVRvb2xzLmxlbmd0aDsgaTxqOyBpKyspIHsKCQkJCV9pbml0LnpUcmVlVG9vbHNbaV0uYXBwbHkodGhpcywgYXJndW1lbnRzKTsKCQkJfQoJCX0sCgkJdHJhbnNmb3JtVG9BcnJheUZvcm1hdDogZnVuY3Rpb24gKHNldHRpbmcsIG5vZGVzKSB7CgkJCWlmICghbm9kZXMpIHJldHVybiBbXTsKCQkJdmFyIGNoaWxkS2V5ID0gc2V0dGluZy5kYXRhLmtleS5jaGlsZHJlbiwKCQkJciA9IFtdOwoJCQlpZiAodG9vbHMuaXNBcnJheShub2RlcykpIHsKCQkJCWZvciAodmFyIGk9MCwgbD1ub2Rlcy5sZW5ndGg7IGk8bDsgaSsrKSB7CgkJCQkJci5wdXNoKG5vZGVzW2ldKTsKCQkJCQlpZiAobm9kZXNbaV1bY2hpbGRLZXldKQoJCQkJCQlyID0gci5jb25jYXQoZGF0YS50cmFuc2Zvcm1Ub0FycmF5Rm9ybWF0KHNldHRpbmcsIG5vZGVzW2ldW2NoaWxkS2V5XSkpOwoJCQkJfQoJCQl9IGVsc2UgewoJCQkJci5wdXNoKG5vZGVzKTsKCQkJCWlmIChub2Rlc1tjaGlsZEtleV0pCgkJCQkJciA9IHIuY29uY2F0KGRhdGEudHJhbnNmb3JtVG9BcnJheUZvcm1hdChzZXR0aW5nLCBub2Rlc1tjaGlsZEtleV0pKTsKCQkJfQoJCQlyZXR1cm4gcjsKCQl9LAoJCXRyYW5zZm9ybVRvelRyZWVGb3JtYXQ6IGZ1bmN0aW9uKHNldHRpbmcsIHNOb2RlcykgewoJCQl2YXIgaSxsLAoJCQlrZXkgPSBzZXR0aW5nLmRhdGEuc2ltcGxlRGF0YS5pZEtleSwKCQkJcGFyZW50S2V5ID0gc2V0dGluZy5kYXRhLnNpbXBsZURhdGEucElkS2V5LAoJCQljaGlsZEtleSA9IHNldHRpbmcuZGF0YS5rZXkuY2hpbGRyZW47CgkJCWlmICgha2V5IHx8IGtleT09IiIgfHwgIXNOb2RlcykgcmV0dXJuIFtdOwoKCQkJaWYgKHRvb2xzLmlzQXJyYXkoc05vZGVzKSkgewoJCQkJdmFyIHIgPSBbXTsKCQkJCXZhciB0bXBNYXAgPSBbXTsKCQkJCWZvciAoaT0wLCBsPXNOb2Rlcy5sZW5ndGg7IGk8bDsgaSsrKSB7CgkJCQkJdG1wTWFwW3NOb2Rlc1tpXVtrZXldXSA9IHNOb2Rlc1tpXTsKCQkJCX0KCQkJCWZvciAoaT0wLCBsPXNOb2Rlcy5sZW5ndGg7IGk8bDsgaSsrKSB7CgkJCQkJaWYgKHRtcE1hcFtzTm9kZXNbaV1bcGFyZW50S2V5XV0gJiYgc05vZGVzW2ldW2tleV0gIT0gc05vZGVzW2ldW3BhcmVudEtleV0pIHsKCQkJCQkJaWYgKCF0bXBNYXBbc05vZGVzW2ldW3BhcmVudEtleV1dW2NoaWxkS2V5XSkKCQkJCQkJCXRtcE1hcFtzTm9kZXNbaV1bcGFyZW50S2V5XV1bY2hpbGRLZXldID0gW107CgkJCQkJCXRtcE1hcFtzTm9kZXNbaV1bcGFyZW50S2V5XV1bY2hpbGRLZXldLnB1c2goc05vZGVzW2ldKTsKCQkJCQl9IGVsc2UgewoJCQkJCQlyLnB1c2goc05vZGVzW2ldKTsKCQkJCQl9CgkJCQl9CgkJCQlyZXR1cm4gcjsKCQkJfWVsc2UgewoJCQkJcmV0dXJuIFtzTm9kZXNdOwoJCQl9CgkJfQoJfSwKCS8vbWV0aG9kIG9mIGV2ZW50IHByb3h5CglldmVudCA9IHsKCQliaW5kRXZlbnQ6IGZ1bmN0aW9uKHNldHRpbmcpIHsKCQkJZm9yICh2YXIgaT0wLCBqPV9pbml0LmJpbmQubGVuZ3RoOyBpPGo7IGkrKykgewoJCQkJX2luaXQuYmluZFtpXS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwoJCQl9CgkJfSwKCQl1bmJpbmRFdmVudDogZnVuY3Rpb24oc2V0dGluZykgewoJCQlmb3IgKHZhciBpPTAsIGo9X2luaXQudW5iaW5kLmxlbmd0aDsgaTxqOyBpKyspIHsKCQkJCV9pbml0LnVuYmluZFtpXS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwoJCQl9CgkJfSwKCQliaW5kVHJlZTogZnVuY3Rpb24oc2V0dGluZykgewoJCQl2YXIgZXZlbnRQYXJhbSA9IHsKCQkJCXRyZWVJZDogc2V0dGluZy50cmVlSWQKCQkJfSwKCQkJbyA9IHNldHRpbmcudHJlZU9iajsKCQkJaWYgKCFzZXR0aW5nLnZpZXcudHh0U2VsZWN0ZWRFbmFibGUpIHsKCQkJCS8vIGZvciBjYW4ndCBzZWxlY3QgdGV4dAoJCQkJby5iaW5kKCdzZWxlY3RzdGFydCcsIGhhbmRsZXIub25TZWxlY3RTdGFydCkuY3NzKHsKCQkJCQkiLW1vei11c2VyLXNlbGVjdCI6Ii1tb3otbm9uZSIKCQkJCX0pOwoJCQl9CgkJCW8uYmluZCgnY2xpY2snLCBldmVudFBhcmFtLCBldmVudC5wcm94eSk7CgkJCW8uYmluZCgnZGJsY2xpY2snLCBldmVudFBhcmFtLCBldmVudC5wcm94eSk7CgkJCW8uYmluZCgnbW91c2VvdmVyJywgZXZlbnRQYXJhbSwgZXZlbnQucHJveHkpOwoJCQlvLmJpbmQoJ21vdXNlb3V0JywgZXZlbnRQYXJhbSwgZXZlbnQucHJveHkpOwoJCQlvLmJpbmQoJ21vdXNlZG93bicsIGV2ZW50UGFyYW0sIGV2ZW50LnByb3h5KTsKCQkJby5iaW5kKCdtb3VzZXVwJywgZXZlbnRQYXJhbSwgZXZlbnQucHJveHkpOwoJCQlvLmJpbmQoJ2NvbnRleHRtZW51JywgZXZlbnRQYXJhbSwgZXZlbnQucHJveHkpOwoJCX0sCgkJdW5iaW5kVHJlZTogZnVuY3Rpb24oc2V0dGluZykgewoJCQl2YXIgbyA9IHNldHRpbmcudHJlZU9iajsKCQkJby51bmJpbmQoJ3NlbGVjdHN0YXJ0JywgaGFuZGxlci5vblNlbGVjdFN0YXJ0KQoJCQkJLnVuYmluZCgnY2xpY2snLCBldmVudC5wcm94eSkKCQkJCS51bmJpbmQoJ2RibGNsaWNrJywgZXZlbnQucHJveHkpCgkJCQkudW5iaW5kKCdtb3VzZW92ZXInLCBldmVudC5wcm94eSkKCQkJCS51bmJpbmQoJ21vdXNlb3V0JywgZXZlbnQucHJveHkpCgkJCQkudW5iaW5kKCdtb3VzZWRvd24nLCBldmVudC5wcm94eSkKCQkJCS51bmJpbmQoJ21vdXNldXAnLCBldmVudC5wcm94eSkKCQkJCS51bmJpbmQoJ2NvbnRleHRtZW51JywgZXZlbnQucHJveHkpOwoJCX0sCgkJZG9Qcm94eTogZnVuY3Rpb24oZSkgewoJCQl2YXIgcmVzdWx0cyA9IFtdOwoJCQlmb3IgKHZhciBpPTAsIGo9X2luaXQucHJveHlzLmxlbmd0aDsgaTxqOyBpKyspIHsKCQkJCXZhciBwcm94eVJlc3VsdCA9IF9pbml0LnByb3h5c1tpXS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwoJCQkJcmVzdWx0cy5wdXNoKHByb3h5UmVzdWx0KTsKCQkJCWlmIChwcm94eVJlc3VsdC5zdG9wKSB7CgkJCQkJYnJlYWs7CgkJCQl9CgkJCX0KCQkJcmV0dXJuIHJlc3VsdHM7CgkJfSwKCQlwcm94eTogZnVuY3Rpb24oZSkgewoJCQl2YXIgc2V0dGluZyA9IGRhdGEuZ2V0U2V0dGluZyhlLmRhdGEudHJlZUlkKTsKCQkJaWYgKCF0b29scy51Q2FuRG8oc2V0dGluZywgZSkpIHJldHVybiB0cnVlOwoJCQl2YXIgcmVzdWx0cyA9IGV2ZW50LmRvUHJveHkoZSksCgkJCXIgPSB0cnVlLCB4ID0gZmFsc2U7CgkJCWZvciAodmFyIGk9MCwgbD1yZXN1bHRzLmxlbmd0aDsgaTxsOyBpKyspIHsKCQkJCXZhciBwcm94eVJlc3VsdCA9IHJlc3VsdHNbaV07CgkJCQlpZiAocHJveHlSZXN1bHQubm9kZUV2ZW50Q2FsbGJhY2spIHsKCQkJCQl4ID0gdHJ1ZTsKCQkJCQlyID0gcHJveHlSZXN1bHQubm9kZUV2ZW50Q2FsbGJhY2suYXBwbHkocHJveHlSZXN1bHQsIFtlLCBwcm94eVJlc3VsdC5ub2RlXSkgJiYgcjsKCQkJCX0KCQkJCWlmIChwcm94eVJlc3VsdC50cmVlRXZlbnRDYWxsYmFjaykgewoJCQkJCXggPSB0cnVlOwoJCQkJCXIgPSBwcm94eVJlc3VsdC50cmVlRXZlbnRDYWxsYmFjay5hcHBseShwcm94eVJlc3VsdCwgW2UsIHByb3h5UmVzdWx0Lm5vZGVdKSAmJiByOwoJCQkJfQoJCQl9CgkJCXJldHVybiByOwoJCX0KCX0sCgkvL21ldGhvZCBvZiBldmVudCBoYW5kbGVyCgloYW5kbGVyID0gewoJCW9uU3dpdGNoTm9kZTogZnVuY3Rpb24gKGV2ZW50LCBub2RlKSB7CgkJCXZhciBzZXR0aW5nID0gZGF0YS5nZXRTZXR0aW5nKGV2ZW50LmRhdGEudHJlZUlkKTsKCQkJaWYgKG5vZGUub3BlbikgewoJCQkJaWYgKHRvb2xzLmFwcGx5KHNldHRpbmcuY2FsbGJhY2suYmVmb3JlQ29sbGFwc2UsIFtzZXR0aW5nLnRyZWVJZCwgbm9kZV0sIHRydWUpID09IGZhbHNlKSByZXR1cm4gdHJ1ZTsKCQkJCWRhdGEuZ2V0Um9vdChzZXR0aW5nKS5leHBhbmRUcmlnZ2VyRmxhZyA9IHRydWU7CgkJCQl2aWV3LnN3aXRjaE5vZGUoc2V0dGluZywgbm9kZSk7CgkJCX0gZWxzZSB7CgkJCQlpZiAodG9vbHMuYXBwbHkoc2V0dGluZy5jYWxsYmFjay5iZWZvcmVFeHBhbmQsIFtzZXR0aW5nLnRyZWVJZCwgbm9kZV0sIHRydWUpID09IGZhbHNlKSByZXR1cm4gdHJ1ZTsKCQkJCWRhdGEuZ2V0Um9vdChzZXR0aW5nKS5leHBhbmRUcmlnZ2VyRmxhZyA9IHRydWU7CgkJCQl2aWV3LnN3aXRjaE5vZGUoc2V0dGluZywgbm9kZSk7CgkJCX0KCQkJcmV0dXJuIHRydWU7CgkJfSwKCQlvbkNsaWNrTm9kZTogZnVuY3Rpb24gKGV2ZW50LCBub2RlKSB7CgkJCXZhciBzZXR0aW5nID0gZGF0YS5nZXRTZXR0aW5nKGV2ZW50LmRhdGEudHJlZUlkKSwKCQkJY2xpY2tGbGFnID0gKCAoc2V0dGluZy52aWV3LmF1dG9DYW5jZWxTZWxlY3RlZCAmJiAoZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5KSkgJiYgZGF0YS5pc1NlbGVjdGVkTm9kZShzZXR0aW5nLCBub2RlKSkgPyAwIDogKHNldHRpbmcudmlldy5hdXRvQ2FuY2VsU2VsZWN0ZWQgJiYgKGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleSkgJiYgc2V0dGluZy52aWV3LnNlbGVjdGVkTXVsdGkpID8gMiA6IDE7CgkJCWlmICh0b29scy5hcHBseShzZXR0aW5nLmNhbGxiYWNrLmJlZm9yZUNsaWNrLCBbc2V0dGluZy50cmVlSWQsIG5vZGUsIGNsaWNrRmxhZ10sIHRydWUpID09IGZhbHNlKSByZXR1cm4gdHJ1ZTsKCQkJaWYgKGNsaWNrRmxhZyA9PT0gMCkgewoJCQkJdmlldy5jYW5jZWxQcmVTZWxlY3RlZE5vZGUoc2V0dGluZywgbm9kZSk7CgkJCX0gZWxzZSB7CgkJCQl2aWV3LnNlbGVjdE5vZGUoc2V0dGluZywgbm9kZSwgY2xpY2tGbGFnID09PSAyKTsKCQkJfQoJCQlzZXR0aW5nLnRyZWVPYmoudHJpZ2dlcihjb25zdHMuZXZlbnQuQ0xJQ0ssIFtldmVudCwgc2V0dGluZy50cmVlSWQsIG5vZGUsIGNsaWNrRmxhZ10pOwoJCQlyZXR1cm4gdHJ1ZTsKCQl9LAoJCW9uWlRyZWVNb3VzZWRvd246IGZ1bmN0aW9uKGV2ZW50LCBub2RlKSB7CgkJCXZhciBzZXR0aW5nID0gZGF0YS5nZXRTZXR0aW5nKGV2ZW50LmRhdGEudHJlZUlkKTsKCQkJaWYgKHRvb2xzLmFwcGx5KHNldHRpbmcuY2FsbGJhY2suYmVmb3JlTW91c2VEb3duLCBbc2V0dGluZy50cmVlSWQsIG5vZGVdLCB0cnVlKSkgewoJCQkJdG9vbHMuYXBwbHkoc2V0dGluZy5jYWxsYmFjay5vbk1vdXNlRG93biwgW2V2ZW50LCBzZXR0aW5nLnRyZWVJZCwgbm9kZV0pOwoJCQl9CgkJCXJldHVybiB0cnVlOwoJCX0sCgkJb25aVHJlZU1vdXNldXA6IGZ1bmN0aW9uKGV2ZW50LCBub2RlKSB7CgkJCXZhciBzZXR0aW5nID0gZGF0YS5nZXRTZXR0aW5nKGV2ZW50LmRhdGEudHJlZUlkKTsKCQkJaWYgKHRvb2xzLmFwcGx5KHNldHRpbmcuY2FsbGJhY2suYmVmb3JlTW91c2VVcCwgW3NldHRpbmcudHJlZUlkLCBub2RlXSwgdHJ1ZSkpIHsKCQkJCXRvb2xzLmFwcGx5KHNldHRpbmcuY2FsbGJhY2sub25Nb3VzZVVwLCBbZXZlbnQsIHNldHRpbmcudHJlZUlkLCBub2RlXSk7CgkJCX0KCQkJcmV0dXJuIHRydWU7CgkJfSwKCQlvblpUcmVlRGJsY2xpY2s6IGZ1bmN0aW9uKGV2ZW50LCBub2RlKSB7CgkJCXZhciBzZXR0aW5nID0gZGF0YS5nZXRTZXR0aW5nKGV2ZW50LmRhdGEudHJlZUlkKTsKCQkJaWYgKHRvb2xzLmFwcGx5KHNldHRpbmcuY2FsbGJhY2suYmVmb3JlRGJsQ2xpY2ssIFtzZXR0aW5nLnRyZWVJZCwgbm9kZV0sIHRydWUpKSB7CgkJCQl0b29scy5hcHBseShzZXR0aW5nLmNhbGxiYWNrLm9uRGJsQ2xpY2ssIFtldmVudCwgc2V0dGluZy50cmVlSWQsIG5vZGVdKTsKCQkJfQoJCQlyZXR1cm4gdHJ1ZTsKCQl9LAoJCW9uWlRyZWVDb250ZXh0bWVudTogZnVuY3Rpb24oZXZlbnQsIG5vZGUpIHsKCQkJdmFyIHNldHRpbmcgPSBkYXRhLmdldFNldHRpbmcoZXZlbnQuZGF0YS50cmVlSWQpOwoJCQlpZiAodG9vbHMuYXBwbHkoc2V0dGluZy5jYWxsYmFjay5iZWZvcmVSaWdodENsaWNrLCBbc2V0dGluZy50cmVlSWQsIG5vZGVdLCB0cnVlKSkgewoJCQkJdG9vbHMuYXBwbHkoc2V0dGluZy5jYWxsYmFjay5vblJpZ2h0Q2xpY2ssIFtldmVudCwgc2V0dGluZy50cmVlSWQsIG5vZGVdKTsKCQkJfQoJCQlyZXR1cm4gKHR5cGVvZiBzZXR0aW5nLmNhbGxiYWNrLm9uUmlnaHRDbGljaykgIT0gImZ1bmN0aW9uIjsKCQl9LAoJCW9uU2VsZWN0U3RhcnQ6IGZ1bmN0aW9uKGUpewoJCQl2YXIgbiA9IGUub3JpZ2luYWxFdmVudC5zcmNFbGVtZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7CgkJCXJldHVybiAobiA9PT0gImlucHV0IiB8fCBuID09PSAidGV4dGFyZWEiICk7CgkJfQoJfSwKCS8vbWV0aG9kIG9mIHRvb2xzIGZvciB6VHJlZQoJdG9vbHMgPSB7CgkJYXBwbHk6IGZ1bmN0aW9uKGZ1biwgcGFyYW0sIGRlZmF1bHRWYWx1ZSkgewoJCQlpZiAoKHR5cGVvZiBmdW4pID09ICJmdW5jdGlvbiIpIHsKCQkJCXJldHVybiBmdW4uYXBwbHkoenQsIHBhcmFtP3BhcmFtOltdKTsKCQkJfQoJCQlyZXR1cm4gZGVmYXVsdFZhbHVlOwoJCX0sCgkJY2FuQXN5bmM6IGZ1bmN0aW9uKHNldHRpbmcsIG5vZGUpIHsKCQkJdmFyIGNoaWxkS2V5ID0gc2V0dGluZy5kYXRhLmtleS5jaGlsZHJlbjsKCQkJcmV0dXJuIChzZXR0aW5nLmFzeW5jLmVuYWJsZSAmJiBub2RlICYmIG5vZGUuaXNQYXJlbnQgJiYgIShub2RlLnpBc3luYyB8fCAobm9kZVtjaGlsZEtleV0gJiYgbm9kZVtjaGlsZEtleV0ubGVuZ3RoID4gMCkpKTsKCQl9LAoJCWNsb25lOiBmdW5jdGlvbiAob2JqKXsKCQkJaWYgKG9iaiA9PT0gbnVsbCkgcmV0dXJuIG51bGw7CgkJCXZhciBvID0gdG9vbHMuaXNBcnJheShvYmopID8gW10gOiB7fTsKCQkJZm9yKHZhciBpIGluIG9iail7CgkJCQlvW2ldID0gKG9ialtpXSBpbnN0YW5jZW9mIERhdGUpID8gbmV3IERhdGUob2JqW2ldLmdldFRpbWUoKSkgOiAodHlwZW9mIG9ialtpXSA9PT0gIm9iamVjdCIgPyB0b29scy5jbG9uZShvYmpbaV0pIDogb2JqW2ldKTsKCQkJfQoJCQlyZXR1cm4gbzsKCQl9LAoJCWVxczogZnVuY3Rpb24oc3RyMSwgc3RyMikgewoJCQlyZXR1cm4gc3RyMS50b0xvd2VyQ2FzZSgpID09PSBzdHIyLnRvTG93ZXJDYXNlKCk7CgkJfSwKCQlpc0FycmF5OiBmdW5jdGlvbihhcnIpIHsKCQkJcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuYXBwbHkoYXJyKSA9PT0gIltvYmplY3QgQXJyYXldIjsKCQl9LAoJCSQ6IGZ1bmN0aW9uKG5vZGUsIGV4cCwgc2V0dGluZykgewoJCQlpZiAoISFleHAgJiYgdHlwZW9mIGV4cCAhPSAic3RyaW5nIikgewoJCQkJc2V0dGluZyA9IGV4cDsKCQkJCWV4cCA9ICIiOwoJCQl9CgkJCWlmICh0eXBlb2Ygbm9kZSA9PSAic3RyaW5nIikgewoJCQkJcmV0dXJuICQobm9kZSwgc2V0dGluZyA/IHNldHRpbmcudHJlZU9iai5nZXQoMCkub3duZXJEb2N1bWVudCA6IG51bGwpOwoJCQl9IGVsc2UgewoJCQkJcmV0dXJuICQoIiMiICsgbm9kZS50SWQgKyBleHAsIHNldHRpbmcgPyBzZXR0aW5nLnRyZWVPYmogOiBudWxsKTsKCQkJfQoJCX0sCgkJZ2V0TURvbTogZnVuY3Rpb24gKHNldHRpbmcsIGN1ckRvbSwgdGFyZ2V0RXhwcikgewoJCQlpZiAoIWN1ckRvbSkgcmV0dXJuIG51bGw7CgkJCXdoaWxlIChjdXJEb20gJiYgY3VyRG9tLmlkICE9PSBzZXR0aW5nLnRyZWVJZCkgewoJCQkJZm9yICh2YXIgaT0wLCBsPXRhcmdldEV4cHIubGVuZ3RoOyBjdXJEb20udGFnTmFtZSAmJiBpPGw7IGkrKykgewoJCQkJCWlmICh0b29scy5lcXMoY3VyRG9tLnRhZ05hbWUsIHRhcmdldEV4cHJbaV0udGFnTmFtZSkgJiYgY3VyRG9tLmdldEF0dHJpYnV0ZSh0YXJnZXRFeHByW2ldLmF0dHJOYW1lKSAhPT0gbnVsbCkgewoJCQkJCQlyZXR1cm4gY3VyRG9tOwoJCQkJCX0KCQkJCX0KCQkJCWN1ckRvbSA9IGN1ckRvbS5wYXJlbnROb2RlOwoJCQl9CgkJCXJldHVybiBudWxsOwoJCX0sCgkJZ2V0Tm9kZU1haW5Eb206ZnVuY3Rpb24odGFyZ2V0KSB7CgkJCXJldHVybiAoJCh0YXJnZXQpLnBhcmVudCgibGkiKS5nZXQoMCkgfHwgJCh0YXJnZXQpLnBhcmVudHNVbnRpbCgibGkiKS5wYXJlbnQoKS5nZXQoMCkpOwoJCX0sCgkJaXNDaGlsZE9yU2VsZjogZnVuY3Rpb24oZG9tLCBwYXJlbnRJZCkgewoJCQlyZXR1cm4gKCAkKGRvbSkuY2xvc2VzdCgiIyIgKyBwYXJlbnRJZCkubGVuZ3RoPiAwICk7CgkJfSwKCQl1Q2FuRG86IGZ1bmN0aW9uKHNldHRpbmcsIGUpIHsKCQkJcmV0dXJuIHRydWU7CgkJfQoJfSwKCS8vbWV0aG9kIG9mIG9wZXJhdGUgenRyZWUgZG9tCgl2aWV3ID0gewoJCWFkZE5vZGVzOiBmdW5jdGlvbihzZXR0aW5nLCBwYXJlbnROb2RlLCBpbmRleCwgbmV3Tm9kZXMsIGlzU2lsZW50KSB7CgkJCWlmIChzZXR0aW5nLmRhdGEua2VlcC5sZWFmICYmIHBhcmVudE5vZGUgJiYgIXBhcmVudE5vZGUuaXNQYXJlbnQpIHsKCQkJCXJldHVybjsKCQkJfQoJCQlpZiAoIXRvb2xzLmlzQXJyYXkobmV3Tm9kZXMpKSB7CgkJCQluZXdOb2RlcyA9IFtuZXdOb2Rlc107CgkJCX0KCQkJaWYgKHNldHRpbmcuZGF0YS5zaW1wbGVEYXRhLmVuYWJsZSkgewoJCQkJbmV3Tm9kZXMgPSBkYXRhLnRyYW5zZm9ybVRvelRyZWVGb3JtYXQoc2V0dGluZywgbmV3Tm9kZXMpOwoJCQl9CgkJCWlmIChwYXJlbnROb2RlKSB7CgkJCQl2YXIgdGFyZ2V0X3N3aXRjaE9iaiA9ICQkKHBhcmVudE5vZGUsIGNvbnN0cy5pZC5TV0lUQ0gsIHNldHRpbmcpLAoJCQkJdGFyZ2V0X2ljb09iaiA9ICQkKHBhcmVudE5vZGUsIGNvbnN0cy5pZC5JQ09OLCBzZXR0aW5nKSwKCQkJCXRhcmdldF91bE9iaiA9ICQkKHBhcmVudE5vZGUsIGNvbnN0cy5pZC5VTCwgc2V0dGluZyk7CgoJCQkJaWYgKCFwYXJlbnROb2RlLm9wZW4pIHsKCQkJCQl2aWV3LnJlcGxhY2VTd2l0Y2hDbGFzcyhwYXJlbnROb2RlLCB0YXJnZXRfc3dpdGNoT2JqLCBjb25zdHMuZm9sZGVyLkNMT1NFKTsKCQkJCQl2aWV3LnJlcGxhY2VJY29DbGFzcyhwYXJlbnROb2RlLCB0YXJnZXRfaWNvT2JqLCBjb25zdHMuZm9sZGVyLkNMT1NFKTsKCQkJCQlwYXJlbnROb2RlLm9wZW4gPSBmYWxzZTsKCQkJCQl0YXJnZXRfdWxPYmouY3NzKHsKCQkJCQkJImRpc3BsYXkiOiAibm9uZSIKCQkJCQl9KTsKCQkJCX0KCgkJCQlkYXRhLmFkZE5vZGVzRGF0YShzZXR0aW5nLCBwYXJlbnROb2RlLCBpbmRleCwgbmV3Tm9kZXMpOwoJCQkJdmlldy5jcmVhdGVOb2RlcyhzZXR0aW5nLCBwYXJlbnROb2RlLmxldmVsICsgMSwgbmV3Tm9kZXMsIHBhcmVudE5vZGUsIGluZGV4KTsKCQkJCWlmICghaXNTaWxlbnQpIHsKCQkJCQl2aWV3LmV4cGFuZENvbGxhcHNlUGFyZW50Tm9kZShzZXR0aW5nLCBwYXJlbnROb2RlLCB0cnVlKTsKCQkJCX0KCQkJfSBlbHNlIHsKCQkJCWRhdGEuYWRkTm9kZXNEYXRhKHNldHRpbmcsIGRhdGEuZ2V0Um9vdChzZXR0aW5nKSwgaW5kZXgsIG5ld05vZGVzKTsKCQkJCXZpZXcuY3JlYXRlTm9kZXMoc2V0dGluZywgMCwgbmV3Tm9kZXMsIG51bGwsIGluZGV4KTsKCQkJfQoJCX0sCgkJYXBwZW5kTm9kZXM6IGZ1bmN0aW9uKHNldHRpbmcsIGxldmVsLCBub2RlcywgcGFyZW50Tm9kZSwgaW5kZXgsIGluaXRGbGFnLCBvcGVuRmxhZykgewoJCQlpZiAoIW5vZGVzKSByZXR1cm4gW107CgkJCXZhciBodG1sID0gW10sCgkJCWNoaWxkS2V5ID0gc2V0dGluZy5kYXRhLmtleS5jaGlsZHJlbjsKCgkJCXZhciB0bXBQTm9kZSA9IChwYXJlbnROb2RlKSA/IHBhcmVudE5vZGU6IGRhdGEuZ2V0Um9vdChzZXR0aW5nKSwKCQkJCXRtcFBDaGlsZCA9IHRtcFBOb2RlW2NoaWxkS2V5XSwKCQkJCWlzRmlyc3ROb2RlLCBpc0xhc3ROb2RlOwoKCQkJaWYgKCF0bXBQQ2hpbGQgfHwgaW5kZXggPj0gdG1wUENoaWxkLmxlbmd0aCkgewoJCQkJaW5kZXggPSAtMTsKCQkJfQoKCQkJZm9yICh2YXIgaSA9IDAsIGwgPSBub2Rlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHsKCQkJCXZhciBub2RlID0gbm9kZXNbaV07CgkJCQlpZiAoaW5pdEZsYWcpIHsKCQkJCQlpc0ZpcnN0Tm9kZSA9ICgoaW5kZXg9PT0wIHx8IHRtcFBDaGlsZC5sZW5ndGggPT0gbm9kZXMubGVuZ3RoKSAmJiAoaSA9PSAwKSk7CgkJCQkJaXNMYXN0Tm9kZSA9IChpbmRleCA8IDAgJiYgaSA9PSAobm9kZXMubGVuZ3RoIC0gMSkpOwoJCQkJCWRhdGEuaW5pdE5vZGUoc2V0dGluZywgbGV2ZWwsIG5vZGUsIHBhcmVudE5vZGUsIGlzRmlyc3ROb2RlLCBpc0xhc3ROb2RlLCBvcGVuRmxhZyk7CgkJCQkJZGF0YS5hZGROb2RlQ2FjaGUoc2V0dGluZywgbm9kZSk7CgkJCQl9CgoJCQkJdmFyIGNoaWxkSHRtbCA9IFtdOwoJCQkJaWYgKG5vZGVbY2hpbGRLZXldICYmIG5vZGVbY2hpbGRLZXldLmxlbmd0aCA+IDApIHsKCQkJCQkvL21ha2UgY2hpbGQgaHRtbCBmaXJzdCwgYmVjYXVzZSBjaGVja1R5cGUKCQkJCQljaGlsZEh0bWwgPSB2aWV3LmFwcGVuZE5vZGVzKHNldHRpbmcsIGxldmVsICsgMSwgbm9kZVtjaGlsZEtleV0sIG5vZGUsIC0xLCBpbml0RmxhZywgb3BlbkZsYWcgJiYgbm9kZS5vcGVuKTsKCQkJCX0KCQkJCWlmIChvcGVuRmxhZykgewoKCQkJCQl2aWV3Lm1ha2VET01Ob2RlTWFpbkJlZm9yZShodG1sLCBzZXR0aW5nLCBub2RlKTsKCQkJCQl2aWV3Lm1ha2VET01Ob2RlTGluZShodG1sLCBzZXR0aW5nLCBub2RlKTsKCQkJCQlkYXRhLmdldEJlZm9yZUEoc2V0dGluZywgbm9kZSwgaHRtbCk7CgkJCQkJdmlldy5tYWtlRE9NTm9kZU5hbWVCZWZvcmUoaHRtbCwgc2V0dGluZywgbm9kZSk7CgkJCQkJZGF0YS5nZXRJbm5lckJlZm9yZUEoc2V0dGluZywgbm9kZSwgaHRtbCk7CgkJCQkJdmlldy5tYWtlRE9NTm9kZUljb24oaHRtbCwgc2V0dGluZywgbm9kZSk7CgkJCQkJZGF0YS5nZXRJbm5lckFmdGVyQShzZXR0aW5nLCBub2RlLCBodG1sKTsKCQkJCQl2aWV3Lm1ha2VET01Ob2RlTmFtZUFmdGVyKGh0bWwsIHNldHRpbmcsIG5vZGUpOwoJCQkJCWRhdGEuZ2V0QWZ0ZXJBKHNldHRpbmcsIG5vZGUsIGh0bWwpOwoJCQkJCWlmIChub2RlLmlzUGFyZW50ICYmIG5vZGUub3BlbikgewoJCQkJCQl2aWV3Lm1ha2VVbEh0bWwoc2V0dGluZywgbm9kZSwgaHRtbCwgY2hpbGRIdG1sLmpvaW4oJycpKTsKCQkJCQl9CgkJCQkJdmlldy5tYWtlRE9NTm9kZU1haW5BZnRlcihodG1sLCBzZXR0aW5nLCBub2RlKTsKCQkJCQlkYXRhLmFkZENyZWF0ZWROb2RlKHNldHRpbmcsIG5vZGUpOwoJCQkJfQoJCQl9CgkJCXJldHVybiBodG1sOwoJCX0sCgkJYXBwZW5kUGFyZW50VUxEb206IGZ1bmN0aW9uKHNldHRpbmcsIG5vZGUpIHsKCQkJdmFyIGh0bWwgPSBbXSwKCQkJbk9iaiA9ICQkKG5vZGUsIHNldHRpbmcpOwoJCQlpZiAoIW5PYmouZ2V0KDApICYmICEhbm9kZS5wYXJlbnRUSWQpIHsKCQkJCXZpZXcuYXBwZW5kUGFyZW50VUxEb20oc2V0dGluZywgbm9kZS5nZXRQYXJlbnROb2RlKCkpOwoJCQkJbk9iaiA9ICQkKG5vZGUsIHNldHRpbmcpOwoJCQl9CgkJCXZhciB1bE9iaiA9ICQkKG5vZGUsIGNvbnN0cy5pZC5VTCwgc2V0dGluZyk7CgkJCWlmICh1bE9iai5nZXQoMCkpIHsKCQkJCXVsT2JqLnJlbW92ZSgpOwoJCQl9CgkJCXZhciBjaGlsZEtleSA9IHNldHRpbmcuZGF0YS5rZXkuY2hpbGRyZW4sCgkJCWNoaWxkSHRtbCA9IHZpZXcuYXBwZW5kTm9kZXMoc2V0dGluZywgbm9kZS5sZXZlbCsxLCBub2RlW2NoaWxkS2V5XSwgbm9kZSwgLTEsIGZhbHNlLCB0cnVlKTsKCQkJdmlldy5tYWtlVWxIdG1sKHNldHRpbmcsIG5vZGUsIGh0bWwsIGNoaWxkSHRtbC5qb2luKCcnKSk7CgkJCW5PYmouYXBwZW5kKGh0bWwuam9pbignJykpOwoJCX0sCgkJYXN5bmNOb2RlOiBmdW5jdGlvbihzZXR0aW5nLCBub2RlLCBpc1NpbGVudCwgY2FsbGJhY2spIHsKCQkJdmFyIGksIGw7CgkJCWlmIChub2RlICYmICFub2RlLmlzUGFyZW50KSB7CgkJCQl0b29scy5hcHBseShjYWxsYmFjayk7CgkJCQlyZXR1cm4gZmFsc2U7CgkJCX0gZWxzZSBpZiAobm9kZSAmJiBub2RlLmlzQWpheGluZykgewoJCQkJcmV0dXJuIGZhbHNlOwoJCQl9IGVsc2UgaWYgKHRvb2xzLmFwcGx5KHNldHRpbmcuY2FsbGJhY2suYmVmb3JlQXN5bmMsIFtzZXR0aW5nLnRyZWVJZCwgbm9kZV0sIHRydWUpID09IGZhbHNlKSB7CgkJCQl0b29scy5hcHBseShjYWxsYmFjayk7CgkJCQlyZXR1cm4gZmFsc2U7CgkJCX0KCQkJaWYgKG5vZGUpIHsKCQkJCW5vZGUuaXNBamF4aW5nID0gdHJ1ZTsKCQkJCXZhciBpY29PYmogPSAkJChub2RlLCBjb25zdHMuaWQuSUNPTiwgc2V0dGluZyk7CgkJCQlpY29PYmouYXR0cih7InN0eWxlIjoiIiwgImNsYXNzIjpjb25zdHMuY2xhc3NOYW1lLkJVVFRPTiArICIgIiArIGNvbnN0cy5jbGFzc05hbWUuSUNPX0xPQURJTkd9KTsKCQkJfQoKCQkJdmFyIHRtcFBhcmFtID0ge307CgkJCWZvciAoaSA9IDAsIGwgPSBzZXR0aW5nLmFzeW5jLmF1dG9QYXJhbS5sZW5ndGg7IG5vZGUgJiYgaSA8IGw7IGkrKykgewoJCQkJdmFyIHBLZXkgPSBzZXR0aW5nLmFzeW5jLmF1dG9QYXJhbVtpXS5zcGxpdCgiPSIpLCBzcEtleSA9IHBLZXk7CgkJCQlpZiAocEtleS5sZW5ndGg+MSkgewoJCQkJCXNwS2V5ID0gcEtleVsxXTsKCQkJCQlwS2V5ID0gcEtleVswXTsKCQkJCX0KCQkJCXRtcFBhcmFtW3NwS2V5XSA9IG5vZGVbcEtleV07CgkJCX0KCQkJaWYgKHRvb2xzLmlzQXJyYXkoc2V0dGluZy5hc3luYy5vdGhlclBhcmFtKSkgewoJCQkJZm9yIChpID0gMCwgbCA9IHNldHRpbmcuYXN5bmMub3RoZXJQYXJhbS5sZW5ndGg7IGkgPCBsOyBpICs9IDIpIHsKCQkJCQl0bXBQYXJhbVtzZXR0aW5nLmFzeW5jLm90aGVyUGFyYW1baV1dID0gc2V0dGluZy5hc3luYy5vdGhlclBhcmFtW2kgKyAxXTsKCQkJCX0KCQkJfSBlbHNlIHsKCQkJCWZvciAodmFyIHAgaW4gc2V0dGluZy5hc3luYy5vdGhlclBhcmFtKSB7CgkJCQkJdG1wUGFyYW1bcF0gPSBzZXR0aW5nLmFzeW5jLm90aGVyUGFyYW1bcF07CgkJCQl9CgkJCX0KCgkJCXZhciBfdG1wViA9IGRhdGEuZ2V0Um9vdChzZXR0aW5nKS5fdmVyOwoJCQkkLmFqYXgoewoJCQkJY29udGVudFR5cGU6IHNldHRpbmcuYXN5bmMuY29udGVudFR5cGUsCiAgICAgICAgICAgICAgICBjYWNoZTogZmFsc2UsCgkJCQl0eXBlOiBzZXR0aW5nLmFzeW5jLnR5cGUsCgkJCQl1cmw6IHRvb2xzLmFwcGx5KHNldHRpbmcuYXN5bmMudXJsLCBbc2V0dGluZy50cmVlSWQsIG5vZGVdLCBzZXR0aW5nLmFzeW5jLnVybCksCgkJCQlkYXRhOiB0bXBQYXJhbSwKCQkJCWRhdGFUeXBlOiBzZXR0aW5nLmFzeW5jLmRhdGFUeXBlLAoJCQkJc3VjY2VzczogZnVuY3Rpb24obXNnKSB7CgkJCQkJaWYgKF90bXBWICE9IGRhdGEuZ2V0Um9vdChzZXR0aW5nKS5fdmVyKSB7CgkJCQkJCXJldHVybjsKCQkJCQl9CgkJCQkJdmFyIG5ld05vZGVzID0gW107CgkJCQkJdHJ5IHsKCQkJCQkJaWYgKCFtc2cgfHwgbXNnLmxlbmd0aCA9PSAwKSB7CgkJCQkJCQluZXdOb2RlcyA9IFtdOwoJCQkJCQl9IGVsc2UgaWYgKHR5cGVvZiBtc2cgPT0gInN0cmluZyIpIHsKCQkJCQkJCW5ld05vZGVzID0gZXZhbCgiKCIgKyBtc2cgKyAiKSIpOwoJCQkJCQl9IGVsc2UgewoJCQkJCQkJbmV3Tm9kZXMgPSBtc2c7CgkJCQkJCX0KCQkJCQl9IGNhdGNoKGVycikgewoJCQkJCQluZXdOb2RlcyA9IG1zZzsKCQkJCQl9CgoJCQkJCWlmIChub2RlKSB7CgkJCQkJCW5vZGUuaXNBamF4aW5nID0gbnVsbDsKCQkJCQkJbm9kZS56QXN5bmMgPSB0cnVlOwoJCQkJCX0KCQkJCQl2aWV3LnNldE5vZGVMaW5lSWNvcyhzZXR0aW5nLCBub2RlKTsKCQkJCQlpZiAobmV3Tm9kZXMgJiYgbmV3Tm9kZXMgIT09ICIiKSB7CgkJCQkJCW5ld05vZGVzID0gdG9vbHMuYXBwbHkoc2V0dGluZy5hc3luYy5kYXRhRmlsdGVyLCBbc2V0dGluZy50cmVlSWQsIG5vZGUsIG5ld05vZGVzXSwgbmV3Tm9kZXMpOwoJCQkJCQl2aWV3LmFkZE5vZGVzKHNldHRpbmcsIG5vZGUsIC0xLCAhIW5ld05vZGVzID8gdG9vbHMuY2xvbmUobmV3Tm9kZXMpIDogW10sICEhaXNTaWxlbnQpOwoJCQkJCX0gZWxzZSB7CgkJCQkJCXZpZXcuYWRkTm9kZXMoc2V0dGluZywgbm9kZSwgLTEsIFtdLCAhIWlzU2lsZW50KTsKCQkJCQl9CgkJCQkJc2V0dGluZy50cmVlT2JqLnRyaWdnZXIoY29uc3RzLmV2ZW50LkFTWU5DX1NVQ0NFU1MsIFtzZXR0aW5nLnRyZWVJZCwgbm9kZSwgbXNnXSk7CgkJCQkJdG9vbHMuYXBwbHkoY2FsbGJhY2spOwoJCQkJfSwKCQkJCWVycm9yOiBmdW5jdGlvbihYTUxIdHRwUmVxdWVzdCwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pIHsKCQkJCQlpZiAoX3RtcFYgIT0gZGF0YS5nZXRSb290KHNldHRpbmcpLl92ZXIpIHsKCQkJCQkJcmV0dXJuOwoJCQkJCX0KCQkJCQlpZiAobm9kZSkgbm9kZS5pc0FqYXhpbmcgPSBudWxsOwoJCQkJCXZpZXcuc2V0Tm9kZUxpbmVJY29zKHNldHRpbmcsIG5vZGUpOwoJCQkJCXNldHRpbmcudHJlZU9iai50cmlnZ2VyKGNvbnN0cy5ldmVudC5BU1lOQ19FUlJPUiwgW3NldHRpbmcudHJlZUlkLCBub2RlLCBYTUxIdHRwUmVxdWVzdCwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd25dKTsKCQkJCX0KCQkJfSk7CgkJCXJldHVybiB0cnVlOwoJCX0sCgkJY2FuY2VsUHJlU2VsZWN0ZWROb2RlOiBmdW5jdGlvbiAoc2V0dGluZywgbm9kZSwgZXhjbHVkZU5vZGUpIHsKCQkJdmFyIGxpc3QgPSBkYXRhLmdldFJvb3Qoc2V0dGluZykuY3VyU2VsZWN0ZWRMaXN0LAoJCQkJaSwgbjsKCQkJZm9yIChpPWxpc3QubGVuZ3RoLTE7IGk+PTA7IGktLSkgewoJCQkJbiA9IGxpc3RbaV07CgkJCQlpZiAobm9kZSA9PT0gbiB8fCAoIW5vZGUgJiYgKCFleGNsdWRlTm9kZSB8fCBleGNsdWRlTm9kZSAhPT0gbikpKSB7CgkJCQkJJCQobiwgY29uc3RzLmlkLkEsIHNldHRpbmcpLnJlbW92ZUNsYXNzKGNvbnN0cy5ub2RlLkNVUlNFTEVDVEVEKTsKCQkJCQlpZiAobm9kZSkgewoJCQkJCQlkYXRhLnJlbW92ZVNlbGVjdGVkTm9kZShzZXR0aW5nLCBub2RlKTsKCQkJCQkJYnJlYWs7CgkJCQkJfSBlbHNlIHsKCQkJCQkJbGlzdC5zcGxpY2UoaSwgMSk7CgkJCQkJCXNldHRpbmcudHJlZU9iai50cmlnZ2VyKGNvbnN0cy5ldmVudC5VTlNFTEVDVEVELCBbc2V0dGluZy50cmVlSWQsIG5dKTsKCQkJCQl9CgkJCQl9CgkJCX0KCQl9LAoJCWNyZWF0ZU5vZGVDYWxsYmFjazogZnVuY3Rpb24oc2V0dGluZykgewoJCQlpZiAoISFzZXR0aW5nLmNhbGxiYWNrLm9uTm9kZUNyZWF0ZWQgfHwgISFzZXR0aW5nLnZpZXcuYWRkRGl5RG9tKSB7CgkJCQl2YXIgcm9vdCA9IGRhdGEuZ2V0Um9vdChzZXR0aW5nKTsKCQkJCXdoaWxlIChyb290LmNyZWF0ZWROb2Rlcy5sZW5ndGg+MCkgewoJCQkJCXZhciBub2RlID0gcm9vdC5jcmVhdGVkTm9kZXMuc2hpZnQoKTsKCQkJCQl0b29scy5hcHBseShzZXR0aW5nLnZpZXcuYWRkRGl5RG9tLCBbc2V0dGluZy50cmVlSWQsIG5vZGVdKTsKCQkJCQlpZiAoISFzZXR0aW5nLmNhbGxiYWNrLm9uTm9kZUNyZWF0ZWQpIHsKCQkJCQkJc2V0dGluZy50cmVlT2JqLnRyaWdnZXIoY29uc3RzLmV2ZW50Lk5PREVDUkVBVEVELCBbc2V0dGluZy50cmVlSWQsIG5vZGVdKTsKCQkJCQl9CgkJCQl9CgkJCX0KCQl9LAoJCWNyZWF0ZU5vZGVzOiBmdW5jdGlvbihzZXR0aW5nLCBsZXZlbCwgbm9kZXMsIHBhcmVudE5vZGUsIGluZGV4KSB7CgkJCWlmICghbm9kZXMgfHwgbm9kZXMubGVuZ3RoID09IDApIHJldHVybjsKCQkJdmFyIHJvb3QgPSBkYXRhLmdldFJvb3Qoc2V0dGluZyksCgkJCWNoaWxkS2V5ID0gc2V0dGluZy5kYXRhLmtleS5jaGlsZHJlbiwKCQkJb3BlbkZsYWcgPSAhcGFyZW50Tm9kZSB8fCBwYXJlbnROb2RlLm9wZW4gfHwgISEkJChwYXJlbnROb2RlW2NoaWxkS2V5XVswXSwgc2V0dGluZykuZ2V0KDApOwoJCQlyb290LmNyZWF0ZWROb2RlcyA9IFtdOwoJCQl2YXIgelRyZWVIdG1sID0gdmlldy5hcHBlbmROb2RlcyhzZXR0aW5nLCBsZXZlbCwgbm9kZXMsIHBhcmVudE5vZGUsIGluZGV4LCB0cnVlLCBvcGVuRmxhZyksCgkJCQlwYXJlbnRPYmosIG5leHRPYmo7CgoJCQlpZiAoIXBhcmVudE5vZGUpIHsKCQkJCXBhcmVudE9iaiA9IHNldHRpbmcudHJlZU9iajsKCQkJCS8vc2V0dGluZy50cmVlT2JqLmFwcGVuZCh6VHJlZUh0bWwuam9pbignJykpOwoJCQl9IGVsc2UgewoJCQkJdmFyIHVsT2JqID0gJCQocGFyZW50Tm9kZSwgY29uc3RzLmlkLlVMLCBzZXR0aW5nKTsKCQkJCWlmICh1bE9iai5nZXQoMCkpIHsKCQkJCQlwYXJlbnRPYmogPSB1bE9iajsKCQkJCQkvL3VsT2JqLmFwcGVuZCh6VHJlZUh0bWwuam9pbignJykpOwoJCQkJfQoJCQl9CgkJCWlmIChwYXJlbnRPYmopIHsKCQkJCWlmIChpbmRleCA+PSAwKSB7CgkJCQkJbmV4dE9iaiA9IHBhcmVudE9iai5jaGlsZHJlbigpW2luZGV4XTsKCQkJCX0KCQkJCWlmIChpbmRleCA+PTAgJiYgbmV4dE9iaikgewoJCQkJCSQobmV4dE9iaikuYmVmb3JlKHpUcmVlSHRtbC5qb2luKCcnKSk7CgkJCQl9IGVsc2UgewoJCQkJCXBhcmVudE9iai5hcHBlbmQoelRyZWVIdG1sLmpvaW4oJycpKTsKCQkJCX0KCQkJfQoKCQkJdmlldy5jcmVhdGVOb2RlQ2FsbGJhY2soc2V0dGluZyk7CgkJfSwKCQlkZXN0cm95OiBmdW5jdGlvbihzZXR0aW5nKSB7CgkJCWlmICghc2V0dGluZykgcmV0dXJuOwoJCQlkYXRhLmluaXRDYWNoZShzZXR0aW5nKTsKCQkJZGF0YS5pbml0Um9vdChzZXR0aW5nKTsKCQkJZXZlbnQudW5iaW5kVHJlZShzZXR0aW5nKTsKCQkJZXZlbnQudW5iaW5kRXZlbnQoc2V0dGluZyk7CgkJCXNldHRpbmcudHJlZU9iai5lbXB0eSgpOwoJCQlkZWxldGUgc2V0dGluZ3Nbc2V0dGluZy50cmVlSWRdOwoJCX0sCgkJZXhwYW5kQ29sbGFwc2VOb2RlOiBmdW5jdGlvbihzZXR0aW5nLCBub2RlLCBleHBhbmRGbGFnLCBhbmltYXRlRmxhZywgY2FsbGJhY2spIHsKCQkJdmFyIHJvb3QgPSBkYXRhLmdldFJvb3Qoc2V0dGluZyksCgkJCWNoaWxkS2V5ID0gc2V0dGluZy5kYXRhLmtleS5jaGlsZHJlbjsKCQkJdmFyIHRtcENiLCBfY2FsbGJhY2s7CgkJCWlmICghbm9kZSkgewoJCQkJdG9vbHMuYXBwbHkoY2FsbGJhY2ssIFtdKTsKCQkJCXJldHVybjsKCQkJfQoJCQlpZiAocm9vdC5leHBhbmRUcmlnZ2VyRmxhZykgewoJCQkJX2NhbGxiYWNrID0gY2FsbGJhY2s7CgkJCQl0bXBDYiA9IGZ1bmN0aW9uKCl7CgkJCQkJaWYgKF9jYWxsYmFjaykgX2NhbGxiYWNrKCk7CgkJCQkJaWYgKG5vZGUub3BlbikgewoJCQkJCQlzZXR0aW5nLnRyZWVPYmoudHJpZ2dlcihjb25zdHMuZXZlbnQuRVhQQU5ELCBbc2V0dGluZy50cmVlSWQsIG5vZGVdKTsKCQkJCQl9IGVsc2UgewoJCQkJCQlzZXR0aW5nLnRyZWVPYmoudHJpZ2dlcihjb25zdHMuZXZlbnQuQ09MTEFQU0UsIFtzZXR0aW5nLnRyZWVJZCwgbm9kZV0pOwoJCQkJCX0KCQkJCX07CgkJCQljYWxsYmFjayA9IHRtcENiOwoJCQkJcm9vdC5leHBhbmRUcmlnZ2VyRmxhZyA9IGZhbHNlOwoJCQl9CgkJCWlmICghbm9kZS5vcGVuICYmIG5vZGUuaXNQYXJlbnQgJiYgKCghJCQobm9kZSwgY29uc3RzLmlkLlVMLCBzZXR0aW5nKS5nZXQoMCkpIHx8IChub2RlW2NoaWxkS2V5XSAmJiBub2RlW2NoaWxkS2V5XS5sZW5ndGg+MCAmJiAhJCQobm9kZVtjaGlsZEtleV1bMF0sIHNldHRpbmcpLmdldCgwKSkpKSB7CgkJCQl2aWV3LmFwcGVuZFBhcmVudFVMRG9tKHNldHRpbmcsIG5vZGUpOwoJCQkJdmlldy5jcmVhdGVOb2RlQ2FsbGJhY2soc2V0dGluZyk7CgkJCX0KCQkJaWYgKG5vZGUub3BlbiA9PSBleHBhbmRGbGFnKSB7CgkJCQl0b29scy5hcHBseShjYWxsYmFjaywgW10pOwoJCQkJcmV0dXJuOwoJCQl9CgkJCXZhciB1bE9iaiA9ICQkKG5vZGUsIGNvbnN0cy5pZC5VTCwgc2V0dGluZyksCgkJCXN3aXRjaE9iaiA9ICQkKG5vZGUsIGNvbnN0cy5pZC5TV0lUQ0gsIHNldHRpbmcpLAoJCQlpY29PYmogPSAkJChub2RlLCBjb25zdHMuaWQuSUNPTiwgc2V0dGluZyk7CgoJCQlpZiAobm9kZS5pc1BhcmVudCkgewoJCQkJbm9kZS5vcGVuID0gIW5vZGUub3BlbjsKCQkJCWlmIChub2RlLmljb25PcGVuICYmIG5vZGUuaWNvbkNsb3NlKSB7CgkJCQkJaWNvT2JqLmF0dHIoInN0eWxlIiwgdmlldy5tYWtlTm9kZUljb1N0eWxlKHNldHRpbmcsIG5vZGUpKTsKCQkJCX0KCgkJCQlpZiAobm9kZS5vcGVuKSB7CgkJCQkJdmlldy5yZXBsYWNlU3dpdGNoQ2xhc3Mobm9kZSwgc3dpdGNoT2JqLCBjb25zdHMuZm9sZGVyLk9QRU4pOwoJCQkJCXZpZXcucmVwbGFjZUljb0NsYXNzKG5vZGUsIGljb09iaiwgY29uc3RzLmZvbGRlci5PUEVOKTsKCQkJCQlpZiAoYW5pbWF0ZUZsYWcgPT0gZmFsc2UgfHwgc2V0dGluZy52aWV3LmV4cGFuZFNwZWVkID09ICIiKSB7CgkJCQkJCXVsT2JqLnNob3coKTsKCQkJCQkJdG9vbHMuYXBwbHkoY2FsbGJhY2ssIFtdKTsKCQkJCQl9IGVsc2UgewoJCQkJCQlpZiAobm9kZVtjaGlsZEtleV0gJiYgbm9kZVtjaGlsZEtleV0ubGVuZ3RoID4gMCkgewoJCQkJCQkJdWxPYmouc2xpZGVEb3duKHNldHRpbmcudmlldy5leHBhbmRTcGVlZCwgY2FsbGJhY2spOwoJCQkJCQl9IGVsc2UgewoJCQkJCQkJdWxPYmouc2hvdygpOwoJCQkJCQkJdG9vbHMuYXBwbHkoY2FsbGJhY2ssIFtdKTsKCQkJCQkJfQoJCQkJCX0KCQkJCX0gZWxzZSB7CgkJCQkJdmlldy5yZXBsYWNlU3dpdGNoQ2xhc3Mobm9kZSwgc3dpdGNoT2JqLCBjb25zdHMuZm9sZGVyLkNMT1NFKTsKCQkJCQl2aWV3LnJlcGxhY2VJY29DbGFzcyhub2RlLCBpY29PYmosIGNvbnN0cy5mb2xkZXIuQ0xPU0UpOwoJCQkJCWlmIChhbmltYXRlRmxhZyA9PSBmYWxzZSB8fCBzZXR0aW5nLnZpZXcuZXhwYW5kU3BlZWQgPT0gIiIgfHwgIShub2RlW2NoaWxkS2V5XSAmJiBub2RlW2NoaWxkS2V5XS5sZW5ndGggPiAwKSkgewoJCQkJCQl1bE9iai5oaWRlKCk7CgkJCQkJCXRvb2xzLmFwcGx5KGNhbGxiYWNrLCBbXSk7CgkJCQkJfSBlbHNlIHsKCQkJCQkJdWxPYmouc2xpZGVVcChzZXR0aW5nLnZpZXcuZXhwYW5kU3BlZWQsIGNhbGxiYWNrKTsKCQkJCQl9CgkJCQl9CgkJCX0gZWxzZSB7CgkJCQl0b29scy5hcHBseShjYWxsYmFjaywgW10pOwoJCQl9CgkJfSwKCQlleHBhbmRDb2xsYXBzZVBhcmVudE5vZGU6IGZ1bmN0aW9uKHNldHRpbmcsIG5vZGUsIGV4cGFuZEZsYWcsIGFuaW1hdGVGbGFnLCBjYWxsYmFjaykgewoJCQlpZiAoIW5vZGUpIHJldHVybjsKCQkJaWYgKCFub2RlLnBhcmVudFRJZCkgewoJCQkJdmlldy5leHBhbmRDb2xsYXBzZU5vZGUoc2V0dGluZywgbm9kZSwgZXhwYW5kRmxhZywgYW5pbWF0ZUZsYWcsIGNhbGxiYWNrKTsKCQkJCXJldHVybjsKCQkJfSBlbHNlIHsKCQkJCXZpZXcuZXhwYW5kQ29sbGFwc2VOb2RlKHNldHRpbmcsIG5vZGUsIGV4cGFuZEZsYWcsIGFuaW1hdGVGbGFnKTsKCQkJfQoJCQlpZiAobm9kZS5wYXJlbnRUSWQpIHsKCQkJCXZpZXcuZXhwYW5kQ29sbGFwc2VQYXJlbnROb2RlKHNldHRpbmcsIG5vZGUuZ2V0UGFyZW50Tm9kZSgpLCBleHBhbmRGbGFnLCBhbmltYXRlRmxhZywgY2FsbGJhY2spOwoJCQl9CgkJfSwKCQlleHBhbmRDb2xsYXBzZVNvbk5vZGU6IGZ1bmN0aW9uKHNldHRpbmcsIG5vZGUsIGV4cGFuZEZsYWcsIGFuaW1hdGVGbGFnLCBjYWxsYmFjaykgewoJCQl2YXIgcm9vdCA9IGRhdGEuZ2V0Um9vdChzZXR0aW5nKSwKCQkJY2hpbGRLZXkgPSBzZXR0aW5nLmRhdGEua2V5LmNoaWxkcmVuLAoJCQl0cmVlTm9kZXMgPSAobm9kZSkgPyBub2RlW2NoaWxkS2V5XTogcm9vdFtjaGlsZEtleV0sCgkJCXNlbGZBbmltYXRlU2lnbiA9IChub2RlKSA/IGZhbHNlIDogYW5pbWF0ZUZsYWcsCgkJCWV4cGFuZFRyaWdnZXJGbGFnID0gZGF0YS5nZXRSb290KHNldHRpbmcpLmV4cGFuZFRyaWdnZXJGbGFnOwoJCQlkYXRhLmdldFJvb3Qoc2V0dGluZykuZXhwYW5kVHJpZ2dlckZsYWcgPSBmYWxzZTsKCQkJaWYgKHRyZWVOb2RlcykgewoJCQkJZm9yICh2YXIgaSA9IDAsIGwgPSB0cmVlTm9kZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CgkJCQkJaWYgKHRyZWVOb2Rlc1tpXSkgdmlldy5leHBhbmRDb2xsYXBzZVNvbk5vZGUoc2V0dGluZywgdHJlZU5vZGVzW2ldLCBleHBhbmRGbGFnLCBzZWxmQW5pbWF0ZVNpZ24pOwoJCQkJfQoJCQl9CgkJCWRhdGEuZ2V0Um9vdChzZXR0aW5nKS5leHBhbmRUcmlnZ2VyRmxhZyA9IGV4cGFuZFRyaWdnZXJGbGFnOwoJCQl2aWV3LmV4cGFuZENvbGxhcHNlTm9kZShzZXR0aW5nLCBub2RlLCBleHBhbmRGbGFnLCBhbmltYXRlRmxhZywgY2FsbGJhY2sgKTsKCQl9LAoJCWlzU2VsZWN0ZWROb2RlOiBmdW5jdGlvbiAoc2V0dGluZywgbm9kZSkgewoJCQlpZiAoIW5vZGUpIHsKCQkJCXJldHVybiBmYWxzZTsKCQkJfQoJCQl2YXIgbGlzdCA9IGRhdGEuZ2V0Um9vdChzZXR0aW5nKS5jdXJTZWxlY3RlZExpc3QsCgkJCQlpOwoJCQlmb3IgKGk9bGlzdC5sZW5ndGgtMTsgaT49MDsgaS0tKSB7CgkJCQlpZiAobm9kZSA9PT0gbGlzdFtpXSkgewoJCQkJCXJldHVybiB0cnVlOwoJCQkJfQoJCQl9CgkJCXJldHVybiBmYWxzZTsKCQl9LAoJCW1ha2VET01Ob2RlSWNvbjogZnVuY3Rpb24oaHRtbCwgc2V0dGluZywgbm9kZSkgewoJCQl2YXIgbmFtZVN0ciA9IGRhdGEuZ2V0Tm9kZU5hbWUoc2V0dGluZywgbm9kZSksCgkJCW5hbWUgPSBzZXR0aW5nLnZpZXcubmFtZUlzSFRNTCA/IG5hbWVTdHIgOiBuYW1lU3RyLnJlcGxhY2UoLyYvZywnJmFtcDsnKS5yZXBsYWNlKC88L2csJyZsdDsnKS5yZXBsYWNlKC8+L2csJyZndDsnKTsKCQkJaHRtbC5wdXNoKCI8c3BhbiBpZD0nIiwgbm9kZS50SWQsIGNvbnN0cy5pZC5JQ09OLAoJCQkJIicgdGl0bGU9JycgdHJlZU5vZGUiLCBjb25zdHMuaWQuSUNPTiwiIGNsYXNzPSciLCB2aWV3Lm1ha2VOb2RlSWNvQ2xhc3Moc2V0dGluZywgbm9kZSksCgkJCQkiJyBzdHlsZT0nIiwgdmlldy5tYWtlTm9kZUljb1N0eWxlKHNldHRpbmcsIG5vZGUpLCAiJz48L3NwYW4+PHNwYW4gaWQ9JyIsIG5vZGUudElkLCBjb25zdHMuaWQuU1BBTiwKCQkJCSInIGNsYXNzPSciLCBjb25zdHMuY2xhc3NOYW1lLk5BTUUsCgkJCQkiJz4iLG5hbWUsIjwvc3Bhbj4iKTsKCQl9LAoJCW1ha2VET01Ob2RlTGluZTogZnVuY3Rpb24oaHRtbCwgc2V0dGluZywgbm9kZSkgewoJCQlodG1sLnB1c2goIjxzcGFuIGlkPSciLCBub2RlLnRJZCwgY29uc3RzLmlkLlNXSVRDSCwJIicgdGl0bGU9JycgY2xhc3M9JyIsIHZpZXcubWFrZU5vZGVMaW5lQ2xhc3Moc2V0dGluZywgbm9kZSksICInIHRyZWVOb2RlIiwgY29uc3RzLmlkLlNXSVRDSCwiPjwvc3Bhbj4iKTsKCQl9LAoJCW1ha2VET01Ob2RlTWFpbkFmdGVyOiBmdW5jdGlvbihodG1sLCBzZXR0aW5nLCBub2RlKSB7CgkJCWh0bWwucHVzaCgiPC9saT4iKTsKCQl9LAoJCW1ha2VET01Ob2RlTWFpbkJlZm9yZTogZnVuY3Rpb24oaHRtbCwgc2V0dGluZywgbm9kZSkgewoJCQlodG1sLnB1c2goIjxsaSBpZD0nIiwgbm9kZS50SWQsICInIGNsYXNzPSciLCBjb25zdHMuY2xhc3NOYW1lLkxFVkVMLCBub2RlLmxldmVsLCInIHRhYmluZGV4PScwJyBoaWRlZm9jdXM9J3RydWUnIHRyZWVub2RlPiIpOwoJCX0sCgkJbWFrZURPTU5vZGVOYW1lQWZ0ZXI6IGZ1bmN0aW9uKGh0bWwsIHNldHRpbmcsIG5vZGUpIHsKCQkJaHRtbC5wdXNoKCI8L2E+Iik7CgkJfSwKCQltYWtlRE9NTm9kZU5hbWVCZWZvcmU6IGZ1bmN0aW9uKGh0bWwsIHNldHRpbmcsIG5vZGUpIHsKCQkJdmFyIHRpdGxlID0gZGF0YS5nZXROb2RlVGl0bGUoc2V0dGluZywgbm9kZSksCgkJCXVybCA9IHZpZXcubWFrZU5vZGVVcmwoc2V0dGluZywgbm9kZSksCgkJCWZvbnRjc3MgPSB2aWV3Lm1ha2VOb2RlRm9udENzcyhzZXR0aW5nLCBub2RlKSwKCQkJZm9udFN0eWxlID0gW107CgkJCWZvciAodmFyIGYgaW4gZm9udGNzcykgewoJCQkJZm9udFN0eWxlLnB1c2goZiwgIjoiLCBmb250Y3NzW2ZdLCAiOyIpOwoJCQl9CgkJCWh0bWwucHVzaCgiPGEgaWQ9JyIsIG5vZGUudElkLCBjb25zdHMuaWQuQSwgIicgY2xhc3M9JyIsIGNvbnN0cy5jbGFzc05hbWUuTEVWRUwsIG5vZGUubGV2ZWwsIicgdHJlZU5vZGUiLCBjb25zdHMuaWQuQSwiIG9uY2xpY2s9XCIiLCAobm9kZS5jbGljayB8fCAnJyksCgkJCQkiXCIgIiwgKCh1cmwgIT0gbnVsbCAmJiB1cmwubGVuZ3RoID4gMCkgPyAiaHJlZj0nIiArIHVybCArICInIiA6ICIiKSwgIiB0YXJnZXQ9JyIsdmlldy5tYWtlTm9kZVRhcmdldChub2RlKSwiJyBzdHlsZT0nIiwgZm9udFN0eWxlLmpvaW4oJycpLAoJCQkJIiciKTsKCQkJaWYgKHRvb2xzLmFwcGx5KHNldHRpbmcudmlldy5zaG93VGl0bGUsIFtzZXR0aW5nLnRyZWVJZCwgbm9kZV0sIHNldHRpbmcudmlldy5zaG93VGl0bGUpICYmIHRpdGxlKSB7aHRtbC5wdXNoKCJ0aXRsZT0nIiwgdGl0bGUucmVwbGFjZSgvJy9nLCImIzM5OyIpLnJlcGxhY2UoLzwvZywnJmx0OycpLnJlcGxhY2UoLz4vZywnJmd0OycpLCInIik7fQoJCQlodG1sLnB1c2goIj4iKTsKCQl9LAoJCW1ha2VOb2RlRm9udENzczogZnVuY3Rpb24oc2V0dGluZywgbm9kZSkgewoJCQl2YXIgZm9udENzcyA9IHRvb2xzLmFwcGx5KHNldHRpbmcudmlldy5mb250Q3NzLCBbc2V0dGluZy50cmVlSWQsIG5vZGVdLCBzZXR0aW5nLnZpZXcuZm9udENzcyk7CgkJCXJldHVybiAoZm9udENzcyAmJiAoKHR5cGVvZiBmb250Q3NzKSAhPSAiZnVuY3Rpb24iKSkgPyBmb250Q3NzIDoge307CgkJfSwKCQltYWtlTm9kZUljb0NsYXNzOiBmdW5jdGlvbihzZXR0aW5nLCBub2RlKSB7CgkJCXZhciBpY29Dc3MgPSBbImljbyJdOwoJCQlpZiAoIW5vZGUuaXNBamF4aW5nKSB7CgkJCQlpY29Dc3NbMF0gPSAobm9kZS5pY29uU2tpbiA/IG5vZGUuaWNvblNraW4gKyAiXyIgOiAiIikgKyBpY29Dc3NbMF07CgkJCQlpZiAobm9kZS5pc1BhcmVudCkgewoJCQkJCWljb0Nzcy5wdXNoKG5vZGUub3BlbiA/IGNvbnN0cy5mb2xkZXIuT1BFTiA6IGNvbnN0cy5mb2xkZXIuQ0xPU0UpOwoJCQkJfSBlbHNlIHsKCQkJCQlpY29Dc3MucHVzaChjb25zdHMuZm9sZGVyLkRPQ1UpOwoJCQkJfQoJCQl9CgkJCXJldHVybiBjb25zdHMuY2xhc3NOYW1lLkJVVFRPTiArICIgIiArIGljb0Nzcy5qb2luKCdfJyk7CgkJfSwKCQltYWtlTm9kZUljb1N0eWxlOiBmdW5jdGlvbihzZXR0aW5nLCBub2RlKSB7CgkJCXZhciBpY29TdHlsZSA9IFtdOwoJCQlpZiAoIW5vZGUuaXNBamF4aW5nKSB7CgkJCQl2YXIgaWNvbiA9IChub2RlLmlzUGFyZW50ICYmIG5vZGUuaWNvbk9wZW4gJiYgbm9kZS5pY29uQ2xvc2UpID8gKG5vZGUub3BlbiA/IG5vZGUuaWNvbk9wZW4gOiBub2RlLmljb25DbG9zZSkgOiBub2RlW3NldHRpbmcuZGF0YS5rZXkuaWNvbl07CgkJCQlpZiAoaWNvbikgaWNvU3R5bGUucHVzaCgiYmFja2dyb3VuZDp1cmwoIiwgaWNvbiwgIikgMCAwIG5vLXJlcGVhdDsiKTsKCQkJCWlmIChzZXR0aW5nLnZpZXcuc2hvd0ljb24gPT0gZmFsc2UgfHwgIXRvb2xzLmFwcGx5KHNldHRpbmcudmlldy5zaG93SWNvbiwgW3NldHRpbmcudHJlZUlkLCBub2RlXSwgdHJ1ZSkpIHsKCQkJCQlpY29TdHlsZS5wdXNoKCJ3aWR0aDowcHg7aGVpZ2h0OjBweDsiKTsKCQkJCX0KCQkJfQoJCQlyZXR1cm4gaWNvU3R5bGUuam9pbignJyk7CgkJfSwKCQltYWtlTm9kZUxpbmVDbGFzczogZnVuY3Rpb24oc2V0dGluZywgbm9kZSkgewoJCQl2YXIgbGluZUNsYXNzID0gW107CgkJCWlmIChzZXR0aW5nLnZpZXcuc2hvd0xpbmUpIHsKCQkJCWlmIChub2RlLmxldmVsID09IDAgJiYgbm9kZS5pc0ZpcnN0Tm9kZSAmJiBub2RlLmlzTGFzdE5vZGUpIHsKCQkJCQlsaW5lQ2xhc3MucHVzaChjb25zdHMubGluZS5ST09UKTsKCQkJCX0gZWxzZSBpZiAobm9kZS5sZXZlbCA9PSAwICYmIG5vZGUuaXNGaXJzdE5vZGUpIHsKCQkJCQlsaW5lQ2xhc3MucHVzaChjb25zdHMubGluZS5ST09UUyk7CgkJCQl9IGVsc2UgaWYgKG5vZGUuaXNMYXN0Tm9kZSkgewoJCQkJCWxpbmVDbGFzcy5wdXNoKGNvbnN0cy5saW5lLkJPVFRPTSk7CgkJCQl9IGVsc2UgewoJCQkJCWxpbmVDbGFzcy5wdXNoKGNvbnN0cy5saW5lLkNFTlRFUik7CgkJCQl9CgkJCX0gZWxzZSB7CgkJCQlsaW5lQ2xhc3MucHVzaChjb25zdHMubGluZS5OT0xJTkUpOwoJCQl9CgkJCWlmIChub2RlLmlzUGFyZW50KSB7CgkJCQlsaW5lQ2xhc3MucHVzaChub2RlLm9wZW4gPyBjb25zdHMuZm9sZGVyLk9QRU4gOiBjb25zdHMuZm9sZGVyLkNMT1NFKTsKCQkJfSBlbHNlIHsKCQkJCWxpbmVDbGFzcy5wdXNoKGNvbnN0cy5mb2xkZXIuRE9DVSk7CgkJCX0KCQkJcmV0dXJuIHZpZXcubWFrZU5vZGVMaW5lQ2xhc3NFeChub2RlKSArIGxpbmVDbGFzcy5qb2luKCdfJyk7CgkJfSwKCQltYWtlTm9kZUxpbmVDbGFzc0V4OiBmdW5jdGlvbihub2RlKSB7CgkJCXJldHVybiBjb25zdHMuY2xhc3NOYW1lLkJVVFRPTiArICIgIiArIGNvbnN0cy5jbGFzc05hbWUuTEVWRUwgKyBub2RlLmxldmVsICsgIiAiICsgY29uc3RzLmNsYXNzTmFtZS5TV0lUQ0ggKyAiICI7CgkJfSwKCQltYWtlTm9kZVRhcmdldDogZnVuY3Rpb24obm9kZSkgewoJCQlyZXR1cm4gKG5vZGUudGFyZ2V0IHx8ICJfYmxhbmsiKTsKCQl9LAoJCW1ha2VOb2RlVXJsOiBmdW5jdGlvbihzZXR0aW5nLCBub2RlKSB7CgkJCXZhciB1cmxLZXkgPSBzZXR0aW5nLmRhdGEua2V5LnVybDsKCQkJcmV0dXJuIG5vZGVbdXJsS2V5XSA/IG5vZGVbdXJsS2V5XSA6IG51bGw7CgkJfSwKCQltYWtlVWxIdG1sOiBmdW5jdGlvbihzZXR0aW5nLCBub2RlLCBodG1sLCBjb250ZW50KSB7CgkJCWh0bWwucHVzaCgiPHVsIGlkPSciLCBub2RlLnRJZCwgY29uc3RzLmlkLlVMLCAiJyBjbGFzcz0nIiwgY29uc3RzLmNsYXNzTmFtZS5MRVZFTCwgbm9kZS5sZXZlbCwgIiAiLCB2aWV3Lm1ha2VVbExpbmVDbGFzcyhzZXR0aW5nLCBub2RlKSwgIicgc3R5bGU9J2Rpc3BsYXk6IiwgKG5vZGUub3BlbiA/ICJibG9jayI6ICJub25lIiksIic+Iik7CgkJCWh0bWwucHVzaChjb250ZW50KTsKCQkJaHRtbC5wdXNoKCI8L3VsPiIpOwoJCX0sCgkJbWFrZVVsTGluZUNsYXNzOiBmdW5jdGlvbihzZXR0aW5nLCBub2RlKSB7CgkJCXJldHVybiAoKHNldHRpbmcudmlldy5zaG93TGluZSAmJiAhbm9kZS5pc0xhc3ROb2RlKSA/IGNvbnN0cy5saW5lLkxJTkUgOiAiIik7CgkJfSwKCQlyZW1vdmVDaGlsZE5vZGVzOiBmdW5jdGlvbihzZXR0aW5nLCBub2RlKSB7CgkJCWlmICghbm9kZSkgcmV0dXJuOwoJCQl2YXIgY2hpbGRLZXkgPSBzZXR0aW5nLmRhdGEua2V5LmNoaWxkcmVuLAoJCQlub2RlcyA9IG5vZGVbY2hpbGRLZXldOwoJCQlpZiAoIW5vZGVzKSByZXR1cm47CgoJCQlmb3IgKHZhciBpID0gMCwgbCA9IG5vZGVzLmxlbmd0aDsgaSA8IGw7IGkrKykgewoJCQkJZGF0YS5yZW1vdmVOb2RlQ2FjaGUoc2V0dGluZywgbm9kZXNbaV0pOwoJCQl9CgkJCWRhdGEucmVtb3ZlU2VsZWN0ZWROb2RlKHNldHRpbmcpOwoJCQlkZWxldGUgbm9kZVtjaGlsZEtleV07CgoJCQlpZiAoIXNldHRpbmcuZGF0YS5rZWVwLnBhcmVudCkgewoJCQkJbm9kZS5pc1BhcmVudCA9IGZhbHNlOwoJCQkJbm9kZS5vcGVuID0gZmFsc2U7CgkJCQl2YXIgdG1wX3N3aXRjaE9iaiA9ICQkKG5vZGUsIGNvbnN0cy5pZC5TV0lUQ0gsIHNldHRpbmcpLAoJCQkJdG1wX2ljb09iaiA9ICQkKG5vZGUsIGNvbnN0cy5pZC5JQ09OLCBzZXR0aW5nKTsKCQkJCXZpZXcucmVwbGFjZVN3aXRjaENsYXNzKG5vZGUsIHRtcF9zd2l0Y2hPYmosIGNvbnN0cy5mb2xkZXIuRE9DVSk7CgkJCQl2aWV3LnJlcGxhY2VJY29DbGFzcyhub2RlLCB0bXBfaWNvT2JqLCBjb25zdHMuZm9sZGVyLkRPQ1UpOwoJCQkJJCQobm9kZSwgY29uc3RzLmlkLlVMLCBzZXR0aW5nKS5yZW1vdmUoKTsKCQkJfSBlbHNlIHsKCQkJCSQkKG5vZGUsIGNvbnN0cy5pZC5VTCwgc2V0dGluZykuZW1wdHkoKTsKCQkJfQoJCX0sCgkJc2Nyb2xsSW50b1ZpZXc6IGZ1bmN0aW9uKGRvbSkgewoJCQlpZiAoIWRvbSkgewoJCQkJcmV0dXJuOwoJCQl9CgkJCWlmIChkb20uc2Nyb2xsSW50b1ZpZXdJZk5lZWRlZCkgewoJCQkJZG9tLnNjcm9sbEludG9WaWV3SWZOZWVkZWQoKTsKCQkJfSBlbHNlIGlmIChkb20uc2Nyb2xsSW50b1ZpZXcpIHsKCQkJCWRvbS5zY3JvbGxJbnRvVmlldyhmYWxzZSk7CgkJCX0gZWxzZSB7CgkJCQl0cnl7ZG9tLmZvY3VzKCkuYmx1cigpO31jYXRjaChlKXt9CgkJCX0KCQl9LAoJCXNldEZpcnN0Tm9kZTogZnVuY3Rpb24oc2V0dGluZywgcGFyZW50Tm9kZSkgewoJCQl2YXIgY2hpbGRLZXkgPSBzZXR0aW5nLmRhdGEua2V5LmNoaWxkcmVuLCBjaGlsZExlbmd0aCA9IHBhcmVudE5vZGVbY2hpbGRLZXldLmxlbmd0aDsKCQkJaWYgKCBjaGlsZExlbmd0aCA+IDApIHsKCQkJCXBhcmVudE5vZGVbY2hpbGRLZXldWzBdLmlzRmlyc3ROb2RlID0gdHJ1ZTsKCQkJfQoJCX0sCgkJc2V0TGFzdE5vZGU6IGZ1bmN0aW9uKHNldHRpbmcsIHBhcmVudE5vZGUpIHsKCQkJdmFyIGNoaWxkS2V5ID0gc2V0dGluZy5kYXRhLmtleS5jaGlsZHJlbiwgY2hpbGRMZW5ndGggPSBwYXJlbnROb2RlW2NoaWxkS2V5XS5sZW5ndGg7CgkJCWlmICggY2hpbGRMZW5ndGggPiAwKSB7CgkJCQlwYXJlbnROb2RlW2NoaWxkS2V5XVtjaGlsZExlbmd0aCAtIDFdLmlzTGFzdE5vZGUgPSB0cnVlOwoJCQl9CgkJfSwKCQlyZW1vdmVOb2RlOiBmdW5jdGlvbihzZXR0aW5nLCBub2RlKSB7CgkJCXZhciByb290ID0gZGF0YS5nZXRSb290KHNldHRpbmcpLAoJCQljaGlsZEtleSA9IHNldHRpbmcuZGF0YS5rZXkuY2hpbGRyZW4sCgkJCXBhcmVudE5vZGUgPSAobm9kZS5wYXJlbnRUSWQpID8gbm9kZS5nZXRQYXJlbnROb2RlKCkgOiByb290OwoKCQkJbm9kZS5pc0ZpcnN0Tm9kZSA9IGZhbHNlOwoJCQlub2RlLmlzTGFzdE5vZGUgPSBmYWxzZTsKCQkJbm9kZS5nZXRQcmVOb2RlID0gZnVuY3Rpb24oKSB7cmV0dXJuIG51bGw7fTsKCQkJbm9kZS5nZXROZXh0Tm9kZSA9IGZ1bmN0aW9uKCkge3JldHVybiBudWxsO307CgoJCQlpZiAoIWRhdGEuZ2V0Tm9kZUNhY2hlKHNldHRpbmcsIG5vZGUudElkKSkgewoJCQkJcmV0dXJuOwoJCQl9CgoJCQkkJChub2RlLCBzZXR0aW5nKS5yZW1vdmUoKTsKCQkJZGF0YS5yZW1vdmVOb2RlQ2FjaGUoc2V0dGluZywgbm9kZSk7CgkJCWRhdGEucmVtb3ZlU2VsZWN0ZWROb2RlKHNldHRpbmcsIG5vZGUpOwoKCQkJZm9yICh2YXIgaSA9IDAsIGwgPSBwYXJlbnROb2RlW2NoaWxkS2V5XS5sZW5ndGg7IGkgPCBsOyBpKyspIHsKCQkJCWlmIChwYXJlbnROb2RlW2NoaWxkS2V5XVtpXS50SWQgPT0gbm9kZS50SWQpIHsKCQkJCQlwYXJlbnROb2RlW2NoaWxkS2V5XS5zcGxpY2UoaSwgMSk7CgkJCQkJYnJlYWs7CgkJCQl9CgkJCX0KCQkJdmlldy5zZXRGaXJzdE5vZGUoc2V0dGluZywgcGFyZW50Tm9kZSk7CgkJCXZpZXcuc2V0TGFzdE5vZGUoc2V0dGluZywgcGFyZW50Tm9kZSk7CgoJCQl2YXIgdG1wX3VsT2JqLHRtcF9zd2l0Y2hPYmosdG1wX2ljb09iaiwKCQkJY2hpbGRMZW5ndGggPSBwYXJlbnROb2RlW2NoaWxkS2V5XS5sZW5ndGg7CgoJCQkvL3JlcGFpciBub2RlcyBvbGQgcGFyZW50CgkJCWlmICghc2V0dGluZy5kYXRhLmtlZXAucGFyZW50ICYmIGNoaWxkTGVuZ3RoID09IDApIHsKCQkJCS8vb2xkIHBhcmVudE5vZGUgaGFzIG5vIGNoaWxkIG5vZGVzCgkJCQlwYXJlbnROb2RlLmlzUGFyZW50ID0gZmFsc2U7CgkJCQlwYXJlbnROb2RlLm9wZW4gPSBmYWxzZTsKCQkJCXRtcF91bE9iaiA9ICQkKHBhcmVudE5vZGUsIGNvbnN0cy5pZC5VTCwgc2V0dGluZyk7CgkJCQl0bXBfc3dpdGNoT2JqID0gJCQocGFyZW50Tm9kZSwgY29uc3RzLmlkLlNXSVRDSCwgc2V0dGluZyk7CgkJCQl0bXBfaWNvT2JqID0gJCQocGFyZW50Tm9kZSwgY29uc3RzLmlkLklDT04sIHNldHRpbmcpOwoJCQkJdmlldy5yZXBsYWNlU3dpdGNoQ2xhc3MocGFyZW50Tm9kZSwgdG1wX3N3aXRjaE9iaiwgY29uc3RzLmZvbGRlci5ET0NVKTsKCQkJCXZpZXcucmVwbGFjZUljb0NsYXNzKHBhcmVudE5vZGUsIHRtcF9pY29PYmosIGNvbnN0cy5mb2xkZXIuRE9DVSk7CgkJCQl0bXBfdWxPYmouY3NzKCJkaXNwbGF5IiwgIm5vbmUiKTsKCgkJCX0gZWxzZSBpZiAoc2V0dGluZy52aWV3LnNob3dMaW5lICYmIGNoaWxkTGVuZ3RoID4gMCkgewoJCQkJLy9vbGQgcGFyZW50Tm9kZSBoYXMgY2hpbGQgbm9kZXMKCQkJCXZhciBuZXdMYXN0ID0gcGFyZW50Tm9kZVtjaGlsZEtleV1bY2hpbGRMZW5ndGggLSAxXTsKCQkJCXRtcF91bE9iaiA9ICQkKG5ld0xhc3QsIGNvbnN0cy5pZC5VTCwgc2V0dGluZyk7CgkJCQl0bXBfc3dpdGNoT2JqID0gJCQobmV3TGFzdCwgY29uc3RzLmlkLlNXSVRDSCwgc2V0dGluZyk7CgkJCQl0bXBfaWNvT2JqID0gJCQobmV3TGFzdCwgY29uc3RzLmlkLklDT04sIHNldHRpbmcpOwoJCQkJaWYgKHBhcmVudE5vZGUgPT0gcm9vdCkgewoJCQkJCWlmIChwYXJlbnROb2RlW2NoaWxkS2V5XS5sZW5ndGggPT0gMSkgewoJCQkJCQkvL25vZGUgd2FzIHJvb3QsIGFuZCB6dHJlZSBoYXMgb25seSBvbmUgcm9vdCBhZnRlciBtb3ZlIG5vZGUKCQkJCQkJdmlldy5yZXBsYWNlU3dpdGNoQ2xhc3MobmV3TGFzdCwgdG1wX3N3aXRjaE9iaiwgY29uc3RzLmxpbmUuUk9PVCk7CgkJCQkJfSBlbHNlIHsKCQkJCQkJdmFyIHRtcF9maXJzdF9zd2l0Y2hPYmogPSAkJChwYXJlbnROb2RlW2NoaWxkS2V5XVswXSwgY29uc3RzLmlkLlNXSVRDSCwgc2V0dGluZyk7CgkJCQkJCXZpZXcucmVwbGFjZVN3aXRjaENsYXNzKHBhcmVudE5vZGVbY2hpbGRLZXldWzBdLCB0bXBfZmlyc3Rfc3dpdGNoT2JqLCBjb25zdHMubGluZS5ST09UUyk7CgkJCQkJCXZpZXcucmVwbGFjZVN3aXRjaENsYXNzKG5ld0xhc3QsIHRtcF9zd2l0Y2hPYmosIGNvbnN0cy5saW5lLkJPVFRPTSk7CgkJCQkJfQoJCQkJfSBlbHNlIHsKCQkJCQl2aWV3LnJlcGxhY2VTd2l0Y2hDbGFzcyhuZXdMYXN0LCB0bXBfc3dpdGNoT2JqLCBjb25zdHMubGluZS5CT1RUT00pOwoJCQkJfQoJCQkJdG1wX3VsT2JqLnJlbW92ZUNsYXNzKGNvbnN0cy5saW5lLkxJTkUpOwoJCQl9CgkJfSwKCQlyZXBsYWNlSWNvQ2xhc3M6IGZ1bmN0aW9uKG5vZGUsIG9iaiwgbmV3TmFtZSkgewoJCQlpZiAoIW9iaiB8fCBub2RlLmlzQWpheGluZykgcmV0dXJuOwoJCQl2YXIgdG1wTmFtZSA9IG9iai5hdHRyKCJjbGFzcyIpOwoJCQlpZiAodG1wTmFtZSA9PSB1bmRlZmluZWQpIHJldHVybjsKCQkJdmFyIHRtcExpc3QgPSB0bXBOYW1lLnNwbGl0KCJfIik7CgkJCXN3aXRjaCAobmV3TmFtZSkgewoJCQkJY2FzZSBjb25zdHMuZm9sZGVyLk9QRU46CgkJCQljYXNlIGNvbnN0cy5mb2xkZXIuQ0xPU0U6CgkJCQljYXNlIGNvbnN0cy5mb2xkZXIuRE9DVToKCQkJCQl0bXBMaXN0W3RtcExpc3QubGVuZ3RoLTFdID0gbmV3TmFtZTsKCQkJCQlicmVhazsKCQkJfQoJCQlvYmouYXR0cigiY2xhc3MiLCB0bXBMaXN0LmpvaW4oIl8iKSk7CgkJfSwKCQlyZXBsYWNlU3dpdGNoQ2xhc3M6IGZ1bmN0aW9uKG5vZGUsIG9iaiwgbmV3TmFtZSkgewoJCQlpZiAoIW9iaikgcmV0dXJuOwoJCQl2YXIgdG1wTmFtZSA9IG9iai5hdHRyKCJjbGFzcyIpOwoJCQlpZiAodG1wTmFtZSA9PSB1bmRlZmluZWQpIHJldHVybjsKCQkJdmFyIHRtcExpc3QgPSB0bXBOYW1lLnNwbGl0KCJfIik7CgkJCXN3aXRjaCAobmV3TmFtZSkgewoJCQkJY2FzZSBjb25zdHMubGluZS5ST09UOgoJCQkJY2FzZSBjb25zdHMubGluZS5ST09UUzoKCQkJCWNhc2UgY29uc3RzLmxpbmUuQ0VOVEVSOgoJCQkJY2FzZSBjb25zdHMubGluZS5CT1RUT006CgkJCQljYXNlIGNvbnN0cy5saW5lLk5PTElORToKCQkJCQl0bXBMaXN0WzBdID0gdmlldy5tYWtlTm9kZUxpbmVDbGFzc0V4KG5vZGUpICsgbmV3TmFtZTsKCQkJCQlicmVhazsKCQkJCWNhc2UgY29uc3RzLmZvbGRlci5PUEVOOgoJCQkJY2FzZSBjb25zdHMuZm9sZGVyLkNMT1NFOgoJCQkJY2FzZSBjb25zdHMuZm9sZGVyLkRPQ1U6CgkJCQkJdG1wTGlzdFsxXSA9IG5ld05hbWU7CgkJCQkJYnJlYWs7CgkJCX0KCQkJb2JqLmF0dHIoImNsYXNzIiwgdG1wTGlzdC5qb2luKCJfIikpOwoJCQlpZiAobmV3TmFtZSAhPT0gY29uc3RzLmZvbGRlci5ET0NVKSB7CgkJCQlvYmoucmVtb3ZlQXR0cigiZGlzYWJsZWQiKTsKCQkJfSBlbHNlIHsKCQkJCW9iai5hdHRyKCJkaXNhYmxlZCIsICJkaXNhYmxlZCIpOwoJCQl9CgkJfSwKCQlzZWxlY3ROb2RlOiBmdW5jdGlvbihzZXR0aW5nLCBub2RlLCBhZGRGbGFnKSB7CgkJCWlmICghYWRkRmxhZykgewoJCQkJdmlldy5jYW5jZWxQcmVTZWxlY3RlZE5vZGUoc2V0dGluZywgbnVsbCwgbm9kZSk7CgkJCX0KCQkJJCQobm9kZSwgY29uc3RzLmlkLkEsIHNldHRpbmcpLmFkZENsYXNzKGNvbnN0cy5ub2RlLkNVUlNFTEVDVEVEKTsKCQkJZGF0YS5hZGRTZWxlY3RlZE5vZGUoc2V0dGluZywgbm9kZSk7CgkJCXNldHRpbmcudHJlZU9iai50cmlnZ2VyKGNvbnN0cy5ldmVudC5TRUxFQ1RFRCwgW3NldHRpbmcudHJlZUlkLCBub2RlXSk7CgkJfSwKCQlzZXROb2RlRm9udENzczogZnVuY3Rpb24oc2V0dGluZywgdHJlZU5vZGUpIHsKCQkJdmFyIGFPYmogPSAkJCh0cmVlTm9kZSwgY29uc3RzLmlkLkEsIHNldHRpbmcpLAoJCQlmb250Q3NzID0gdmlldy5tYWtlTm9kZUZvbnRDc3Moc2V0dGluZywgdHJlZU5vZGUpOwoJCQlpZiAoZm9udENzcykgewoJCQkJYU9iai5jc3MoZm9udENzcyk7CgkJCX0KCQl9LAoJCXNldE5vZGVMaW5lSWNvczogZnVuY3Rpb24oc2V0dGluZywgbm9kZSkgewoJCQlpZiAoIW5vZGUpIHJldHVybjsKCQkJdmFyIHN3aXRjaE9iaiA9ICQkKG5vZGUsIGNvbnN0cy5pZC5TV0lUQ0gsIHNldHRpbmcpLAoJCQl1bE9iaiA9ICQkKG5vZGUsIGNvbnN0cy5pZC5VTCwgc2V0dGluZyksCgkJCWljb09iaiA9ICQkKG5vZGUsIGNvbnN0cy5pZC5JQ09OLCBzZXR0aW5nKSwKCQkJdWxMaW5lID0gdmlldy5tYWtlVWxMaW5lQ2xhc3Moc2V0dGluZywgbm9kZSk7CgkJCWlmICh1bExpbmUubGVuZ3RoPT0wKSB7CgkJCQl1bE9iai5yZW1vdmVDbGFzcyhjb25zdHMubGluZS5MSU5FKTsKCQkJfSBlbHNlIHsKCQkJCXVsT2JqLmFkZENsYXNzKHVsTGluZSk7CgkJCX0KCQkJc3dpdGNoT2JqLmF0dHIoImNsYXNzIiwgdmlldy5tYWtlTm9kZUxpbmVDbGFzcyhzZXR0aW5nLCBub2RlKSk7CgkJCWlmIChub2RlLmlzUGFyZW50KSB7CgkJCQlzd2l0Y2hPYmoucmVtb3ZlQXR0cigiZGlzYWJsZWQiKTsKCQkJfSBlbHNlIHsKCQkJCXN3aXRjaE9iai5hdHRyKCJkaXNhYmxlZCIsICJkaXNhYmxlZCIpOwoJCQl9CgkJCWljb09iai5yZW1vdmVBdHRyKCJzdHlsZSIpOwoJCQlpY29PYmouYXR0cigic3R5bGUiLCB2aWV3Lm1ha2VOb2RlSWNvU3R5bGUoc2V0dGluZywgbm9kZSkpOwoJCQlpY29PYmouYXR0cigiY2xhc3MiLCB2aWV3Lm1ha2VOb2RlSWNvQ2xhc3Moc2V0dGluZywgbm9kZSkpOwoJCX0sCgkJc2V0Tm9kZU5hbWU6IGZ1bmN0aW9uKHNldHRpbmcsIG5vZGUpIHsKCQkJdmFyIHRpdGxlID0gZGF0YS5nZXROb2RlVGl0bGUoc2V0dGluZywgbm9kZSksCgkJCW5PYmogPSAkJChub2RlLCBjb25zdHMuaWQuU1BBTiwgc2V0dGluZyk7CgkJCW5PYmouZW1wdHkoKTsKCQkJaWYgKHNldHRpbmcudmlldy5uYW1lSXNIVE1MKSB7CgkJCQluT2JqLmh0bWwoZGF0YS5nZXROb2RlTmFtZShzZXR0aW5nLCBub2RlKSk7CgkJCX0gZWxzZSB7CgkJCQluT2JqLnRleHQoZGF0YS5nZXROb2RlTmFtZShzZXR0aW5nLCBub2RlKSk7CgkJCX0KCQkJaWYgKHRvb2xzLmFwcGx5KHNldHRpbmcudmlldy5zaG93VGl0bGUsIFtzZXR0aW5nLnRyZWVJZCwgbm9kZV0sIHNldHRpbmcudmlldy5zaG93VGl0bGUpKSB7CgkJCQl2YXIgYU9iaiA9ICQkKG5vZGUsIGNvbnN0cy5pZC5BLCBzZXR0aW5nKTsKCQkJCWFPYmouYXR0cigidGl0bGUiLCAhdGl0bGUgPyAiIiA6IHRpdGxlKTsKCQkJfQoJCX0sCgkJc2V0Tm9kZVRhcmdldDogZnVuY3Rpb24oc2V0dGluZywgbm9kZSkgewoJCQl2YXIgYU9iaiA9ICQkKG5vZGUsIGNvbnN0cy5pZC5BLCBzZXR0aW5nKTsKCQkJYU9iai5hdHRyKCJ0YXJnZXQiLCB2aWV3Lm1ha2VOb2RlVGFyZ2V0KG5vZGUpKTsKCQl9LAoJCXNldE5vZGVVcmw6IGZ1bmN0aW9uKHNldHRpbmcsIG5vZGUpIHsKCQkJdmFyIGFPYmogPSAkJChub2RlLCBjb25zdHMuaWQuQSwgc2V0dGluZyksCgkJCXVybCA9IHZpZXcubWFrZU5vZGVVcmwoc2V0dGluZywgbm9kZSk7CgkJCWlmICh1cmwgPT0gbnVsbCB8fCB1cmwubGVuZ3RoID09IDApIHsKCQkJCWFPYmoucmVtb3ZlQXR0cigiaHJlZiIpOwoJCQl9IGVsc2UgewoJCQkJYU9iai5hdHRyKCJocmVmIiwgdXJsKTsKCQkJfQoJCX0sCgkJc3dpdGNoTm9kZTogZnVuY3Rpb24oc2V0dGluZywgbm9kZSkgewoJCQlpZiAobm9kZS5vcGVuIHx8ICF0b29scy5jYW5Bc3luYyhzZXR0aW5nLCBub2RlKSkgewoJCQkJdmlldy5leHBhbmRDb2xsYXBzZU5vZGUoc2V0dGluZywgbm9kZSwgIW5vZGUub3Blbik7CgkJCX0gZWxzZSBpZiAoc2V0dGluZy5hc3luYy5lbmFibGUpIHsKCQkJCWlmICghdmlldy5hc3luY05vZGUoc2V0dGluZywgbm9kZSkpIHsKCQkJCQl2aWV3LmV4cGFuZENvbGxhcHNlTm9kZShzZXR0aW5nLCBub2RlLCAhbm9kZS5vcGVuKTsKCQkJCQlyZXR1cm47CgkJCQl9CgkJCX0gZWxzZSBpZiAobm9kZSkgewoJCQkJdmlldy5leHBhbmRDb2xsYXBzZU5vZGUoc2V0dGluZywgbm9kZSwgIW5vZGUub3Blbik7CgkJCX0KCQl9Cgl9OwoJLy8gelRyZWUgZGVmaW5kCgkkLmZuLnpUcmVlID0gewoJCWNvbnN0cyA6IF9jb25zdHMsCgkJX3ogOiB7CgkJCXRvb2xzOiB0b29scywKCQkJdmlldzogdmlldywKCQkJZXZlbnQ6IGV2ZW50LAoJCQlkYXRhOiBkYXRhCgkJfSwKCQlnZXRaVHJlZU9iajogZnVuY3Rpb24odHJlZUlkKSB7CgkJCXZhciBvID0gZGF0YS5nZXRaVHJlZVRvb2xzKHRyZWVJZCk7CgkJCXJldHVybiBvID8gbyA6IG51bGw7CgkJfSwKCQlkZXN0cm95OiBmdW5jdGlvbih0cmVlSWQpIHsKCQkJaWYgKCEhdHJlZUlkICYmIHRyZWVJZC5sZW5ndGggPiAwKSB7CgkJCQl2aWV3LmRlc3Ryb3koZGF0YS5nZXRTZXR0aW5nKHRyZWVJZCkpOwoJCQl9IGVsc2UgewoJCQkJZm9yKHZhciBzIGluIHNldHRpbmdzKSB7CgkJCQkJdmlldy5kZXN0cm95KHNldHRpbmdzW3NdKTsKCQkJCX0KCQkJfQoJCX0sCgkJaW5pdDogZnVuY3Rpb24ob2JqLCB6U2V0dGluZywgek5vZGVzKSB7CgkJCXZhciBzZXR0aW5nID0gdG9vbHMuY2xvbmUoX3NldHRpbmcpOwoJCQkkLmV4dGVuZCh0cnVlLCBzZXR0aW5nLCB6U2V0dGluZyk7CgkJCXNldHRpbmcudHJlZUlkID0gb2JqLmF0dHIoImlkIik7CgkJCXNldHRpbmcudHJlZU9iaiA9IG9iajsKCQkJc2V0dGluZy50cmVlT2JqLmVtcHR5KCk7CgkJCXNldHRpbmdzW3NldHRpbmcudHJlZUlkXSA9IHNldHRpbmc7CgkJCS8vRm9yIHNvbWUgb2xkZXIgYnJvd3NlciwoZS5nLiwgaWU2KQoJCQlpZih0eXBlb2YgZG9jdW1lbnQuYm9keS5zdHlsZS5tYXhIZWlnaHQgPT09ICJ1bmRlZmluZWQiKSB7CgkJCQlzZXR0aW5nLnZpZXcuZXhwYW5kU3BlZWQgPSAiIjsKCQkJfQoJCQlkYXRhLmluaXRSb290KHNldHRpbmcpOwoJCQl2YXIgcm9vdCA9IGRhdGEuZ2V0Um9vdChzZXR0aW5nKSwKCQkJY2hpbGRLZXkgPSBzZXR0aW5nLmRhdGEua2V5LmNoaWxkcmVuOwoJCQl6Tm9kZXMgPSB6Tm9kZXMgPyB0b29scy5jbG9uZSh0b29scy5pc0FycmF5KHpOb2Rlcyk/IHpOb2RlcyA6IFt6Tm9kZXNdKSA6IFtdOwoJCQlpZiAoc2V0dGluZy5kYXRhLnNpbXBsZURhdGEuZW5hYmxlKSB7CgkJCQlyb290W2NoaWxkS2V5XSA9IGRhdGEudHJhbnNmb3JtVG96VHJlZUZvcm1hdChzZXR0aW5nLCB6Tm9kZXMpOwoJCQl9IGVsc2UgewoJCQkJcm9vdFtjaGlsZEtleV0gPSB6Tm9kZXM7CgkJCX0KCgkJCWRhdGEuaW5pdENhY2hlKHNldHRpbmcpOwoJCQlldmVudC51bmJpbmRUcmVlKHNldHRpbmcpOwoJCQlldmVudC5iaW5kVHJlZShzZXR0aW5nKTsKCQkJZXZlbnQudW5iaW5kRXZlbnQoc2V0dGluZyk7CgkJCWV2ZW50LmJpbmRFdmVudChzZXR0aW5nKTsKCgkJCXZhciB6VHJlZVRvb2xzID0gewoJCQkJc2V0dGluZyA6IHNldHRpbmcsCgkJCQlhZGROb2RlcyA6IGZ1bmN0aW9uKHBhcmVudE5vZGUsIGluZGV4LCBuZXdOb2RlcywgaXNTaWxlbnQpIHsKCQkJCQlpZiAoIXBhcmVudE5vZGUpIHBhcmVudE5vZGUgPSBudWxsOwoJCQkJCWlmIChwYXJlbnROb2RlICYmICFwYXJlbnROb2RlLmlzUGFyZW50ICYmIHNldHRpbmcuZGF0YS5rZWVwLmxlYWYpIHJldHVybiBudWxsOwoKCQkJCQl2YXIgaSA9IHBhcnNlSW50KGluZGV4LCAxMCk7CgkJCQkJaWYgKGlzTmFOKGkpKSB7CgkJCQkJCWlzU2lsZW50ID0gISFuZXdOb2RlczsKCQkJCQkJbmV3Tm9kZXMgPSBpbmRleDsKCQkJCQkJaW5kZXggPSAtMTsKCQkJCQl9IGVsc2UgewoJCQkJCQlpbmRleCA9IGk7CgkJCQkJfQoJCQkJCWlmICghbmV3Tm9kZXMpIHJldHVybiBudWxsOwoKCgkJCQkJdmFyIHhOZXdOb2RlcyA9IHRvb2xzLmNsb25lKHRvb2xzLmlzQXJyYXkobmV3Tm9kZXMpPyBuZXdOb2RlczogW25ld05vZGVzXSk7CgkJCQkJZnVuY3Rpb24gYWRkQ2FsbGJhY2soKSB7CgkJCQkJCXZpZXcuYWRkTm9kZXMoc2V0dGluZywgcGFyZW50Tm9kZSwgaW5kZXgsIHhOZXdOb2RlcywgKGlzU2lsZW50PT10cnVlKSk7CgkJCQkJfQoKCQkJCQlpZiAodG9vbHMuY2FuQXN5bmMoc2V0dGluZywgcGFyZW50Tm9kZSkpIHsKCQkJCQkJdmlldy5hc3luY05vZGUoc2V0dGluZywgcGFyZW50Tm9kZSwgaXNTaWxlbnQsIGFkZENhbGxiYWNrKTsKCQkJCQl9IGVsc2UgewoJCQkJCQlhZGRDYWxsYmFjaygpOwoJCQkJCX0KCQkJCQlyZXR1cm4geE5ld05vZGVzOwoJCQkJfSwKCQkJCWNhbmNlbFNlbGVjdGVkTm9kZSA6IGZ1bmN0aW9uKG5vZGUpIHsKCQkJCQl2aWV3LmNhbmNlbFByZVNlbGVjdGVkTm9kZShzZXR0aW5nLCBub2RlKTsKCQkJCX0sCgkJCQlkZXN0cm95IDogZnVuY3Rpb24oKSB7CgkJCQkJdmlldy5kZXN0cm95KHNldHRpbmcpOwoJCQkJfSwKCQkJCWV4cGFuZEFsbCA6IGZ1bmN0aW9uKGV4cGFuZEZsYWcpIHsKCQkJCQlleHBhbmRGbGFnID0gISFleHBhbmRGbGFnOwoJCQkJCXZpZXcuZXhwYW5kQ29sbGFwc2VTb25Ob2RlKHNldHRpbmcsIG51bGwsIGV4cGFuZEZsYWcsIHRydWUpOwoJCQkJCXJldHVybiBleHBhbmRGbGFnOwoJCQkJfSwKCQkJCWV4cGFuZE5vZGUgOiBmdW5jdGlvbihub2RlLCBleHBhbmRGbGFnLCBzb25TaWduLCBmb2N1cywgY2FsbGJhY2tGbGFnKSB7CgkJCQkJaWYgKCFub2RlIHx8ICFub2RlLmlzUGFyZW50KSByZXR1cm4gbnVsbDsKCQkJCQlpZiAoZXhwYW5kRmxhZyAhPT0gdHJ1ZSAmJiBleHBhbmRGbGFnICE9PSBmYWxzZSkgewoJCQkJCQlleHBhbmRGbGFnID0gIW5vZGUub3BlbjsKCQkJCQl9CgkJCQkJY2FsbGJhY2tGbGFnID0gISFjYWxsYmFja0ZsYWc7CgoJCQkJCWlmIChjYWxsYmFja0ZsYWcgJiYgZXhwYW5kRmxhZyAmJiAodG9vbHMuYXBwbHkoc2V0dGluZy5jYWxsYmFjay5iZWZvcmVFeHBhbmQsIFtzZXR0aW5nLnRyZWVJZCwgbm9kZV0sIHRydWUpID09IGZhbHNlKSkgewoJCQkJCQlyZXR1cm4gbnVsbDsKCQkJCQl9IGVsc2UgaWYgKGNhbGxiYWNrRmxhZyAmJiAhZXhwYW5kRmxhZyAmJiAodG9vbHMuYXBwbHkoc2V0dGluZy5jYWxsYmFjay5iZWZvcmVDb2xsYXBzZSwgW3NldHRpbmcudHJlZUlkLCBub2RlXSwgdHJ1ZSkgPT0gZmFsc2UpKSB7CgkJCQkJCXJldHVybiBudWxsOwoJCQkJCX0KCQkJCQlpZiAoZXhwYW5kRmxhZyAmJiBub2RlLnBhcmVudFRJZCkgewoJCQkJCQl2aWV3LmV4cGFuZENvbGxhcHNlUGFyZW50Tm9kZShzZXR0aW5nLCBub2RlLmdldFBhcmVudE5vZGUoKSwgZXhwYW5kRmxhZywgZmFsc2UpOwoJCQkJCX0KCQkJCQlpZiAoZXhwYW5kRmxhZyA9PT0gbm9kZS5vcGVuICYmICFzb25TaWduKSB7CgkJCQkJCXJldHVybiBudWxsOwoJCQkJCX0KCgkJCQkJZGF0YS5nZXRSb290KHNldHRpbmcpLmV4cGFuZFRyaWdnZXJGbGFnID0gY2FsbGJhY2tGbGFnOwoJCQkJCWlmICghdG9vbHMuY2FuQXN5bmMoc2V0dGluZywgbm9kZSkgJiYgc29uU2lnbikgewoJCQkJCQl2aWV3LmV4cGFuZENvbGxhcHNlU29uTm9kZShzZXR0aW5nLCBub2RlLCBleHBhbmRGbGFnLCB0cnVlLCBzaG93Tm9kZUZvY3VzKTsKCQkJCQl9IGVsc2UgewoJCQkJCQlub2RlLm9wZW4gPSAhZXhwYW5kRmxhZzsKCQkJCQkJdmlldy5zd2l0Y2hOb2RlKHRoaXMuc2V0dGluZywgbm9kZSk7CgkJCQkJCXNob3dOb2RlRm9jdXMoKTsKCQkJCQl9CgkJCQkJcmV0dXJuIGV4cGFuZEZsYWc7CgoJCQkJCWZ1bmN0aW9uIHNob3dOb2RlRm9jdXMoKSB7CgkJCQkJCXZhciBhID0gJCQobm9kZSwgc2V0dGluZykuZ2V0KDApOwoJCQkJCQlpZiAoYSAmJiBmb2N1cyAhPT0gZmFsc2UpIHsKCQkJCQkJCXZpZXcuc2Nyb2xsSW50b1ZpZXcoYSk7CgkJCQkJCX0KCQkJCQl9CgkJCQl9LAoJCQkJZ2V0Tm9kZXMgOiBmdW5jdGlvbigpIHsKCQkJCQlyZXR1cm4gZGF0YS5nZXROb2RlcyhzZXR0aW5nKTsKCQkJCX0sCgkJCQlnZXROb2RlQnlQYXJhbSA6IGZ1bmN0aW9uKGtleSwgdmFsdWUsIHBhcmVudE5vZGUpIHsKCQkJCQlpZiAoIWtleSkgcmV0dXJuIG51bGw7CgkJCQkJcmV0dXJuIGRhdGEuZ2V0Tm9kZUJ5UGFyYW0oc2V0dGluZywgcGFyZW50Tm9kZT9wYXJlbnROb2RlW3NldHRpbmcuZGF0YS5rZXkuY2hpbGRyZW5dOmRhdGEuZ2V0Tm9kZXMoc2V0dGluZyksIGtleSwgdmFsdWUpOwoJCQkJfSwKCQkJCWdldE5vZGVCeVRJZCA6IGZ1bmN0aW9uKHRJZCkgewoJCQkJCXJldHVybiBkYXRhLmdldE5vZGVDYWNoZShzZXR0aW5nLCB0SWQpOwoJCQkJfSwKCQkJCWdldE5vZGVzQnlQYXJhbSA6IGZ1bmN0aW9uKGtleSwgdmFsdWUsIHBhcmVudE5vZGUpIHsKCQkJCQlpZiAoIWtleSkgcmV0dXJuIG51bGw7CgkJCQkJcmV0dXJuIGRhdGEuZ2V0Tm9kZXNCeVBhcmFtKHNldHRpbmcsIHBhcmVudE5vZGU/cGFyZW50Tm9kZVtzZXR0aW5nLmRhdGEua2V5LmNoaWxkcmVuXTpkYXRhLmdldE5vZGVzKHNldHRpbmcpLCBrZXksIHZhbHVlKTsKCQkJCX0sCgkJCQlnZXROb2Rlc0J5UGFyYW1GdXp6eSA6IGZ1bmN0aW9uKGtleSwgdmFsdWUsIHBhcmVudE5vZGUpIHsKCQkJCQlpZiAoIWtleSkgcmV0dXJuIG51bGw7CgkJCQkJcmV0dXJuIGRhdGEuZ2V0Tm9kZXNCeVBhcmFtRnV6enkoc2V0dGluZywgcGFyZW50Tm9kZT9wYXJlbnROb2RlW3NldHRpbmcuZGF0YS5rZXkuY2hpbGRyZW5dOmRhdGEuZ2V0Tm9kZXMoc2V0dGluZyksIGtleSwgdmFsdWUpOwoJCQkJfSwKCQkJCWdldE5vZGVzQnlGaWx0ZXI6IGZ1bmN0aW9uKGZpbHRlciwgaXNTaW5nbGUsIHBhcmVudE5vZGUsIGludm9rZVBhcmFtKSB7CgkJCQkJaXNTaW5nbGUgPSAhIWlzU2luZ2xlOwoJCQkJCWlmICghZmlsdGVyIHx8ICh0eXBlb2YgZmlsdGVyICE9ICJmdW5jdGlvbiIpKSByZXR1cm4gKGlzU2luZ2xlID8gbnVsbCA6IFtdKTsKCQkJCQlyZXR1cm4gZGF0YS5nZXROb2Rlc0J5RmlsdGVyKHNldHRpbmcsIHBhcmVudE5vZGU/cGFyZW50Tm9kZVtzZXR0aW5nLmRhdGEua2V5LmNoaWxkcmVuXTpkYXRhLmdldE5vZGVzKHNldHRpbmcpLCBmaWx0ZXIsIGlzU2luZ2xlLCBpbnZva2VQYXJhbSk7CgkJCQl9LAoJCQkJZ2V0Tm9kZUluZGV4IDogZnVuY3Rpb24obm9kZSkgewoJCQkJCWlmICghbm9kZSkgcmV0dXJuIG51bGw7CgkJCQkJdmFyIGNoaWxkS2V5ID0gc2V0dGluZy5kYXRhLmtleS5jaGlsZHJlbiwKCQkJCQlwYXJlbnROb2RlID0gKG5vZGUucGFyZW50VElkKSA/IG5vZGUuZ2V0UGFyZW50Tm9kZSgpIDogZGF0YS5nZXRSb290KHNldHRpbmcpOwoJCQkJCWZvciAodmFyIGk9MCwgbCA9IHBhcmVudE5vZGVbY2hpbGRLZXldLmxlbmd0aDsgaSA8IGw7IGkrKykgewoJCQkJCQlpZiAocGFyZW50Tm9kZVtjaGlsZEtleV1baV0gPT0gbm9kZSkgcmV0dXJuIGk7CgkJCQkJfQoJCQkJCXJldHVybiAtMTsKCQkJCX0sCgkJCQlnZXRTZWxlY3RlZE5vZGVzIDogZnVuY3Rpb24oKSB7CgkJCQkJdmFyIHIgPSBbXSwgbGlzdCA9IGRhdGEuZ2V0Um9vdChzZXR0aW5nKS5jdXJTZWxlY3RlZExpc3Q7CgkJCQkJZm9yICh2YXIgaT0wLCBsPWxpc3QubGVuZ3RoOyBpPGw7IGkrKykgewoJCQkJCQlyLnB1c2gobGlzdFtpXSk7CgkJCQkJfQoJCQkJCXJldHVybiByOwoJCQkJfSwKCQkJCWlzU2VsZWN0ZWROb2RlIDogZnVuY3Rpb24obm9kZSkgewoJCQkJCXJldHVybiBkYXRhLmlzU2VsZWN0ZWROb2RlKHNldHRpbmcsIG5vZGUpOwoJCQkJfSwKCQkJCXJlQXN5bmNDaGlsZE5vZGVzIDogZnVuY3Rpb24ocGFyZW50Tm9kZSwgcmVsb2FkVHlwZSwgaXNTaWxlbnQpIHsKCQkJCQlpZiAoIXRoaXMuc2V0dGluZy5hc3luYy5lbmFibGUpIHJldHVybjsKCQkJCQl2YXIgaXNSb290ID0gIXBhcmVudE5vZGU7CgkJCQkJaWYgKGlzUm9vdCkgewoJCQkJCQlwYXJlbnROb2RlID0gZGF0YS5nZXRSb290KHNldHRpbmcpOwoJCQkJCX0KCQkJCQlpZiAocmVsb2FkVHlwZT09InJlZnJlc2giKSB7CgkJCQkJCXZhciBjaGlsZEtleSA9IHRoaXMuc2V0dGluZy5kYXRhLmtleS5jaGlsZHJlbjsKCQkJCQkJZm9yICh2YXIgaSA9IDAsIGwgPSBwYXJlbnROb2RlW2NoaWxkS2V5XSA/IHBhcmVudE5vZGVbY2hpbGRLZXldLmxlbmd0aCA6IDA7IGkgPCBsOyBpKyspIHsKCQkJCQkJCWRhdGEucmVtb3ZlTm9kZUNhY2hlKHNldHRpbmcsIHBhcmVudE5vZGVbY2hpbGRLZXldW2ldKTsKCQkJCQkJfQoJCQkJCQlkYXRhLnJlbW92ZVNlbGVjdGVkTm9kZShzZXR0aW5nKTsKCQkJCQkJcGFyZW50Tm9kZVtjaGlsZEtleV0gPSBbXTsKCQkJCQkJaWYgKGlzUm9vdCkgewoJCQkJCQkJdGhpcy5zZXR0aW5nLnRyZWVPYmouZW1wdHkoKTsKCQkJCQkJfSBlbHNlIHsKCQkJCQkJCXZhciB1bE9iaiA9ICQkKHBhcmVudE5vZGUsIGNvbnN0cy5pZC5VTCwgc2V0dGluZyk7CgkJCQkJCQl1bE9iai5lbXB0eSgpOwoJCQkJCQl9CgkJCQkJfQoJCQkJCXZpZXcuYXN5bmNOb2RlKHRoaXMuc2V0dGluZywgaXNSb290PyBudWxsOnBhcmVudE5vZGUsICEhaXNTaWxlbnQpOwoJCQkJfSwKCQkJCXJlZnJlc2ggOiBmdW5jdGlvbigpIHsKCQkJCQl0aGlzLnNldHRpbmcudHJlZU9iai5lbXB0eSgpOwoJCQkJCXZhciByb290ID0gZGF0YS5nZXRSb290KHNldHRpbmcpLAoJCQkJCW5vZGVzID0gcm9vdFtzZXR0aW5nLmRhdGEua2V5LmNoaWxkcmVuXQoJCQkJCWRhdGEuaW5pdFJvb3Qoc2V0dGluZyk7CgkJCQkJcm9vdFtzZXR0aW5nLmRhdGEua2V5LmNoaWxkcmVuXSA9IG5vZGVzCgkJCQkJZGF0YS5pbml0Q2FjaGUoc2V0dGluZyk7CgkJCQkJdmlldy5jcmVhdGVOb2RlcyhzZXR0aW5nLCAwLCByb290W3NldHRpbmcuZGF0YS5rZXkuY2hpbGRyZW5dLCBudWxsLCAtMSk7CgkJCQl9LAoJCQkJcmVtb3ZlQ2hpbGROb2RlcyA6IGZ1bmN0aW9uKG5vZGUpIHsKCQkJCQlpZiAoIW5vZGUpIHJldHVybiBudWxsOwoJCQkJCXZhciBjaGlsZEtleSA9IHNldHRpbmcuZGF0YS5rZXkuY2hpbGRyZW4sCgkJCQkJbm9kZXMgPSBub2RlW2NoaWxkS2V5XTsKCQkJCQl2aWV3LnJlbW92ZUNoaWxkTm9kZXMoc2V0dGluZywgbm9kZSk7CgkJCQkJcmV0dXJuIG5vZGVzID8gbm9kZXMgOiBudWxsOwoJCQkJfSwKCQkJCXJlbW92ZU5vZGUgOiBmdW5jdGlvbihub2RlLCBjYWxsYmFja0ZsYWcpIHsKCQkJCQlpZiAoIW5vZGUpIHJldHVybjsKCQkJCQljYWxsYmFja0ZsYWcgPSAhIWNhbGxiYWNrRmxhZzsKCQkJCQlpZiAoY2FsbGJhY2tGbGFnICYmIHRvb2xzLmFwcGx5KHNldHRpbmcuY2FsbGJhY2suYmVmb3JlUmVtb3ZlLCBbc2V0dGluZy50cmVlSWQsIG5vZGVdLCB0cnVlKSA9PSBmYWxzZSkgcmV0dXJuOwoJCQkJCXZpZXcucmVtb3ZlTm9kZShzZXR0aW5nLCBub2RlKTsKCQkJCQlpZiAoY2FsbGJhY2tGbGFnKSB7CgkJCQkJCXRoaXMuc2V0dGluZy50cmVlT2JqLnRyaWdnZXIoY29uc3RzLmV2ZW50LlJFTU9WRSwgW3NldHRpbmcudHJlZUlkLCBub2RlXSk7CgkJCQkJfQoJCQkJfSwKCQkJCXNlbGVjdE5vZGUgOiBmdW5jdGlvbihub2RlLCBhZGRGbGFnLCBpc1NpbGVudCkgewoJCQkJCWlmICghbm9kZSkgcmV0dXJuOwoJCQkJCWlmICh0b29scy51Q2FuRG8oc2V0dGluZykpIHsKCQkJCQkJYWRkRmxhZyA9IHNldHRpbmcudmlldy5zZWxlY3RlZE11bHRpICYmIGFkZEZsYWc7CgkJCQkJCWlmIChub2RlLnBhcmVudFRJZCkgewoJCQkJCQkJdmlldy5leHBhbmRDb2xsYXBzZVBhcmVudE5vZGUoc2V0dGluZywgbm9kZS5nZXRQYXJlbnROb2RlKCksIHRydWUsIGZhbHNlLCBzaG93Tm9kZUZvY3VzKTsKCQkJCQkJfSBlbHNlIHsKCQkJCQkJCXRyeXskJChub2RlLCBzZXR0aW5nKS5mb2N1cygpLmJsdXIoKTt9Y2F0Y2goZSl7fQoJCQkJCQl9CgkJCQkJCXZpZXcuc2VsZWN0Tm9kZShzZXR0aW5nLCBub2RlLCBhZGRGbGFnKTsKCQkJCQl9CgoJCQkJCWZ1bmN0aW9uIHNob3dOb2RlRm9jdXMoKSB7CgkJCQkJCWlmIChpc1NpbGVudCkgewoJCQkJCQkJcmV0dXJuOwoJCQkJCQl9CgkJCQkJCXZhciBhID0gJCQobm9kZSwgc2V0dGluZykuZ2V0KDApOwoJCQkJCQl2aWV3LnNjcm9sbEludG9WaWV3KGEpOwoJCQkJCX0KCQkJCX0sCgkJCQl0cmFuc2Zvcm1Ub3pUcmVlTm9kZXMgOiBmdW5jdGlvbihzaW1wbGVOb2RlcykgewoJCQkJCXJldHVybiBkYXRhLnRyYW5zZm9ybVRvelRyZWVGb3JtYXQoc2V0dGluZywgc2ltcGxlTm9kZXMpOwoJCQkJfSwKCQkJCXRyYW5zZm9ybVRvQXJyYXkgOiBmdW5jdGlvbihub2RlcykgewoJCQkJCXJldHVybiBkYXRhLnRyYW5zZm9ybVRvQXJyYXlGb3JtYXQoc2V0dGluZywgbm9kZXMpOwoJCQkJfSwKCQkJCXVwZGF0ZU5vZGUgOiBmdW5jdGlvbihub2RlLCBjaGVja1R5cGVGbGFnKSB7CgkJCQkJaWYgKCFub2RlKSByZXR1cm47CgkJCQkJdmFyIG5PYmogPSAkJChub2RlLCBzZXR0aW5nKTsKCQkJCQlpZiAobk9iai5nZXQoMCkgJiYgdG9vbHMudUNhbkRvKHNldHRpbmcpKSB7CgkJCQkJCXZpZXcuc2V0Tm9kZU5hbWUoc2V0dGluZywgbm9kZSk7CgkJCQkJCXZpZXcuc2V0Tm9kZVRhcmdldChzZXR0aW5nLCBub2RlKTsKCQkJCQkJdmlldy5zZXROb2RlVXJsKHNldHRpbmcsIG5vZGUpOwoJCQkJCQl2aWV3LnNldE5vZGVMaW5lSWNvcyhzZXR0aW5nLCBub2RlKTsKCQkJCQkJdmlldy5zZXROb2RlRm9udENzcyhzZXR0aW5nLCBub2RlKTsKCQkJCQl9CgkJCQl9CgkJCX0KCQkJcm9vdC50cmVlVG9vbHMgPSB6VHJlZVRvb2xzOwoJCQlkYXRhLnNldFpUcmVlVG9vbHMoc2V0dGluZywgelRyZWVUb29scyk7CgoJCQlpZiAocm9vdFtjaGlsZEtleV0gJiYgcm9vdFtjaGlsZEtleV0ubGVuZ3RoID4gMCkgewoJCQkJdmlldy5jcmVhdGVOb2RlcyhzZXR0aW5nLCAwLCByb290W2NoaWxkS2V5XSwgbnVsbCwgLTEpOwoJCQl9IGVsc2UgaWYgKHNldHRpbmcuYXN5bmMuZW5hYmxlICYmIHNldHRpbmcuYXN5bmMudXJsICYmIHNldHRpbmcuYXN5bmMudXJsICE9PSAnJykgewoJCQkJdmlldy5hc3luY05vZGUoc2V0dGluZyk7CgkJCX0KCQkJcmV0dXJuIHpUcmVlVG9vbHM7CgkJfQoJfTsKCgl2YXIgenQgPSAkLmZuLnpUcmVlLAoJJCQgPSB0b29scy4kLAoJY29uc3RzID0genQuY29uc3RzOwp9KShqUXVlcnkpOwovKgogKiBKUXVlcnkgelRyZWUgZXhjaGVjayB2My41LjIzCiAqIGh0dHA6Ly96VHJlZS5tZS8KICoKICogQ29weXJpZ2h0IChjKSAyMDEwIEh1bnRlci56CiAqCiAqIExpY2Vuc2VkIHNhbWUgYXMganF1ZXJ5IC0gTUlUIExpY2Vuc2UKICogaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHAKICoKICogZW1haWw6IGh1bnRlci56QDI2My5uZXQKICogRGF0ZTogMjAxNi0wNC0wMQogKi8KKGZ1bmN0aW9uKCQpewoJLy9kZWZhdWx0IGNvbnN0cyBvZiBleGNoZWNrCgl2YXIgX2NvbnN0cyA9IHsKCQlldmVudDogewoJCQlDSEVDSzogInp0cmVlX2NoZWNrIgoJCX0sCgkJaWQ6IHsKCQkJQ0hFQ0s6ICJfY2hlY2siCgkJfSwKCQljaGVja2JveDogewoJCQlTVFlMRTogImNoZWNrYm94IiwKCQkJREVGQVVMVDogImNoayIsCgkJCURJU0FCTEVEOiAiZGlzYWJsZSIsCgkJCUZBTFNFOiAiZmFsc2UiLAoJCQlUUlVFOiAidHJ1ZSIsCgkJCUZVTEw6ICJmdWxsIiwKCQkJUEFSVDogInBhcnQiLAoJCQlGT0NVUzogImZvY3VzIgoJCX0sCgkJcmFkaW86IHsKCQkJU1RZTEU6ICJyYWRpbyIsCgkJCVRZUEVfQUxMOiAiYWxsIiwKCQkJVFlQRV9MRVZFTDogImxldmVsIgoJCX0KCX0sCgkvL2RlZmF1bHQgc2V0dGluZyBvZiBleGNoZWNrCglfc2V0dGluZyA9IHsKCQljaGVjazogewoJCQllbmFibGU6IGZhbHNlLAoJCQlhdXRvQ2hlY2tUcmlnZ2VyOiBmYWxzZSwKCQkJY2hrU3R5bGU6IF9jb25zdHMuY2hlY2tib3guU1RZTEUsCgkJCW5vY2hlY2tJbmhlcml0OiBmYWxzZSwKCQkJY2hrRGlzYWJsZWRJbmhlcml0OiBmYWxzZSwKCQkJcmFkaW9UeXBlOiBfY29uc3RzLnJhZGlvLlRZUEVfTEVWRUwsCgkJCWNoa2JveFR5cGU6IHsKCQkJCSJZIjogInBzIiwKCQkJCSJOIjogInBzIgoJCQl9CgkJfSwKCQlkYXRhOiB7CgkJCWtleTogewoJCQkJY2hlY2tlZDogImNoZWNrZWQiCgkJCX0KCQl9LAoJCWNhbGxiYWNrOiB7CgkJCWJlZm9yZUNoZWNrOm51bGwsCgkJCW9uQ2hlY2s6bnVsbAoJCX0KCX0sCgkvL2RlZmF1bHQgcm9vdCBvZiBleGNoZWNrCglfaW5pdFJvb3QgPSBmdW5jdGlvbiAoc2V0dGluZykgewoJCXZhciByID0gZGF0YS5nZXRSb290KHNldHRpbmcpOwoJCXIucmFkaW9DaGVja2VkTGlzdCA9IFtdOwoJfSwKCS8vZGVmYXVsdCBjYWNoZSBvZiBleGNoZWNrCglfaW5pdENhY2hlID0gZnVuY3Rpb24odHJlZUlkKSB7fSwKCS8vZGVmYXVsdCBiaW5kIGV2ZW50IG9mIGV4Y2hlY2sKCV9iaW5kRXZlbnQgPSBmdW5jdGlvbihzZXR0aW5nKSB7CgkJdmFyIG8gPSBzZXR0aW5nLnRyZWVPYmosCgkJYyA9IGNvbnN0cy5ldmVudDsKCQlvLmJpbmQoYy5DSEVDSywgZnVuY3Rpb24gKGV2ZW50LCBzcmNFdmVudCwgdHJlZUlkLCBub2RlKSB7CgkJCWV2ZW50LnNyY0V2ZW50ID0gc3JjRXZlbnQ7CgkJCXRvb2xzLmFwcGx5KHNldHRpbmcuY2FsbGJhY2sub25DaGVjaywgW2V2ZW50LCB0cmVlSWQsIG5vZGVdKTsKCQl9KTsKCX0sCglfdW5iaW5kRXZlbnQgPSBmdW5jdGlvbihzZXR0aW5nKSB7CgkJdmFyIG8gPSBzZXR0aW5nLnRyZWVPYmosCgkJYyA9IGNvbnN0cy5ldmVudDsKCQlvLnVuYmluZChjLkNIRUNLKTsKCX0sCgkvL2RlZmF1bHQgZXZlbnQgcHJveHkgb2YgZXhjaGVjawoJX2V2ZW50UHJveHkgPSBmdW5jdGlvbihlKSB7CgkJdmFyIHRhcmdldCA9IGUudGFyZ2V0LAoJCXNldHRpbmcgPSBkYXRhLmdldFNldHRpbmcoZS5kYXRhLnRyZWVJZCksCgkJdElkID0gIiIsIG5vZGUgPSBudWxsLAoJCW5vZGVFdmVudFR5cGUgPSAiIiwgdHJlZUV2ZW50VHlwZSA9ICIiLAoJCW5vZGVFdmVudENhbGxiYWNrID0gbnVsbCwgdHJlZUV2ZW50Q2FsbGJhY2sgPSBudWxsOwoKCQlpZiAodG9vbHMuZXFzKGUudHlwZSwgIm1vdXNlb3ZlciIpKSB7CgkJCWlmIChzZXR0aW5nLmNoZWNrLmVuYWJsZSAmJiB0b29scy5lcXModGFyZ2V0LnRhZ05hbWUsICJzcGFuIikgJiYgdGFyZ2V0LmdldEF0dHJpYnV0ZSgidHJlZU5vZGUiKyBjb25zdHMuaWQuQ0hFQ0spICE9PSBudWxsKSB7CgkJCQl0SWQgPSB0b29scy5nZXROb2RlTWFpbkRvbSh0YXJnZXQpLmlkOwoJCQkJbm9kZUV2ZW50VHlwZSA9ICJtb3VzZW92ZXJDaGVjayI7CgkJCX0KCQl9IGVsc2UgaWYgKHRvb2xzLmVxcyhlLnR5cGUsICJtb3VzZW91dCIpKSB7CgkJCWlmIChzZXR0aW5nLmNoZWNrLmVuYWJsZSAmJiB0b29scy5lcXModGFyZ2V0LnRhZ05hbWUsICJzcGFuIikgJiYgdGFyZ2V0LmdldEF0dHJpYnV0ZSgidHJlZU5vZGUiKyBjb25zdHMuaWQuQ0hFQ0spICE9PSBudWxsKSB7CgkJCQl0SWQgPSB0b29scy5nZXROb2RlTWFpbkRvbSh0YXJnZXQpLmlkOwoJCQkJbm9kZUV2ZW50VHlwZSA9ICJtb3VzZW91dENoZWNrIjsKCQkJfQoJCX0gZWxzZSBpZiAodG9vbHMuZXFzKGUudHlwZSwgImNsaWNrIikpIHsKCQkJaWYgKHNldHRpbmcuY2hlY2suZW5hYmxlICYmIHRvb2xzLmVxcyh0YXJnZXQudGFnTmFtZSwgInNwYW4iKSAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlKCJ0cmVlTm9kZSIrIGNvbnN0cy5pZC5DSEVDSykgIT09IG51bGwpIHsKCQkJCXRJZCA9IHRvb2xzLmdldE5vZGVNYWluRG9tKHRhcmdldCkuaWQ7CgkJCQlub2RlRXZlbnRUeXBlID0gImNoZWNrTm9kZSI7CgkJCX0KCQl9CgkJaWYgKHRJZC5sZW5ndGg+MCkgewoJCQlub2RlID0gZGF0YS5nZXROb2RlQ2FjaGUoc2V0dGluZywgdElkKTsKCQkJc3dpdGNoIChub2RlRXZlbnRUeXBlKSB7CgkJCQljYXNlICJjaGVja05vZGUiIDoKCQkJCQlub2RlRXZlbnRDYWxsYmFjayA9IF9oYW5kbGVyLm9uQ2hlY2tOb2RlOwoJCQkJCWJyZWFrOwoJCQkJY2FzZSAibW91c2VvdmVyQ2hlY2siIDoKCQkJCQlub2RlRXZlbnRDYWxsYmFjayA9IF9oYW5kbGVyLm9uTW91c2VvdmVyQ2hlY2s7CgkJCQkJYnJlYWs7CgkJCQljYXNlICJtb3VzZW91dENoZWNrIiA6CgkJCQkJbm9kZUV2ZW50Q2FsbGJhY2sgPSBfaGFuZGxlci5vbk1vdXNlb3V0Q2hlY2s7CgkJCQkJYnJlYWs7CgkJCX0KCQl9CgkJdmFyIHByb3h5UmVzdWx0ID0gewoJCQlzdG9wOiBub2RlRXZlbnRUeXBlID09PSAiY2hlY2tOb2RlIiwKCQkJbm9kZTogbm9kZSwKCQkJbm9kZUV2ZW50VHlwZTogbm9kZUV2ZW50VHlwZSwKCQkJbm9kZUV2ZW50Q2FsbGJhY2s6IG5vZGVFdmVudENhbGxiYWNrLAoJCQl0cmVlRXZlbnRUeXBlOiB0cmVlRXZlbnRUeXBlLAoJCQl0cmVlRXZlbnRDYWxsYmFjazogdHJlZUV2ZW50Q2FsbGJhY2sKCQl9OwoJCXJldHVybiBwcm94eVJlc3VsdAoJfSwKCS8vZGVmYXVsdCBpbml0IG5vZGUgb2YgZXhjaGVjawoJX2luaXROb2RlID0gZnVuY3Rpb24oc2V0dGluZywgbGV2ZWwsIG4sIHBhcmVudE5vZGUsIGlzRmlyc3ROb2RlLCBpc0xhc3ROb2RlLCBvcGVuRmxhZykgewoJCWlmICghbikgcmV0dXJuOwoJCXZhciBjaGVja2VkS2V5ID0gc2V0dGluZy5kYXRhLmtleS5jaGVja2VkOwoJCWlmICh0eXBlb2YgbltjaGVja2VkS2V5XSA9PSAic3RyaW5nIikgbltjaGVja2VkS2V5XSA9IHRvb2xzLmVxcyhuW2NoZWNrZWRLZXldLCAidHJ1ZSIpOwoJCW5bY2hlY2tlZEtleV0gPSAhIW5bY2hlY2tlZEtleV07CgkJbi5jaGVja2VkT2xkID0gbltjaGVja2VkS2V5XTsKCQlpZiAodHlwZW9mIG4ubm9jaGVjayA9PSAic3RyaW5nIikgbi5ub2NoZWNrID0gdG9vbHMuZXFzKG4ubm9jaGVjaywgInRydWUiKTsKCQluLm5vY2hlY2sgPSAhIW4ubm9jaGVjayB8fCAoc2V0dGluZy5jaGVjay5ub2NoZWNrSW5oZXJpdCAmJiBwYXJlbnROb2RlICYmICEhcGFyZW50Tm9kZS5ub2NoZWNrKTsKCQlpZiAodHlwZW9mIG4uY2hrRGlzYWJsZWQgPT0gInN0cmluZyIpIG4uY2hrRGlzYWJsZWQgPSB0b29scy5lcXMobi5jaGtEaXNhYmxlZCwgInRydWUiKTsKCQluLmNoa0Rpc2FibGVkID0gISFuLmNoa0Rpc2FibGVkIHx8IChzZXR0aW5nLmNoZWNrLmNoa0Rpc2FibGVkSW5oZXJpdCAmJiBwYXJlbnROb2RlICYmICEhcGFyZW50Tm9kZS5jaGtEaXNhYmxlZCk7CgkJaWYgKHR5cGVvZiBuLmhhbGZDaGVjayA9PSAic3RyaW5nIikgbi5oYWxmQ2hlY2sgPSB0b29scy5lcXMobi5oYWxmQ2hlY2ssICJ0cnVlIik7CgkJbi5oYWxmQ2hlY2sgPSAhIW4uaGFsZkNoZWNrOwoJCW4uY2hlY2tfQ2hpbGRfU3RhdGUgPSAtMTsKCQluLmNoZWNrX0ZvY3VzID0gZmFsc2U7CgkJbi5nZXRDaGVja1N0YXR1cyA9IGZ1bmN0aW9uKCkge3JldHVybiBkYXRhLmdldENoZWNrU3RhdHVzKHNldHRpbmcsIG4pO307CgoJCWlmIChzZXR0aW5nLmNoZWNrLmNoa1N0eWxlID09IGNvbnN0cy5yYWRpby5TVFlMRSAmJiBzZXR0aW5nLmNoZWNrLnJhZGlvVHlwZSA9PSBjb25zdHMucmFkaW8uVFlQRV9BTEwgJiYgbltjaGVja2VkS2V5XSApIHsKCQkJdmFyIHIgPSBkYXRhLmdldFJvb3Qoc2V0dGluZyk7CgkJCXIucmFkaW9DaGVja2VkTGlzdC5wdXNoKG4pOwoJCX0KCX0sCgkvL2FkZCBkb20gZm9yIGNoZWNrCglfYmVmb3JlQSA9IGZ1bmN0aW9uKHNldHRpbmcsIG5vZGUsIGh0bWwpIHsKCQl2YXIgY2hlY2tlZEtleSA9IHNldHRpbmcuZGF0YS5rZXkuY2hlY2tlZDsKCQlpZiAoc2V0dGluZy5jaGVjay5lbmFibGUpIHsKCQkJZGF0YS5tYWtlQ2hrRmxhZyhzZXR0aW5nLCBub2RlKTsKCQkJaHRtbC5wdXNoKCI8c3BhbiBJRD0nIiwgbm9kZS50SWQsIGNvbnN0cy5pZC5DSEVDSywgIicgY2xhc3M9JyIsIHZpZXcubWFrZUNoa0NsYXNzKHNldHRpbmcsIG5vZGUpLCAiJyB0cmVlTm9kZSIsIGNvbnN0cy5pZC5DSEVDSywgKG5vZGUubm9jaGVjayA9PT0gdHJ1ZT8iIHN0eWxlPSdkaXNwbGF5Om5vbmU7JyI6IiIpLCI+PC9zcGFuPiIpOwoJCX0KCX0sCgkvL3VwZGF0ZSB6VHJlZU9iaiwgYWRkIG1ldGhvZCBvZiBjaGVjawoJX3pUcmVlVG9vbHMgPSBmdW5jdGlvbihzZXR0aW5nLCB6VHJlZVRvb2xzKSB7CgkJelRyZWVUb29scy5jaGVja05vZGUgPSBmdW5jdGlvbihub2RlLCBjaGVja2VkLCBjaGVja1R5cGVGbGFnLCBjYWxsYmFja0ZsYWcpIHsKCQkJdmFyIGNoZWNrZWRLZXkgPSB0aGlzLnNldHRpbmcuZGF0YS5rZXkuY2hlY2tlZDsKCQkJaWYgKG5vZGUuY2hrRGlzYWJsZWQgPT09IHRydWUpIHJldHVybjsKCQkJaWYgKGNoZWNrZWQgIT09IHRydWUgJiYgY2hlY2tlZCAhPT0gZmFsc2UpIHsKCQkJCWNoZWNrZWQgPSAhbm9kZVtjaGVja2VkS2V5XTsKCQkJfQoJCQljYWxsYmFja0ZsYWcgPSAhIWNhbGxiYWNrRmxhZzsKCgkJCWlmIChub2RlW2NoZWNrZWRLZXldID09PSBjaGVja2VkICYmICFjaGVja1R5cGVGbGFnKSB7CgkJCQlyZXR1cm47CgkJCX0gZWxzZSBpZiAoY2FsbGJhY2tGbGFnICYmIHRvb2xzLmFwcGx5KHRoaXMuc2V0dGluZy5jYWxsYmFjay5iZWZvcmVDaGVjaywgW3RoaXMuc2V0dGluZy50cmVlSWQsIG5vZGVdLCB0cnVlKSA9PSBmYWxzZSkgewoJCQkJcmV0dXJuOwoJCQl9CgkJCWlmICh0b29scy51Q2FuRG8odGhpcy5zZXR0aW5nKSAmJiB0aGlzLnNldHRpbmcuY2hlY2suZW5hYmxlICYmIG5vZGUubm9jaGVjayAhPT0gdHJ1ZSkgewoJCQkJbm9kZVtjaGVja2VkS2V5XSA9IGNoZWNrZWQ7CgkJCQl2YXIgY2hlY2tPYmogPSAkJChub2RlLCBjb25zdHMuaWQuQ0hFQ0ssIHRoaXMuc2V0dGluZyk7CgkJCQlpZiAoY2hlY2tUeXBlRmxhZyB8fCB0aGlzLnNldHRpbmcuY2hlY2suY2hrU3R5bGUgPT09IGNvbnN0cy5yYWRpby5TVFlMRSkgdmlldy5jaGVja05vZGVSZWxhdGlvbih0aGlzLnNldHRpbmcsIG5vZGUpOwoJCQkJdmlldy5zZXRDaGtDbGFzcyh0aGlzLnNldHRpbmcsIGNoZWNrT2JqLCBub2RlKTsKCQkJCXZpZXcucmVwYWlyUGFyZW50Q2hrQ2xhc3NXaXRoU2VsZih0aGlzLnNldHRpbmcsIG5vZGUpOwoJCQkJaWYgKGNhbGxiYWNrRmxhZykgewoJCQkJCXRoaXMuc2V0dGluZy50cmVlT2JqLnRyaWdnZXIoY29uc3RzLmV2ZW50LkNIRUNLLCBbbnVsbCwgdGhpcy5zZXR0aW5nLnRyZWVJZCwgbm9kZV0pOwoJCQkJfQoJCQl9CgkJfQoKCQl6VHJlZVRvb2xzLmNoZWNrQWxsTm9kZXMgPSBmdW5jdGlvbihjaGVja2VkKSB7CgkJCXZpZXcucmVwYWlyQWxsQ2hrKHRoaXMuc2V0dGluZywgISFjaGVja2VkKTsKCQl9CgoJCXpUcmVlVG9vbHMuZ2V0Q2hlY2tlZE5vZGVzID0gZnVuY3Rpb24oY2hlY2tlZCkgewoJCQl2YXIgY2hpbGRLZXkgPSB0aGlzLnNldHRpbmcuZGF0YS5rZXkuY2hpbGRyZW47CgkJCWNoZWNrZWQgPSAoY2hlY2tlZCAhPT0gZmFsc2UpOwoJCQlyZXR1cm4gZGF0YS5nZXRUcmVlQ2hlY2tlZE5vZGVzKHRoaXMuc2V0dGluZywgZGF0YS5nZXRSb290KHRoaXMuc2V0dGluZylbY2hpbGRLZXldLCBjaGVja2VkKTsKCQl9CgoJCXpUcmVlVG9vbHMuZ2V0Q2hhbmdlQ2hlY2tlZE5vZGVzID0gZnVuY3Rpb24oKSB7CgkJCXZhciBjaGlsZEtleSA9IHRoaXMuc2V0dGluZy5kYXRhLmtleS5jaGlsZHJlbjsKCQkJcmV0dXJuIGRhdGEuZ2V0VHJlZUNoYW5nZUNoZWNrZWROb2Rlcyh0aGlzLnNldHRpbmcsIGRhdGEuZ2V0Um9vdCh0aGlzLnNldHRpbmcpW2NoaWxkS2V5XSk7CgkJfQoKCQl6VHJlZVRvb2xzLnNldENoa0Rpc2FibGVkID0gZnVuY3Rpb24obm9kZSwgZGlzYWJsZWQsIGluaGVyaXRQYXJlbnQsIGluaGVyaXRDaGlsZHJlbikgewoJCQlkaXNhYmxlZCA9ICEhZGlzYWJsZWQ7CgkJCWluaGVyaXRQYXJlbnQgPSAhIWluaGVyaXRQYXJlbnQ7CgkJCWluaGVyaXRDaGlsZHJlbiA9ICEhaW5oZXJpdENoaWxkcmVuOwoJCQl2aWV3LnJlcGFpclNvbkNoa0Rpc2FibGVkKHRoaXMuc2V0dGluZywgbm9kZSwgZGlzYWJsZWQsIGluaGVyaXRDaGlsZHJlbik7CgkJCXZpZXcucmVwYWlyUGFyZW50Q2hrRGlzYWJsZWQodGhpcy5zZXR0aW5nLCBub2RlLmdldFBhcmVudE5vZGUoKSwgZGlzYWJsZWQsIGluaGVyaXRQYXJlbnQpOwoJCX0KCgkJdmFyIF91cGRhdGVOb2RlID0gelRyZWVUb29scy51cGRhdGVOb2RlOwoJCXpUcmVlVG9vbHMudXBkYXRlTm9kZSA9IGZ1bmN0aW9uKG5vZGUsIGNoZWNrVHlwZUZsYWcpIHsKCQkJaWYgKF91cGRhdGVOb2RlKSBfdXBkYXRlTm9kZS5hcHBseSh6VHJlZVRvb2xzLCBhcmd1bWVudHMpOwoJCQlpZiAoIW5vZGUgfHwgIXRoaXMuc2V0dGluZy5jaGVjay5lbmFibGUpIHJldHVybjsKCQkJdmFyIG5PYmogPSAkJChub2RlLCB0aGlzLnNldHRpbmcpOwoJCQlpZiAobk9iai5nZXQoMCkgJiYgdG9vbHMudUNhbkRvKHRoaXMuc2V0dGluZykpIHsKCQkJCXZhciBjaGVja09iaiA9ICQkKG5vZGUsIGNvbnN0cy5pZC5DSEVDSywgdGhpcy5zZXR0aW5nKTsKCQkJCWlmIChjaGVja1R5cGVGbGFnID09IHRydWUgfHwgdGhpcy5zZXR0aW5nLmNoZWNrLmNoa1N0eWxlID09PSBjb25zdHMucmFkaW8uU1RZTEUpIHZpZXcuY2hlY2tOb2RlUmVsYXRpb24odGhpcy5zZXR0aW5nLCBub2RlKTsKCQkJCXZpZXcuc2V0Q2hrQ2xhc3ModGhpcy5zZXR0aW5nLCBjaGVja09iaiwgbm9kZSk7CgkJCQl2aWV3LnJlcGFpclBhcmVudENoa0NsYXNzV2l0aFNlbGYodGhpcy5zZXR0aW5nLCBub2RlKTsKCQkJfQoJCX0KCX0sCgkvL21ldGhvZCBvZiBvcGVyYXRlIGRhdGEKCV9kYXRhID0gewoJCWdldFJhZGlvQ2hlY2tlZExpc3Q6IGZ1bmN0aW9uKHNldHRpbmcpIHsKCQkJdmFyIGNoZWNrZWRMaXN0ID0gZGF0YS5nZXRSb290KHNldHRpbmcpLnJhZGlvQ2hlY2tlZExpc3Q7CgkJCWZvciAodmFyIGk9MCwgaj1jaGVja2VkTGlzdC5sZW5ndGg7IGk8ajsgaSsrKSB7CgkJCQlpZighZGF0YS5nZXROb2RlQ2FjaGUoc2V0dGluZywgY2hlY2tlZExpc3RbaV0udElkKSkgewoJCQkJCWNoZWNrZWRMaXN0LnNwbGljZShpLCAxKTsKCQkJCQlpLS07IGotLTsKCQkJCX0KCQkJfQoJCQlyZXR1cm4gY2hlY2tlZExpc3Q7CgkJfSwKCQlnZXRDaGVja1N0YXR1czogZnVuY3Rpb24oc2V0dGluZywgbm9kZSkgewoJCQlpZiAoIXNldHRpbmcuY2hlY2suZW5hYmxlIHx8IG5vZGUubm9jaGVjayB8fCBub2RlLmNoa0Rpc2FibGVkKSByZXR1cm4gbnVsbDsKCQkJdmFyIGNoZWNrZWRLZXkgPSBzZXR0aW5nLmRhdGEua2V5LmNoZWNrZWQsCgkJCXIgPSB7CgkJCQljaGVja2VkOiBub2RlW2NoZWNrZWRLZXldLAoJCQkJaGFsZjogbm9kZS5oYWxmQ2hlY2sgPyBub2RlLmhhbGZDaGVjayA6IChzZXR0aW5nLmNoZWNrLmNoa1N0eWxlID09IGNvbnN0cy5yYWRpby5TVFlMRSA/IChub2RlLmNoZWNrX0NoaWxkX1N0YXRlID09PSAyKSA6IChub2RlW2NoZWNrZWRLZXldID8gKG5vZGUuY2hlY2tfQ2hpbGRfU3RhdGUgPiAtMSAmJiBub2RlLmNoZWNrX0NoaWxkX1N0YXRlIDwgMikgOiAobm9kZS5jaGVja19DaGlsZF9TdGF0ZSA+IDApKSkKCQkJfTsKCQkJcmV0dXJuIHI7CgkJfSwKCQlnZXRUcmVlQ2hlY2tlZE5vZGVzOiBmdW5jdGlvbihzZXR0aW5nLCBub2RlcywgY2hlY2tlZCwgcmVzdWx0cykgewoJCQlpZiAoIW5vZGVzKSByZXR1cm4gW107CgkJCXZhciBjaGlsZEtleSA9IHNldHRpbmcuZGF0YS5rZXkuY2hpbGRyZW4sCgkJCWNoZWNrZWRLZXkgPSBzZXR0aW5nLmRhdGEua2V5LmNoZWNrZWQsCgkJCW9ubHlPbmUgPSAoY2hlY2tlZCAmJiBzZXR0aW5nLmNoZWNrLmNoa1N0eWxlID09IGNvbnN0cy5yYWRpby5TVFlMRSAmJiBzZXR0aW5nLmNoZWNrLnJhZGlvVHlwZSA9PSBjb25zdHMucmFkaW8uVFlQRV9BTEwpOwoJCQlyZXN1bHRzID0gIXJlc3VsdHMgPyBbXSA6IHJlc3VsdHM7CgkJCWZvciAodmFyIGkgPSAwLCBsID0gbm9kZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CgkJCQlpZiAobm9kZXNbaV0ubm9jaGVjayAhPT0gdHJ1ZSAmJiBub2Rlc1tpXS5jaGtEaXNhYmxlZCAhPT0gdHJ1ZSAmJiBub2Rlc1tpXVtjaGVja2VkS2V5XSA9PSBjaGVja2VkKSB7CgkJCQkJcmVzdWx0cy5wdXNoKG5vZGVzW2ldKTsKCQkJCQlpZihvbmx5T25lKSB7CgkJCQkJCWJyZWFrOwoJCQkJCX0KCQkJCX0KCQkJCWRhdGEuZ2V0VHJlZUNoZWNrZWROb2RlcyhzZXR0aW5nLCBub2Rlc1tpXVtjaGlsZEtleV0sIGNoZWNrZWQsIHJlc3VsdHMpOwoJCQkJaWYob25seU9uZSAmJiByZXN1bHRzLmxlbmd0aCA+IDApIHsKCQkJCQlicmVhazsKCQkJCX0KCQkJfQoJCQlyZXR1cm4gcmVzdWx0czsKCQl9LAoJCWdldFRyZWVDaGFuZ2VDaGVja2VkTm9kZXM6IGZ1bmN0aW9uKHNldHRpbmcsIG5vZGVzLCByZXN1bHRzKSB7CgkJCWlmICghbm9kZXMpIHJldHVybiBbXTsKCQkJdmFyIGNoaWxkS2V5ID0gc2V0dGluZy5kYXRhLmtleS5jaGlsZHJlbiwKCQkJY2hlY2tlZEtleSA9IHNldHRpbmcuZGF0YS5rZXkuY2hlY2tlZDsKCQkJcmVzdWx0cyA9ICFyZXN1bHRzID8gW10gOiByZXN1bHRzOwoJCQlmb3IgKHZhciBpID0gMCwgbCA9IG5vZGVzLmxlbmd0aDsgaSA8IGw7IGkrKykgewoJCQkJaWYgKG5vZGVzW2ldLm5vY2hlY2sgIT09IHRydWUgJiYgbm9kZXNbaV0uY2hrRGlzYWJsZWQgIT09IHRydWUgJiYgbm9kZXNbaV1bY2hlY2tlZEtleV0gIT0gbm9kZXNbaV0uY2hlY2tlZE9sZCkgewoJCQkJCXJlc3VsdHMucHVzaChub2Rlc1tpXSk7CgkJCQl9CgkJCQlkYXRhLmdldFRyZWVDaGFuZ2VDaGVja2VkTm9kZXMoc2V0dGluZywgbm9kZXNbaV1bY2hpbGRLZXldLCByZXN1bHRzKTsKCQkJfQoJCQlyZXR1cm4gcmVzdWx0czsKCQl9LAoJCW1ha2VDaGtGbGFnOiBmdW5jdGlvbihzZXR0aW5nLCBub2RlKSB7CgkJCWlmICghbm9kZSkgcmV0dXJuOwoJCQl2YXIgY2hpbGRLZXkgPSBzZXR0aW5nLmRhdGEua2V5LmNoaWxkcmVuLAoJCQljaGVja2VkS2V5ID0gc2V0dGluZy5kYXRhLmtleS5jaGVja2VkLAoJCQljaGtGbGFnID0gLTE7CgkJCWlmIChub2RlW2NoaWxkS2V5XSkgewoJCQkJZm9yICh2YXIgaSA9IDAsIGwgPSBub2RlW2NoaWxkS2V5XS5sZW5ndGg7IGkgPCBsOyBpKyspIHsKCQkJCQl2YXIgY05vZGUgPSBub2RlW2NoaWxkS2V5XVtpXTsKCQkJCQl2YXIgdG1wID0gLTE7CgkJCQkJaWYgKHNldHRpbmcuY2hlY2suY2hrU3R5bGUgPT0gY29uc3RzLnJhZGlvLlNUWUxFKSB7CgkJCQkJCWlmIChjTm9kZS5ub2NoZWNrID09PSB0cnVlIHx8IGNOb2RlLmNoa0Rpc2FibGVkID09PSB0cnVlKSB7CgkJCQkJCQl0bXAgPSBjTm9kZS5jaGVja19DaGlsZF9TdGF0ZTsKCQkJCQkJfSBlbHNlIGlmIChjTm9kZS5oYWxmQ2hlY2sgPT09IHRydWUpIHsKCQkJCQkJCXRtcCA9IDI7CgkJCQkJCX0gZWxzZSBpZiAoY05vZGVbY2hlY2tlZEtleV0pIHsKCQkJCQkJCXRtcCA9IDI7CgkJCQkJCX0gZWxzZSB7CgkJCQkJCQl0bXAgPSBjTm9kZS5jaGVja19DaGlsZF9TdGF0ZSA+IDAgPyAyOjA7CgkJCQkJCX0KCQkJCQkJaWYgKHRtcCA9PSAyKSB7CgkJCQkJCQljaGtGbGFnID0gMjsgYnJlYWs7CgkJCQkJCX0gZWxzZSBpZiAodG1wID09IDApewoJCQkJCQkJY2hrRmxhZyA9IDA7CgkJCQkJCX0KCQkJCQl9IGVsc2UgaWYgKHNldHRpbmcuY2hlY2suY2hrU3R5bGUgPT0gY29uc3RzLmNoZWNrYm94LlNUWUxFKSB7CgkJCQkJCWlmIChjTm9kZS5ub2NoZWNrID09PSB0cnVlIHx8IGNOb2RlLmNoa0Rpc2FibGVkID09PSB0cnVlKSB7CgkJCQkJCQl0bXAgPSBjTm9kZS5jaGVja19DaGlsZF9TdGF0ZTsKCQkJCQkJfSBlbHNlIGlmIChjTm9kZS5oYWxmQ2hlY2sgPT09IHRydWUpIHsKCQkJCQkJCXRtcCA9IDE7CgkJCQkJCX0gZWxzZSBpZiAoY05vZGVbY2hlY2tlZEtleV0gKSB7CgkJCQkJCQl0bXAgPSAoY05vZGUuY2hlY2tfQ2hpbGRfU3RhdGUgPT09IC0xIHx8IGNOb2RlLmNoZWNrX0NoaWxkX1N0YXRlID09PSAyKSA/IDIgOiAxOwoJCQkJCQl9IGVsc2UgewoJCQkJCQkJdG1wID0gKGNOb2RlLmNoZWNrX0NoaWxkX1N0YXRlID4gMCkgPyAxIDogMDsKCQkJCQkJfQoJCQkJCQlpZiAodG1wID09PSAxKSB7CgkJCQkJCQljaGtGbGFnID0gMTsgYnJlYWs7CgkJCQkJCX0gZWxzZSBpZiAodG1wID09PSAyICYmIGNoa0ZsYWcgPiAtMSAmJiBpID4gMCAmJiB0bXAgIT09IGNoa0ZsYWcpIHsKCQkJCQkJCWNoa0ZsYWcgPSAxOyBicmVhazsKCQkJCQkJfSBlbHNlIGlmIChjaGtGbGFnID09PSAyICYmIHRtcCA+IC0xICYmIHRtcCA8IDIpIHsKCQkJCQkJCWNoa0ZsYWcgPSAxOyBicmVhazsKCQkJCQkJfSBlbHNlIGlmICh0bXAgPiAtMSkgewoJCQkJCQkJY2hrRmxhZyA9IHRtcDsKCQkJCQkJfQoJCQkJCX0KCQkJCX0KCQkJfQoJCQlub2RlLmNoZWNrX0NoaWxkX1N0YXRlID0gY2hrRmxhZzsKCQl9Cgl9LAoJLy9tZXRob2Qgb2YgZXZlbnQgcHJveHkKCV9ldmVudCA9IHsKCgl9LAoJLy9tZXRob2Qgb2YgZXZlbnQgaGFuZGxlcgoJX2hhbmRsZXIgPSB7CgkJb25DaGVja05vZGU6IGZ1bmN0aW9uIChldmVudCwgbm9kZSkgewoJCQlpZiAobm9kZS5jaGtEaXNhYmxlZCA9PT0gdHJ1ZSkgcmV0dXJuIGZhbHNlOwoJCQl2YXIgc2V0dGluZyA9IGRhdGEuZ2V0U2V0dGluZyhldmVudC5kYXRhLnRyZWVJZCksCgkJCWNoZWNrZWRLZXkgPSBzZXR0aW5nLmRhdGEua2V5LmNoZWNrZWQ7CgkJCWlmICh0b29scy5hcHBseShzZXR0aW5nLmNhbGxiYWNrLmJlZm9yZUNoZWNrLCBbc2V0dGluZy50cmVlSWQsIG5vZGVdLCB0cnVlKSA9PSBmYWxzZSkgcmV0dXJuIHRydWU7CgkJCW5vZGVbY2hlY2tlZEtleV0gPSAhbm9kZVtjaGVja2VkS2V5XTsKCQkJdmlldy5jaGVja05vZGVSZWxhdGlvbihzZXR0aW5nLCBub2RlKTsKCQkJdmFyIGNoZWNrT2JqID0gJCQobm9kZSwgY29uc3RzLmlkLkNIRUNLLCBzZXR0aW5nKTsKCQkJdmlldy5zZXRDaGtDbGFzcyhzZXR0aW5nLCBjaGVja09iaiwgbm9kZSk7CgkJCXZpZXcucmVwYWlyUGFyZW50Q2hrQ2xhc3NXaXRoU2VsZihzZXR0aW5nLCBub2RlKTsKCQkJc2V0dGluZy50cmVlT2JqLnRyaWdnZXIoY29uc3RzLmV2ZW50LkNIRUNLLCBbZXZlbnQsIHNldHRpbmcudHJlZUlkLCBub2RlXSk7CgkJCXJldHVybiB0cnVlOwoJCX0sCgkJb25Nb3VzZW92ZXJDaGVjazogZnVuY3Rpb24oZXZlbnQsIG5vZGUpIHsKCQkJaWYgKG5vZGUuY2hrRGlzYWJsZWQgPT09IHRydWUpIHJldHVybiBmYWxzZTsKCQkJdmFyIHNldHRpbmcgPSBkYXRhLmdldFNldHRpbmcoZXZlbnQuZGF0YS50cmVlSWQpLAoJCQljaGVja09iaiA9ICQkKG5vZGUsIGNvbnN0cy5pZC5DSEVDSywgc2V0dGluZyk7CgkJCW5vZGUuY2hlY2tfRm9jdXMgPSB0cnVlOwoJCQl2aWV3LnNldENoa0NsYXNzKHNldHRpbmcsIGNoZWNrT2JqLCBub2RlKTsKCQkJcmV0dXJuIHRydWU7CgkJfSwKCQlvbk1vdXNlb3V0Q2hlY2s6IGZ1bmN0aW9uKGV2ZW50LCBub2RlKSB7CgkJCWlmIChub2RlLmNoa0Rpc2FibGVkID09PSB0cnVlKSByZXR1cm4gZmFsc2U7CgkJCXZhciBzZXR0aW5nID0gZGF0YS5nZXRTZXR0aW5nKGV2ZW50LmRhdGEudHJlZUlkKSwKCQkJY2hlY2tPYmogPSAkJChub2RlLCBjb25zdHMuaWQuQ0hFQ0ssIHNldHRpbmcpOwoJCQlub2RlLmNoZWNrX0ZvY3VzID0gZmFsc2U7CgkJCXZpZXcuc2V0Q2hrQ2xhc3Moc2V0dGluZywgY2hlY2tPYmosIG5vZGUpOwoJCQlyZXR1cm4gdHJ1ZTsKCQl9Cgl9LAoJLy9tZXRob2Qgb2YgdG9vbHMgZm9yIHpUcmVlCglfdG9vbHMgPSB7CgoJfSwKCS8vbWV0aG9kIG9mIG9wZXJhdGUgenRyZWUgZG9tCglfdmlldyA9IHsKCQljaGVja05vZGVSZWxhdGlvbjogZnVuY3Rpb24oc2V0dGluZywgbm9kZSkgewoJCQl2YXIgcE5vZGUsIGksIGwsCgkJCWNoaWxkS2V5ID0gc2V0dGluZy5kYXRhLmtleS5jaGlsZHJlbiwKCQkJY2hlY2tlZEtleSA9IHNldHRpbmcuZGF0YS5rZXkuY2hlY2tlZCwKCQkJciA9IGNvbnN0cy5yYWRpbzsKCQkJaWYgKHNldHRpbmcuY2hlY2suY2hrU3R5bGUgPT0gci5TVFlMRSkgewoJCQkJdmFyIGNoZWNrZWRMaXN0ID0gZGF0YS5nZXRSYWRpb0NoZWNrZWRMaXN0KHNldHRpbmcpOwoJCQkJaWYgKG5vZGVbY2hlY2tlZEtleV0pIHsKCQkJCQlpZiAoc2V0dGluZy5jaGVjay5yYWRpb1R5cGUgPT0gci5UWVBFX0FMTCkgewoJCQkJCQlmb3IgKGkgPSBjaGVja2VkTGlzdC5sZW5ndGgtMTsgaSA+PSAwOyBpLS0pIHsKCQkJCQkJCXBOb2RlID0gY2hlY2tlZExpc3RbaV07CgkJCQkJCQlpZiAocE5vZGVbY2hlY2tlZEtleV0gJiYgcE5vZGUgIT0gbm9kZSkgewoJCQkJCQkJCXBOb2RlW2NoZWNrZWRLZXldID0gZmFsc2U7CgkJCQkJCQkJY2hlY2tlZExpc3Quc3BsaWNlKGksIDEpOwoKCQkJCQkJCQl2aWV3LnNldENoa0NsYXNzKHNldHRpbmcsICQkKHBOb2RlLCBjb25zdHMuaWQuQ0hFQ0ssIHNldHRpbmcpLCBwTm9kZSk7CgkJCQkJCQkJaWYgKHBOb2RlLnBhcmVudFRJZCAhPSBub2RlLnBhcmVudFRJZCkgewoJCQkJCQkJCQl2aWV3LnJlcGFpclBhcmVudENoa0NsYXNzV2l0aFNlbGYoc2V0dGluZywgcE5vZGUpOwoJCQkJCQkJCX0KCQkJCQkJCX0KCQkJCQkJfQoJCQkJCQljaGVja2VkTGlzdC5wdXNoKG5vZGUpOwoJCQkJCX0gZWxzZSB7CgkJCQkJCXZhciBwYXJlbnROb2RlID0gKG5vZGUucGFyZW50VElkKSA/IG5vZGUuZ2V0UGFyZW50Tm9kZSgpIDogZGF0YS5nZXRSb290KHNldHRpbmcpOwoJCQkJCQlmb3IgKGkgPSAwLCBsID0gcGFyZW50Tm9kZVtjaGlsZEtleV0ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CgkJCQkJCQlwTm9kZSA9IHBhcmVudE5vZGVbY2hpbGRLZXldW2ldOwoJCQkJCQkJaWYgKHBOb2RlW2NoZWNrZWRLZXldICYmIHBOb2RlICE9IG5vZGUpIHsKCQkJCQkJCQlwTm9kZVtjaGVja2VkS2V5XSA9IGZhbHNlOwoJCQkJCQkJCXZpZXcuc2V0Q2hrQ2xhc3Moc2V0dGluZywgJCQocE5vZGUsIGNvbnN0cy5pZC5DSEVDSywgc2V0dGluZyksIHBOb2RlKTsKCQkJCQkJCX0KCQkJCQkJfQoJCQkJCX0KCQkJCX0gZWxzZSBpZiAoc2V0dGluZy5jaGVjay5yYWRpb1R5cGUgPT0gci5UWVBFX0FMTCkgewoJCQkJCWZvciAoaSA9IDAsIGwgPSBjaGVja2VkTGlzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHsKCQkJCQkJaWYgKG5vZGUgPT0gY2hlY2tlZExpc3RbaV0pIHsKCQkJCQkJCWNoZWNrZWRMaXN0LnNwbGljZShpLCAxKTsKCQkJCQkJCWJyZWFrOwoJCQkJCQl9CgkJCQkJfQoJCQkJfQoKCQkJfSBlbHNlIHsKCQkJCWlmIChub2RlW2NoZWNrZWRLZXldICYmICghbm9kZVtjaGlsZEtleV0gfHwgbm9kZVtjaGlsZEtleV0ubGVuZ3RoPT0wIHx8IHNldHRpbmcuY2hlY2suY2hrYm94VHlwZS5ZLmluZGV4T2YoInMiKSA+IC0xKSkgewoJCQkJCXZpZXcuc2V0U29uTm9kZUNoZWNrQm94KHNldHRpbmcsIG5vZGUsIHRydWUpOwoJCQkJfQoJCQkJaWYgKCFub2RlW2NoZWNrZWRLZXldICYmICghbm9kZVtjaGlsZEtleV0gfHwgbm9kZVtjaGlsZEtleV0ubGVuZ3RoPT0wIHx8IHNldHRpbmcuY2hlY2suY2hrYm94VHlwZS5OLmluZGV4T2YoInMiKSA+IC0xKSkgewoJCQkJCXZpZXcuc2V0U29uTm9kZUNoZWNrQm94KHNldHRpbmcsIG5vZGUsIGZhbHNlKTsKCQkJCX0KCQkJCWlmIChub2RlW2NoZWNrZWRLZXldICYmIHNldHRpbmcuY2hlY2suY2hrYm94VHlwZS5ZLmluZGV4T2YoInAiKSA+IC0xKSB7CgkJCQkJdmlldy5zZXRQYXJlbnROb2RlQ2hlY2tCb3goc2V0dGluZywgbm9kZSwgdHJ1ZSk7CgkJCQl9CgkJCQlpZiAoIW5vZGVbY2hlY2tlZEtleV0gJiYgc2V0dGluZy5jaGVjay5jaGtib3hUeXBlLk4uaW5kZXhPZigicCIpID4gLTEpIHsKCQkJCQl2aWV3LnNldFBhcmVudE5vZGVDaGVja0JveChzZXR0aW5nLCBub2RlLCBmYWxzZSk7CgkJCQl9CgkJCX0KCQl9LAoJCW1ha2VDaGtDbGFzczogZnVuY3Rpb24oc2V0dGluZywgbm9kZSkgewoJCQl2YXIgY2hlY2tlZEtleSA9IHNldHRpbmcuZGF0YS5rZXkuY2hlY2tlZCwKCQkJYyA9IGNvbnN0cy5jaGVja2JveCwgciA9IGNvbnN0cy5yYWRpbywKCQkJZnVsbFN0eWxlID0gIiI7CgkJCWlmIChub2RlLmNoa0Rpc2FibGVkID09PSB0cnVlKSB7CgkJCQlmdWxsU3R5bGUgPSBjLkRJU0FCTEVEOwoJCQl9IGVsc2UgaWYgKG5vZGUuaGFsZkNoZWNrKSB7CgkJCQlmdWxsU3R5bGUgPSBjLlBBUlQ7CgkJCX0gZWxzZSBpZiAoc2V0dGluZy5jaGVjay5jaGtTdHlsZSA9PSByLlNUWUxFKSB7CgkJCQlmdWxsU3R5bGUgPSAobm9kZS5jaGVja19DaGlsZF9TdGF0ZSA8IDEpPyBjLkZVTEw6Yy5QQVJUOwoJCQl9IGVsc2UgewoJCQkJZnVsbFN0eWxlID0gbm9kZVtjaGVja2VkS2V5XSA/ICgobm9kZS5jaGVja19DaGlsZF9TdGF0ZSA9PT0gMiB8fCBub2RlLmNoZWNrX0NoaWxkX1N0YXRlID09PSAtMSkgPyBjLkZVTEw6Yy5QQVJUKSA6ICgobm9kZS5jaGVja19DaGlsZF9TdGF0ZSA8IDEpPyBjLkZVTEw6Yy5QQVJUKTsKCQkJfQoJCQl2YXIgY2hrTmFtZSA9IHNldHRpbmcuY2hlY2suY2hrU3R5bGUgKyAiXyIgKyAobm9kZVtjaGVja2VkS2V5XSA/IGMuVFJVRSA6IGMuRkFMU0UpICsgIl8iICsgZnVsbFN0eWxlOwoJCQljaGtOYW1lID0gKG5vZGUuY2hlY2tfRm9jdXMgJiYgbm9kZS5jaGtEaXNhYmxlZCAhPT0gdHJ1ZSkgPyBjaGtOYW1lICsgIl8iICsgYy5GT0NVUyA6IGNoa05hbWU7CgkJCXJldHVybiBjb25zdHMuY2xhc3NOYW1lLkJVVFRPTiArICIgIiArIGMuREVGQVVMVCArICIgIiArIGNoa05hbWU7CgkJfSwKCQlyZXBhaXJBbGxDaGs6IGZ1bmN0aW9uKHNldHRpbmcsIGNoZWNrZWQpIHsKCQkJaWYgKHNldHRpbmcuY2hlY2suZW5hYmxlICYmIHNldHRpbmcuY2hlY2suY2hrU3R5bGUgPT09IGNvbnN0cy5jaGVja2JveC5TVFlMRSkgewoJCQkJdmFyIGNoZWNrZWRLZXkgPSBzZXR0aW5nLmRhdGEua2V5LmNoZWNrZWQsCgkJCQljaGlsZEtleSA9IHNldHRpbmcuZGF0YS5rZXkuY2hpbGRyZW4sCgkJCQlyb290ID0gZGF0YS5nZXRSb290KHNldHRpbmcpOwoJCQkJZm9yICh2YXIgaSA9IDAsIGwgPSByb290W2NoaWxkS2V5XS5sZW5ndGg7IGk8bCA7IGkrKykgewoJCQkJCXZhciBub2RlID0gcm9vdFtjaGlsZEtleV1baV07CgkJCQkJaWYgKG5vZGUubm9jaGVjayAhPT0gdHJ1ZSAmJiBub2RlLmNoa0Rpc2FibGVkICE9PSB0cnVlKSB7CgkJCQkJCW5vZGVbY2hlY2tlZEtleV0gPSBjaGVja2VkOwoJCQkJCX0KCQkJCQl2aWV3LnNldFNvbk5vZGVDaGVja0JveChzZXR0aW5nLCBub2RlLCBjaGVja2VkKTsKCQkJCX0KCQkJfQoJCX0sCgkJcmVwYWlyQ2hrQ2xhc3M6IGZ1bmN0aW9uKHNldHRpbmcsIG5vZGUpIHsKCQkJaWYgKCFub2RlKSByZXR1cm47CgkJCWRhdGEubWFrZUNoa0ZsYWcoc2V0dGluZywgbm9kZSk7CgkJCWlmIChub2RlLm5vY2hlY2sgIT09IHRydWUpIHsKCQkJCXZhciBjaGVja09iaiA9ICQkKG5vZGUsIGNvbnN0cy5pZC5DSEVDSywgc2V0dGluZyk7CgkJCQl2aWV3LnNldENoa0NsYXNzKHNldHRpbmcsIGNoZWNrT2JqLCBub2RlKTsKCQkJfQoJCX0sCgkJcmVwYWlyUGFyZW50Q2hrQ2xhc3M6IGZ1bmN0aW9uKHNldHRpbmcsIG5vZGUpIHsKCQkJaWYgKCFub2RlIHx8ICFub2RlLnBhcmVudFRJZCkgcmV0dXJuOwoJCQl2YXIgcE5vZGUgPSBub2RlLmdldFBhcmVudE5vZGUoKTsKCQkJdmlldy5yZXBhaXJDaGtDbGFzcyhzZXR0aW5nLCBwTm9kZSk7CgkJCXZpZXcucmVwYWlyUGFyZW50Q2hrQ2xhc3Moc2V0dGluZywgcE5vZGUpOwoJCX0sCgkJcmVwYWlyUGFyZW50Q2hrQ2xhc3NXaXRoU2VsZjogZnVuY3Rpb24oc2V0dGluZywgbm9kZSkgewoJCQlpZiAoIW5vZGUpIHJldHVybjsKCQkJdmFyIGNoaWxkS2V5ID0gc2V0dGluZy5kYXRhLmtleS5jaGlsZHJlbjsKCQkJaWYgKG5vZGVbY2hpbGRLZXldICYmIG5vZGVbY2hpbGRLZXldLmxlbmd0aCA+IDApIHsKCQkJCXZpZXcucmVwYWlyUGFyZW50Q2hrQ2xhc3Moc2V0dGluZywgbm9kZVtjaGlsZEtleV1bMF0pOwoJCQl9IGVsc2UgewoJCQkJdmlldy5yZXBhaXJQYXJlbnRDaGtDbGFzcyhzZXR0aW5nLCBub2RlKTsKCQkJfQoJCX0sCgkJcmVwYWlyU29uQ2hrRGlzYWJsZWQ6IGZ1bmN0aW9uKHNldHRpbmcsIG5vZGUsIGNoa0Rpc2FibGVkLCBpbmhlcml0KSB7CgkJCWlmICghbm9kZSkgcmV0dXJuOwoJCQl2YXIgY2hpbGRLZXkgPSBzZXR0aW5nLmRhdGEua2V5LmNoaWxkcmVuOwoJCQlpZiAobm9kZS5jaGtEaXNhYmxlZCAhPSBjaGtEaXNhYmxlZCkgewoJCQkJbm9kZS5jaGtEaXNhYmxlZCA9IGNoa0Rpc2FibGVkOwoJCQl9CgkJCXZpZXcucmVwYWlyQ2hrQ2xhc3Moc2V0dGluZywgbm9kZSk7CgkJCWlmIChub2RlW2NoaWxkS2V5XSAmJiBpbmhlcml0KSB7CgkJCQlmb3IgKHZhciBpID0gMCwgbCA9IG5vZGVbY2hpbGRLZXldLmxlbmd0aDsgaSA8IGw7IGkrKykgewoJCQkJCXZhciBzTm9kZSA9IG5vZGVbY2hpbGRLZXldW2ldOwoJCQkJCXZpZXcucmVwYWlyU29uQ2hrRGlzYWJsZWQoc2V0dGluZywgc05vZGUsIGNoa0Rpc2FibGVkLCBpbmhlcml0KTsKCQkJCX0KCQkJfQoJCX0sCgkJcmVwYWlyUGFyZW50Q2hrRGlzYWJsZWQ6IGZ1bmN0aW9uKHNldHRpbmcsIG5vZGUsIGNoa0Rpc2FibGVkLCBpbmhlcml0KSB7CgkJCWlmICghbm9kZSkgcmV0dXJuOwoJCQlpZiAobm9kZS5jaGtEaXNhYmxlZCAhPSBjaGtEaXNhYmxlZCAmJiBpbmhlcml0KSB7CgkJCQlub2RlLmNoa0Rpc2FibGVkID0gY2hrRGlzYWJsZWQ7CgkJCX0KCQkJdmlldy5yZXBhaXJDaGtDbGFzcyhzZXR0aW5nLCBub2RlKTsKCQkJdmlldy5yZXBhaXJQYXJlbnRDaGtEaXNhYmxlZChzZXR0aW5nLCBub2RlLmdldFBhcmVudE5vZGUoKSwgY2hrRGlzYWJsZWQsIGluaGVyaXQpOwoJCX0sCgkJc2V0Q2hrQ2xhc3M6IGZ1bmN0aW9uKHNldHRpbmcsIG9iaiwgbm9kZSkgewoJCQlpZiAoIW9iaikgcmV0dXJuOwoJCQlpZiAobm9kZS5ub2NoZWNrID09PSB0cnVlKSB7CgkJCQlvYmouaGlkZSgpOwoJCQl9IGVsc2UgewoJCQkJb2JqLnNob3coKTsKCQkJfQogICAgICAgICAgICBvYmouYXR0cignY2xhc3MnLCB2aWV3Lm1ha2VDaGtDbGFzcyhzZXR0aW5nLCBub2RlKSk7CgkJfSwKCQlzZXRQYXJlbnROb2RlQ2hlY2tCb3g6IGZ1bmN0aW9uKHNldHRpbmcsIG5vZGUsIHZhbHVlLCBzcmNOb2RlKSB7CgkJCXZhciBjaGlsZEtleSA9IHNldHRpbmcuZGF0YS5rZXkuY2hpbGRyZW4sCgkJCWNoZWNrZWRLZXkgPSBzZXR0aW5nLmRhdGEua2V5LmNoZWNrZWQsCgkJCWNoZWNrT2JqID0gJCQobm9kZSwgY29uc3RzLmlkLkNIRUNLLCBzZXR0aW5nKTsKCQkJaWYgKCFzcmNOb2RlKSBzcmNOb2RlID0gbm9kZTsKCQkJZGF0YS5tYWtlQ2hrRmxhZyhzZXR0aW5nLCBub2RlKTsKCQkJaWYgKG5vZGUubm9jaGVjayAhPT0gdHJ1ZSAmJiBub2RlLmNoa0Rpc2FibGVkICE9PSB0cnVlKSB7CgkJCQlub2RlW2NoZWNrZWRLZXldID0gdmFsdWU7CgkJCQl2aWV3LnNldENoa0NsYXNzKHNldHRpbmcsIGNoZWNrT2JqLCBub2RlKTsKCQkJCWlmIChzZXR0aW5nLmNoZWNrLmF1dG9DaGVja1RyaWdnZXIgJiYgbm9kZSAhPSBzcmNOb2RlKSB7CgkJCQkJc2V0dGluZy50cmVlT2JqLnRyaWdnZXIoY29uc3RzLmV2ZW50LkNIRUNLLCBbbnVsbCwgc2V0dGluZy50cmVlSWQsIG5vZGVdKTsKCQkJCX0KCQkJfQoJCQlpZiAobm9kZS5wYXJlbnRUSWQpIHsKCQkJCXZhciBwU2lnbiA9IHRydWU7CgkJCQlpZiAoIXZhbHVlKSB7CgkJCQkJdmFyIHBOb2RlcyA9IG5vZGUuZ2V0UGFyZW50Tm9kZSgpW2NoaWxkS2V5XTsKCQkJCQlmb3IgKHZhciBpID0gMCwgbCA9IHBOb2Rlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHsKCQkJCQkJaWYgKChwTm9kZXNbaV0ubm9jaGVjayAhPT0gdHJ1ZSAmJiBwTm9kZXNbaV0uY2hrRGlzYWJsZWQgIT09IHRydWUgJiYgcE5vZGVzW2ldW2NoZWNrZWRLZXldKQoJCQkJCQl8fCAoKHBOb2Rlc1tpXS5ub2NoZWNrID09PSB0cnVlIHx8IHBOb2Rlc1tpXS5jaGtEaXNhYmxlZCA9PT0gdHJ1ZSkgJiYgcE5vZGVzW2ldLmNoZWNrX0NoaWxkX1N0YXRlID4gMCkpIHsKCQkJCQkJCXBTaWduID0gZmFsc2U7CgkJCQkJCQlicmVhazsKCQkJCQkJfQoJCQkJCX0KCQkJCX0KCQkJCWlmIChwU2lnbikgewoJCQkJCXZpZXcuc2V0UGFyZW50Tm9kZUNoZWNrQm94KHNldHRpbmcsIG5vZGUuZ2V0UGFyZW50Tm9kZSgpLCB2YWx1ZSwgc3JjTm9kZSk7CgkJCQl9CgkJCX0KCQl9LAoJCXNldFNvbk5vZGVDaGVja0JveDogZnVuY3Rpb24oc2V0dGluZywgbm9kZSwgdmFsdWUsIHNyY05vZGUpIHsKCQkJaWYgKCFub2RlKSByZXR1cm47CgkJCXZhciBjaGlsZEtleSA9IHNldHRpbmcuZGF0YS5rZXkuY2hpbGRyZW4sCgkJCWNoZWNrZWRLZXkgPSBzZXR0aW5nLmRhdGEua2V5LmNoZWNrZWQsCgkJCWNoZWNrT2JqID0gJCQobm9kZSwgY29uc3RzLmlkLkNIRUNLLCBzZXR0aW5nKTsKCQkJaWYgKCFzcmNOb2RlKSBzcmNOb2RlID0gbm9kZTsKCgkJCXZhciBoYXNEaXNhYmxlID0gZmFsc2U7CgkJCWlmIChub2RlW2NoaWxkS2V5XSkgewoJCQkJZm9yICh2YXIgaSA9IDAsIGwgPSBub2RlW2NoaWxkS2V5XS5sZW5ndGg7IGkgPCBsOyBpKyspIHsKCQkJCQl2YXIgc05vZGUgPSBub2RlW2NoaWxkS2V5XVtpXTsKCQkJCQl2aWV3LnNldFNvbk5vZGVDaGVja0JveChzZXR0aW5nLCBzTm9kZSwgdmFsdWUsIHNyY05vZGUpOwoJCQkJCWlmIChzTm9kZS5jaGtEaXNhYmxlZCA9PT0gdHJ1ZSkgaGFzRGlzYWJsZSA9IHRydWU7CgkJCQl9CgkJCX0KCgkJCWlmIChub2RlICE9IGRhdGEuZ2V0Um9vdChzZXR0aW5nKSAmJiBub2RlLmNoa0Rpc2FibGVkICE9PSB0cnVlKSB7CgkJCQlpZiAoaGFzRGlzYWJsZSAmJiBub2RlLm5vY2hlY2sgIT09IHRydWUpIHsKCQkJCQlkYXRhLm1ha2VDaGtGbGFnKHNldHRpbmcsIG5vZGUpOwoJCQkJfQoJCQkJaWYgKG5vZGUubm9jaGVjayAhPT0gdHJ1ZSAmJiBub2RlLmNoa0Rpc2FibGVkICE9PSB0cnVlKSB7CgkJCQkJbm9kZVtjaGVja2VkS2V5XSA9IHZhbHVlOwoJCQkJCWlmICghaGFzRGlzYWJsZSkgbm9kZS5jaGVja19DaGlsZF9TdGF0ZSA9IChub2RlW2NoaWxkS2V5XSAmJiBub2RlW2NoaWxkS2V5XS5sZW5ndGggPiAwKSA/ICh2YWx1ZSA/IDIgOiAwKSA6IC0xOwoJCQkJfSBlbHNlIHsKCQkJCQlub2RlLmNoZWNrX0NoaWxkX1N0YXRlID0gLTE7CgkJCQl9CgkJCQl2aWV3LnNldENoa0NsYXNzKHNldHRpbmcsIGNoZWNrT2JqLCBub2RlKTsKCQkJCWlmIChzZXR0aW5nLmNoZWNrLmF1dG9DaGVja1RyaWdnZXIgJiYgbm9kZSAhPSBzcmNOb2RlICYmIG5vZGUubm9jaGVjayAhPT0gdHJ1ZSAmJiBub2RlLmNoa0Rpc2FibGVkICE9PSB0cnVlKSB7CgkJCQkJc2V0dGluZy50cmVlT2JqLnRyaWdnZXIoY29uc3RzLmV2ZW50LkNIRUNLLCBbbnVsbCwgc2V0dGluZy50cmVlSWQsIG5vZGVdKTsKCQkJCX0KCQkJfQoKCQl9Cgl9LAoKCV96ID0gewoJCXRvb2xzOiBfdG9vbHMsCgkJdmlldzogX3ZpZXcsCgkJZXZlbnQ6IF9ldmVudCwKCQlkYXRhOiBfZGF0YQoJfTsKCSQuZXh0ZW5kKHRydWUsICQuZm4uelRyZWUuY29uc3RzLCBfY29uc3RzKTsKCSQuZXh0ZW5kKHRydWUsICQuZm4uelRyZWUuX3osIF96KTsKCgl2YXIgenQgPSAkLmZuLnpUcmVlLAoJdG9vbHMgPSB6dC5fei50b29scywKCWNvbnN0cyA9IHp0LmNvbnN0cywKCXZpZXcgPSB6dC5fei52aWV3LAoJZGF0YSA9IHp0Ll96LmRhdGEsCglldmVudCA9IHp0Ll96LmV2ZW50LAoJJCQgPSB0b29scy4kOwoKCWRhdGEuZXhTZXR0aW5nKF9zZXR0aW5nKTsKCWRhdGEuYWRkSW5pdEJpbmQoX2JpbmRFdmVudCk7CglkYXRhLmFkZEluaXRVbkJpbmQoX3VuYmluZEV2ZW50KTsKCWRhdGEuYWRkSW5pdENhY2hlKF9pbml0Q2FjaGUpOwoJZGF0YS5hZGRJbml0Tm9kZShfaW5pdE5vZGUpOwoJZGF0YS5hZGRJbml0UHJveHkoX2V2ZW50UHJveHksIHRydWUpOwoJZGF0YS5hZGRJbml0Um9vdChfaW5pdFJvb3QpOwoJZGF0YS5hZGRCZWZvcmVBKF9iZWZvcmVBKTsKCWRhdGEuYWRkWlRyZWVUb29scyhfelRyZWVUb29scyk7CgoJdmFyIF9jcmVhdGVOb2RlcyA9IHZpZXcuY3JlYXRlTm9kZXM7Cgl2aWV3LmNyZWF0ZU5vZGVzID0gZnVuY3Rpb24oc2V0dGluZywgbGV2ZWwsIG5vZGVzLCBwYXJlbnROb2RlLCBpbmRleCkgewoJCWlmIChfY3JlYXRlTm9kZXMpIF9jcmVhdGVOb2Rlcy5hcHBseSh2aWV3LCBhcmd1bWVudHMpOwoJCWlmICghbm9kZXMpIHJldHVybjsKCQl2aWV3LnJlcGFpclBhcmVudENoa0NsYXNzV2l0aFNlbGYoc2V0dGluZywgcGFyZW50Tm9kZSk7Cgl9Cgl2YXIgX3JlbW92ZU5vZGUgPSB2aWV3LnJlbW92ZU5vZGU7Cgl2aWV3LnJlbW92ZU5vZGUgPSBmdW5jdGlvbihzZXR0aW5nLCBub2RlKSB7CgkJdmFyIHBhcmVudE5vZGUgPSBub2RlLmdldFBhcmVudE5vZGUoKTsKCQlpZiAoX3JlbW92ZU5vZGUpIF9yZW1vdmVOb2RlLmFwcGx5KHZpZXcsIGFyZ3VtZW50cyk7CgkJaWYgKCFub2RlIHx8ICFwYXJlbnROb2RlKSByZXR1cm47CgkJdmlldy5yZXBhaXJDaGtDbGFzcyhzZXR0aW5nLCBwYXJlbnROb2RlKTsKCQl2aWV3LnJlcGFpclBhcmVudENoa0NsYXNzKHNldHRpbmcsIHBhcmVudE5vZGUpOwoJfQoKCXZhciBfYXBwZW5kTm9kZXMgPSB2aWV3LmFwcGVuZE5vZGVzOwoJdmlldy5hcHBlbmROb2RlcyA9IGZ1bmN0aW9uKHNldHRpbmcsIGxldmVsLCBub2RlcywgcGFyZW50Tm9kZSwgaW5kZXgsIGluaXRGbGFnLCBvcGVuRmxhZykgewoJCXZhciBodG1sID0gIiI7CgkJaWYgKF9hcHBlbmROb2RlcykgewoJCQlodG1sID0gX2FwcGVuZE5vZGVzLmFwcGx5KHZpZXcsIGFyZ3VtZW50cyk7CgkJfQoJCWlmIChwYXJlbnROb2RlKSB7CgkJCWRhdGEubWFrZUNoa0ZsYWcoc2V0dGluZywgcGFyZW50Tm9kZSk7CgkJfQoJCXJldHVybiBodG1sOwoJfQp9KShqUXVlcnkpOwovKgogKiBKUXVlcnkgelRyZWUgZXhlZGl0IHYzLjUuMjMKICogaHR0cDovL3pUcmVlLm1lLwogKgogKiBDb3B5cmlnaHQgKGMpIDIwMTAgSHVudGVyLnoKICoKICogTGljZW5zZWQgc2FtZSBhcyBqcXVlcnkgLSBNSVQgTGljZW5zZQogKiBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocAogKgogKiBlbWFpbDogaHVudGVyLnpAMjYzLm5ldAogKiBEYXRlOiAyMDE2LTA0LTAxCiAqLwooZnVuY3Rpb24oJCl7CgkvL2RlZmF1bHQgY29uc3RzIG9mIGV4ZWRpdAoJdmFyIF9jb25zdHMgPSB7CgkJZXZlbnQ6IHsKCQkJRFJBRzogInp0cmVlX2RyYWciLAoJCQlEUk9QOiAienRyZWVfZHJvcCIsCgkJCVJFTkFNRTogInp0cmVlX3JlbmFtZSIsCgkJCURSQUdNT1ZFOiJ6dHJlZV9kcmFnbW92ZSIKCQl9LAoJCWlkOiB7CgkJCUVESVQ6ICJfZWRpdCIsCgkJCUlOUFVUOiAiX2lucHV0IiwKCQkJUkVNT1ZFOiAiX3JlbW92ZSIKCQl9LAoJCW1vdmU6IHsKCQkJVFlQRV9JTk5FUjogImlubmVyIiwKCQkJVFlQRV9QUkVWOiAicHJldiIsCgkJCVRZUEVfTkVYVDogIm5leHQiCgkJfSwKCQlub2RlOiB7CgkJCUNVUlNFTEVDVEVEX0VESVQ6ICJjdXJTZWxlY3RlZE5vZGVfRWRpdCIsCgkJCVRNUFRBUkdFVF9UUkVFOiAidG1wVGFyZ2V0elRyZWUiLAoJCQlUTVBUQVJHRVRfTk9ERTogInRtcFRhcmdldE5vZGUiCgkJfQoJfSwKCS8vZGVmYXVsdCBzZXR0aW5nIG9mIGV4ZWRpdAoJX3NldHRpbmcgPSB7CgkJZWRpdDogewoJCQllbmFibGU6IGZhbHNlLAoJCQllZGl0TmFtZVNlbGVjdEFsbDogZmFsc2UsCgkJCXNob3dSZW1vdmVCdG46IHRydWUsCgkJCXNob3dSZW5hbWVCdG46IHRydWUsCgkJCXJlbW92ZVRpdGxlOiAicmVtb3ZlIiwKCQkJcmVuYW1lVGl0bGU6ICJyZW5hbWUiLAoJCQlkcmFnOiB7CgkJCQlhdXRvRXhwYW5kVHJpZ2dlcjogZmFsc2UsCgkJCQlpc0NvcHk6IHRydWUsCgkJCQlpc01vdmU6IHRydWUsCgkJCQlwcmV2OiB0cnVlLAoJCQkJbmV4dDogdHJ1ZSwKCQkJCWlubmVyOiB0cnVlLAoJCQkJbWluTW92ZVNpemU6IDUsCgkJCQlib3JkZXJNYXg6IDEwLAoJCQkJYm9yZGVyTWluOiAtNSwKCQkJCW1heFNob3dOb2RlTnVtOiA1LAoJCQkJYXV0b09wZW5UaW1lOiA1MDAKCQkJfQoJCX0sCgkJdmlldzogewoJCQlhZGRIb3ZlckRvbTogbnVsbCwKCQkJcmVtb3ZlSG92ZXJEb206IG51bGwKCQl9LAoJCWNhbGxiYWNrOiB7CgkJCWJlZm9yZURyYWc6bnVsbCwKCQkJYmVmb3JlRHJhZ09wZW46bnVsbCwKCQkJYmVmb3JlRHJvcDpudWxsLAoJCQliZWZvcmVFZGl0TmFtZTpudWxsLAoJCQliZWZvcmVSZW5hbWU6bnVsbCwKCQkJb25EcmFnOm51bGwsCgkJCW9uRHJhZ01vdmU6bnVsbCwKCQkJb25Ecm9wOm51bGwsCgkJCW9uUmVuYW1lOm51bGwKCQl9Cgl9LAoJLy9kZWZhdWx0IHJvb3Qgb2YgZXhlZGl0CglfaW5pdFJvb3QgPSBmdW5jdGlvbiAoc2V0dGluZykgewoJCXZhciByID0gZGF0YS5nZXRSb290KHNldHRpbmcpLCBycyA9IGRhdGEuZ2V0Um9vdHMoKTsKCQlyLmN1ckVkaXROb2RlID0gbnVsbDsKCQlyLmN1ckVkaXRJbnB1dCA9IG51bGw7CgkJci5jdXJIb3Zlck5vZGUgPSBudWxsOwoJCXIuZHJhZ0ZsYWcgPSAwOwoJCXIuZHJhZ05vZGVTaG93QmVmb3JlID0gW107CgkJci5kcmFnTWFza0xpc3QgPSBuZXcgQXJyYXkoKTsKCQlycy5zaG93SG92ZXJEb20gPSB0cnVlOwoJfSwKCS8vZGVmYXVsdCBjYWNoZSBvZiBleGVkaXQKCV9pbml0Q2FjaGUgPSBmdW5jdGlvbih0cmVlSWQpIHt9LAoJLy9kZWZhdWx0IGJpbmQgZXZlbnQgb2YgZXhlZGl0CglfYmluZEV2ZW50ID0gZnVuY3Rpb24oc2V0dGluZykgewoJCXZhciBvID0gc2V0dGluZy50cmVlT2JqOwoJCXZhciBjID0gY29uc3RzLmV2ZW50OwoJCW8uYmluZChjLlJFTkFNRSwgZnVuY3Rpb24gKGV2ZW50LCB0cmVlSWQsIHRyZWVOb2RlLCBpc0NhbmNlbCkgewoJCQl0b29scy5hcHBseShzZXR0aW5nLmNhbGxiYWNrLm9uUmVuYW1lLCBbZXZlbnQsIHRyZWVJZCwgdHJlZU5vZGUsIGlzQ2FuY2VsXSk7CgkJfSk7CgoJCW8uYmluZChjLkRSQUcsIGZ1bmN0aW9uIChldmVudCwgc3JjRXZlbnQsIHRyZWVJZCwgdHJlZU5vZGVzKSB7CgkJCXRvb2xzLmFwcGx5KHNldHRpbmcuY2FsbGJhY2sub25EcmFnLCBbc3JjRXZlbnQsIHRyZWVJZCwgdHJlZU5vZGVzXSk7CgkJfSk7CgoJCW8uYmluZChjLkRSQUdNT1ZFLGZ1bmN0aW9uKGV2ZW50LCBzcmNFdmVudCwgdHJlZUlkLCB0cmVlTm9kZXMpewoJCQl0b29scy5hcHBseShzZXR0aW5nLmNhbGxiYWNrLm9uRHJhZ01vdmUsW3NyY0V2ZW50LCB0cmVlSWQsIHRyZWVOb2Rlc10pOwoJCX0pOwoKCQlvLmJpbmQoYy5EUk9QLCBmdW5jdGlvbiAoZXZlbnQsIHNyY0V2ZW50LCB0cmVlSWQsIHRyZWVOb2RlcywgdGFyZ2V0Tm9kZSwgbW92ZVR5cGUsIGlzQ29weSkgewoJCQl0b29scy5hcHBseShzZXR0aW5nLmNhbGxiYWNrLm9uRHJvcCwgW3NyY0V2ZW50LCB0cmVlSWQsIHRyZWVOb2RlcywgdGFyZ2V0Tm9kZSwgbW92ZVR5cGUsIGlzQ29weV0pOwoJCX0pOwoJfSwKCV91bmJpbmRFdmVudCA9IGZ1bmN0aW9uKHNldHRpbmcpIHsKCQl2YXIgbyA9IHNldHRpbmcudHJlZU9iajsKCQl2YXIgYyA9IGNvbnN0cy5ldmVudDsKCQlvLnVuYmluZChjLlJFTkFNRSk7CgkJby51bmJpbmQoYy5EUkFHKTsKCQlvLnVuYmluZChjLkRSQUdNT1ZFKTsKCQlvLnVuYmluZChjLkRST1ApOwoJfSwKCS8vZGVmYXVsdCBldmVudCBwcm94eSBvZiBleGVkaXQKCV9ldmVudFByb3h5ID0gZnVuY3Rpb24oZSkgewoJCXZhciB0YXJnZXQgPSBlLnRhcmdldCwKCQlzZXR0aW5nID0gZGF0YS5nZXRTZXR0aW5nKGUuZGF0YS50cmVlSWQpLAoJCXJlbGF0ZWRUYXJnZXQgPSBlLnJlbGF0ZWRUYXJnZXQsCgkJdElkID0gIiIsIG5vZGUgPSBudWxsLAoJCW5vZGVFdmVudFR5cGUgPSAiIiwgdHJlZUV2ZW50VHlwZSA9ICIiLAoJCW5vZGVFdmVudENhbGxiYWNrID0gbnVsbCwgdHJlZUV2ZW50Q2FsbGJhY2sgPSBudWxsLAoJCXRtcCA9IG51bGw7CgoJCWlmICh0b29scy5lcXMoZS50eXBlLCAibW91c2VvdmVyIikpIHsKCQkJdG1wID0gdG9vbHMuZ2V0TURvbShzZXR0aW5nLCB0YXJnZXQsIFt7dGFnTmFtZToiYSIsIGF0dHJOYW1lOiJ0cmVlTm9kZSIrY29uc3RzLmlkLkF9XSk7CgkJCWlmICh0bXApIHsKCQkJCXRJZCA9IHRvb2xzLmdldE5vZGVNYWluRG9tKHRtcCkuaWQ7CgkJCQlub2RlRXZlbnRUeXBlID0gImhvdmVyT3Zlck5vZGUiOwoJCQl9CgkJfSBlbHNlIGlmICh0b29scy5lcXMoZS50eXBlLCAibW91c2VvdXQiKSkgewoJCQl0bXAgPSB0b29scy5nZXRNRG9tKHNldHRpbmcsIHJlbGF0ZWRUYXJnZXQsIFt7dGFnTmFtZToiYSIsIGF0dHJOYW1lOiJ0cmVlTm9kZSIrY29uc3RzLmlkLkF9XSk7CgkJCWlmICghdG1wKSB7CgkJCQl0SWQgPSAicmVtb3ZlIjsKCQkJCW5vZGVFdmVudFR5cGUgPSAiaG92ZXJPdXROb2RlIjsKCQkJfQoJCX0gZWxzZSBpZiAodG9vbHMuZXFzKGUudHlwZSwgIm1vdXNlZG93biIpKSB7CgkJCXRtcCA9IHRvb2xzLmdldE1Eb20oc2V0dGluZywgdGFyZ2V0LCBbe3RhZ05hbWU6ImEiLCBhdHRyTmFtZToidHJlZU5vZGUiK2NvbnN0cy5pZC5BfV0pOwoJCQlpZiAodG1wKSB7CgkJCQl0SWQgPSB0b29scy5nZXROb2RlTWFpbkRvbSh0bXApLmlkOwoJCQkJbm9kZUV2ZW50VHlwZSA9ICJtb3VzZWRvd25Ob2RlIjsKCQkJfQoJCX0KCQlpZiAodElkLmxlbmd0aD4wKSB7CgkJCW5vZGUgPSBkYXRhLmdldE5vZGVDYWNoZShzZXR0aW5nLCB0SWQpOwoJCQlzd2l0Y2ggKG5vZGVFdmVudFR5cGUpIHsKCQkJCWNhc2UgIm1vdXNlZG93bk5vZGUiIDoKCQkJCQlub2RlRXZlbnRDYWxsYmFjayA9IF9oYW5kbGVyLm9uTW91c2Vkb3duTm9kZTsKCQkJCQlicmVhazsKCQkJCWNhc2UgImhvdmVyT3Zlck5vZGUiIDoKCQkJCQlub2RlRXZlbnRDYWxsYmFjayA9IF9oYW5kbGVyLm9uSG92ZXJPdmVyTm9kZTsKCQkJCQlicmVhazsKCQkJCWNhc2UgImhvdmVyT3V0Tm9kZSIgOgoJCQkJCW5vZGVFdmVudENhbGxiYWNrID0gX2hhbmRsZXIub25Ib3Zlck91dE5vZGU7CgkJCQkJYnJlYWs7CgkJCX0KCQl9CgkJdmFyIHByb3h5UmVzdWx0ID0gewoJCQlzdG9wOiBmYWxzZSwKCQkJbm9kZTogbm9kZSwKCQkJbm9kZUV2ZW50VHlwZTogbm9kZUV2ZW50VHlwZSwKCQkJbm9kZUV2ZW50Q2FsbGJhY2s6IG5vZGVFdmVudENhbGxiYWNrLAoJCQl0cmVlRXZlbnRUeXBlOiB0cmVlRXZlbnRUeXBlLAoJCQl0cmVlRXZlbnRDYWxsYmFjazogdHJlZUV2ZW50Q2FsbGJhY2sKCQl9OwoJCXJldHVybiBwcm94eVJlc3VsdAoJfSwKCS8vZGVmYXVsdCBpbml0IG5vZGUgb2YgZXhlZGl0CglfaW5pdE5vZGUgPSBmdW5jdGlvbihzZXR0aW5nLCBsZXZlbCwgbiwgcGFyZW50Tm9kZSwgaXNGaXJzdE5vZGUsIGlzTGFzdE5vZGUsIG9wZW5GbGFnKSB7CgkJaWYgKCFuKSByZXR1cm47CgkJbi5pc0hvdmVyID0gZmFsc2U7CgkJbi5lZGl0TmFtZUZsYWcgPSBmYWxzZTsKCX0sCgkvL3VwZGF0ZSB6VHJlZU9iaiwgYWRkIG1ldGhvZCBvZiBlZGl0CglfelRyZWVUb29scyA9IGZ1bmN0aW9uKHNldHRpbmcsIHpUcmVlVG9vbHMpIHsKCQl6VHJlZVRvb2xzLmNhbmNlbEVkaXROYW1lID0gZnVuY3Rpb24obmV3TmFtZSkgewoJCQl2YXIgcm9vdCA9IGRhdGEuZ2V0Um9vdCh0aGlzLnNldHRpbmcpOwoJCQlpZiAoIXJvb3QuY3VyRWRpdE5vZGUpIHJldHVybjsKCQkJdmlldy5jYW5jZWxDdXJFZGl0Tm9kZSh0aGlzLnNldHRpbmcsIG5ld05hbWU/bmV3TmFtZTpudWxsLCB0cnVlKTsKCQl9CgkJelRyZWVUb29scy5jb3B5Tm9kZSA9IGZ1bmN0aW9uKHRhcmdldE5vZGUsIG5vZGUsIG1vdmVUeXBlLCBpc1NpbGVudCkgewoJCQlpZiAoIW5vZGUpIHJldHVybiBudWxsOwoJCQlpZiAodGFyZ2V0Tm9kZSAmJiAhdGFyZ2V0Tm9kZS5pc1BhcmVudCAmJiB0aGlzLnNldHRpbmcuZGF0YS5rZWVwLmxlYWYgJiYgbW92ZVR5cGUgPT09IGNvbnN0cy5tb3ZlLlRZUEVfSU5ORVIpIHJldHVybiBudWxsOwoJCQl2YXIgX3RoaXMgPSB0aGlzLAoJCQkJbmV3Tm9kZSA9IHRvb2xzLmNsb25lKG5vZGUpOwoJCQlpZiAoIXRhcmdldE5vZGUpIHsKCQkJCXRhcmdldE5vZGUgPSBudWxsOwoJCQkJbW92ZVR5cGUgPSBjb25zdHMubW92ZS5UWVBFX0lOTkVSOwoJCQl9CgkJCWlmIChtb3ZlVHlwZSA9PSBjb25zdHMubW92ZS5UWVBFX0lOTkVSKSB7CgkJCQlmdW5jdGlvbiBjb3B5Q2FsbGJhY2soKSB7CgkJCQkJdmlldy5hZGROb2RlcyhfdGhpcy5zZXR0aW5nLCB0YXJnZXROb2RlLCAtMSwgW25ld05vZGVdLCBpc1NpbGVudCk7CgkJCQl9CgoJCQkJaWYgKHRvb2xzLmNhbkFzeW5jKHRoaXMuc2V0dGluZywgdGFyZ2V0Tm9kZSkpIHsKCQkJCQl2aWV3LmFzeW5jTm9kZSh0aGlzLnNldHRpbmcsIHRhcmdldE5vZGUsIGlzU2lsZW50LCBjb3B5Q2FsbGJhY2spOwoJCQkJfSBlbHNlIHsKCQkJCQljb3B5Q2FsbGJhY2soKTsKCQkJCX0KCQkJfSBlbHNlIHsKCQkJCXZpZXcuYWRkTm9kZXModGhpcy5zZXR0aW5nLCB0YXJnZXROb2RlLnBhcmVudE5vZGUsIC0xLCBbbmV3Tm9kZV0sIGlzU2lsZW50KTsKCQkJCXZpZXcubW92ZU5vZGUodGhpcy5zZXR0aW5nLCB0YXJnZXROb2RlLCBuZXdOb2RlLCBtb3ZlVHlwZSwgZmFsc2UsIGlzU2lsZW50KTsKCQkJfQoJCQlyZXR1cm4gbmV3Tm9kZTsKCQl9CgkJelRyZWVUb29scy5lZGl0TmFtZSA9IGZ1bmN0aW9uKG5vZGUpIHsKCQkJaWYgKCFub2RlIHx8ICFub2RlLnRJZCB8fCBub2RlICE9PSBkYXRhLmdldE5vZGVDYWNoZSh0aGlzLnNldHRpbmcsIG5vZGUudElkKSkgcmV0dXJuOwoJCQlpZiAobm9kZS5wYXJlbnRUSWQpIHZpZXcuZXhwYW5kQ29sbGFwc2VQYXJlbnROb2RlKHRoaXMuc2V0dGluZywgbm9kZS5nZXRQYXJlbnROb2RlKCksIHRydWUpOwoJCQl2aWV3LmVkaXROb2RlKHRoaXMuc2V0dGluZywgbm9kZSkKCQl9CgkJelRyZWVUb29scy5tb3ZlTm9kZSA9IGZ1bmN0aW9uKHRhcmdldE5vZGUsIG5vZGUsIG1vdmVUeXBlLCBpc1NpbGVudCkgewoJCQlpZiAoIW5vZGUpIHJldHVybiBub2RlOwoJCQlpZiAodGFyZ2V0Tm9kZSAmJiAhdGFyZ2V0Tm9kZS5pc1BhcmVudCAmJiB0aGlzLnNldHRpbmcuZGF0YS5rZWVwLmxlYWYgJiYgbW92ZVR5cGUgPT09IGNvbnN0cy5tb3ZlLlRZUEVfSU5ORVIpIHsKCQkJCXJldHVybiBudWxsOwoJCQl9IGVsc2UgaWYgKHRhcmdldE5vZGUgJiYgKChub2RlLnBhcmVudFRJZCA9PSB0YXJnZXROb2RlLnRJZCAmJiBtb3ZlVHlwZSA9PSBjb25zdHMubW92ZS5UWVBFX0lOTkVSKSB8fCAkJChub2RlLCB0aGlzLnNldHRpbmcpLmZpbmQoIiMiICsgdGFyZ2V0Tm9kZS50SWQpLmxlbmd0aCA+IDApKSB7CgkJCQlyZXR1cm4gbnVsbDsKCQkJfSBlbHNlIGlmICghdGFyZ2V0Tm9kZSkgewoJCQkJdGFyZ2V0Tm9kZSA9IG51bGw7CgkJCX0KCQkJdmFyIF90aGlzID0gdGhpczsKCQkJZnVuY3Rpb24gbW92ZUNhbGxiYWNrKCkgewoJCQkJdmlldy5tb3ZlTm9kZShfdGhpcy5zZXR0aW5nLCB0YXJnZXROb2RlLCBub2RlLCBtb3ZlVHlwZSwgZmFsc2UsIGlzU2lsZW50KTsKCQkJfQoJCQlpZiAodG9vbHMuY2FuQXN5bmModGhpcy5zZXR0aW5nLCB0YXJnZXROb2RlKSAmJiBtb3ZlVHlwZSA9PT0gY29uc3RzLm1vdmUuVFlQRV9JTk5FUikgewoJCQkJdmlldy5hc3luY05vZGUodGhpcy5zZXR0aW5nLCB0YXJnZXROb2RlLCBpc1NpbGVudCwgbW92ZUNhbGxiYWNrKTsKCQkJfSBlbHNlIHsKCQkJCW1vdmVDYWxsYmFjaygpOwoJCQl9CgkJCXJldHVybiBub2RlOwoJCX0KCQl6VHJlZVRvb2xzLnNldEVkaXRhYmxlID0gZnVuY3Rpb24oZWRpdGFibGUpIHsKCQkJdGhpcy5zZXR0aW5nLmVkaXQuZW5hYmxlID0gZWRpdGFibGU7CgkJCXJldHVybiB0aGlzLnJlZnJlc2goKTsKCQl9Cgl9LAoJLy9tZXRob2Qgb2Ygb3BlcmF0ZSBkYXRhCglfZGF0YSA9IHsKCQlzZXRTb25Ob2RlTGV2ZWw6IGZ1bmN0aW9uKHNldHRpbmcsIHBhcmVudE5vZGUsIG5vZGUpIHsKCQkJaWYgKCFub2RlKSByZXR1cm47CgkJCXZhciBjaGlsZEtleSA9IHNldHRpbmcuZGF0YS5rZXkuY2hpbGRyZW47CgkJCW5vZGUubGV2ZWwgPSAocGFyZW50Tm9kZSk/IHBhcmVudE5vZGUubGV2ZWwgKyAxIDogMDsKCQkJaWYgKCFub2RlW2NoaWxkS2V5XSkgcmV0dXJuOwoJCQlmb3IgKHZhciBpID0gMCwgbCA9IG5vZGVbY2hpbGRLZXldLmxlbmd0aDsgaSA8IGw7IGkrKykgewoJCQkJaWYgKG5vZGVbY2hpbGRLZXldW2ldKSBkYXRhLnNldFNvbk5vZGVMZXZlbChzZXR0aW5nLCBub2RlLCBub2RlW2NoaWxkS2V5XVtpXSk7CgkJCX0KCQl9Cgl9LAoJLy9tZXRob2Qgb2YgZXZlbnQgcHJveHkKCV9ldmVudCA9IHsKCgl9LAoJLy9tZXRob2Qgb2YgZXZlbnQgaGFuZGxlcgoJX2hhbmRsZXIgPSB7CgkJb25Ib3Zlck92ZXJOb2RlOiBmdW5jdGlvbihldmVudCwgbm9kZSkgewoJCQl2YXIgc2V0dGluZyA9IGRhdGEuZ2V0U2V0dGluZyhldmVudC5kYXRhLnRyZWVJZCksCgkJCXJvb3QgPSBkYXRhLmdldFJvb3Qoc2V0dGluZyk7CgkJCWlmIChyb290LmN1ckhvdmVyTm9kZSAhPSBub2RlKSB7CgkJCQlfaGFuZGxlci5vbkhvdmVyT3V0Tm9kZShldmVudCk7CgkJCX0KCQkJcm9vdC5jdXJIb3Zlck5vZGUgPSBub2RlOwoJCQl2aWV3LmFkZEhvdmVyRG9tKHNldHRpbmcsIG5vZGUpOwoJCX0sCgkJb25Ib3Zlck91dE5vZGU6IGZ1bmN0aW9uKGV2ZW50LCBub2RlKSB7CgkJCXZhciBzZXR0aW5nID0gZGF0YS5nZXRTZXR0aW5nKGV2ZW50LmRhdGEudHJlZUlkKSwKCQkJcm9vdCA9IGRhdGEuZ2V0Um9vdChzZXR0aW5nKTsKCQkJaWYgKHJvb3QuY3VySG92ZXJOb2RlICYmICFkYXRhLmlzU2VsZWN0ZWROb2RlKHNldHRpbmcsIHJvb3QuY3VySG92ZXJOb2RlKSkgewoJCQkJdmlldy5yZW1vdmVUcmVlRG9tKHNldHRpbmcsIHJvb3QuY3VySG92ZXJOb2RlKTsKCQkJCXJvb3QuY3VySG92ZXJOb2RlID0gbnVsbDsKCQkJfQoJCX0sCgkJb25Nb3VzZWRvd25Ob2RlOiBmdW5jdGlvbihldmVudE1vdXNlRG93biwgX25vZGUpIHsKCQkJdmFyIGksbCwKCQkJc2V0dGluZyA9IGRhdGEuZ2V0U2V0dGluZyhldmVudE1vdXNlRG93bi5kYXRhLnRyZWVJZCksCgkJCXJvb3QgPSBkYXRhLmdldFJvb3Qoc2V0dGluZyksIHJvb3RzID0gZGF0YS5nZXRSb290cygpOwoJCQkvL3JpZ2h0IGNsaWNrIGNhbid0IGRyYWcgJiBkcm9wCgkJCWlmIChldmVudE1vdXNlRG93bi5idXR0b24gPT0gMiB8fCAhc2V0dGluZy5lZGl0LmVuYWJsZSB8fCAoIXNldHRpbmcuZWRpdC5kcmFnLmlzQ29weSAmJiAhc2V0dGluZy5lZGl0LmRyYWcuaXNNb3ZlKSkgcmV0dXJuIHRydWU7CgoJCQkvL2lucHV0IG9mIGVkaXQgbm9kZSBuYW1lIGNhbid0IGRyYWcgJiBkcm9wCgkJCXZhciB0YXJnZXQgPSBldmVudE1vdXNlRG93bi50YXJnZXQsCgkJCV9ub2RlcyA9IGRhdGEuZ2V0Um9vdChzZXR0aW5nKS5jdXJTZWxlY3RlZExpc3QsCgkJCW5vZGVzID0gW107CgkJCWlmICghZGF0YS5pc1NlbGVjdGVkTm9kZShzZXR0aW5nLCBfbm9kZSkpIHsKCQkJCW5vZGVzID0gW19ub2RlXTsKCQkJfSBlbHNlIHsKCQkJCWZvciAoaT0wLCBsPV9ub2Rlcy5sZW5ndGg7IGk8bDsgaSsrKSB7CgkJCQkJaWYgKF9ub2Rlc1tpXS5lZGl0TmFtZUZsYWcgJiYgdG9vbHMuZXFzKHRhcmdldC50YWdOYW1lLCAiaW5wdXQiKSAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlKCJ0cmVlTm9kZSIrY29uc3RzLmlkLklOUFVUKSAhPT0gbnVsbCkgewoJCQkJCQlyZXR1cm4gdHJ1ZTsKCQkJCQl9CgkJCQkJbm9kZXMucHVzaChfbm9kZXNbaV0pOwoJCQkJCWlmIChub2Rlc1swXS5wYXJlbnRUSWQgIT09IF9ub2Rlc1tpXS5wYXJlbnRUSWQpIHsKCQkJCQkJbm9kZXMgPSBbX25vZGVdOwoJCQkJCQlicmVhazsKCQkJCQl9CgkJCQl9CgkJCX0KCgkJCXZpZXcuZWRpdE5vZGVCbHVyID0gdHJ1ZTsKCQkJdmlldy5jYW5jZWxDdXJFZGl0Tm9kZShzZXR0aW5nKTsKCgkJCXZhciBkb2MgPSAkKHNldHRpbmcudHJlZU9iai5nZXQoMCkub3duZXJEb2N1bWVudCksCgkJCWJvZHkgPSAkKHNldHRpbmcudHJlZU9iai5nZXQoMCkub3duZXJEb2N1bWVudC5ib2R5KSwgY3VyTm9kZSwgdG1wQXJyb3csIHRtcFRhcmdldCwKCQkJaXNPdGhlclRyZWUgPSBmYWxzZSwKCQkJdGFyZ2V0U2V0dGluZyA9IHNldHRpbmcsCgkJCXNvdXJjZVNldHRpbmcgPSBzZXR0aW5nLAoJCQlwcmVOb2RlLCBuZXh0Tm9kZSwKCQkJcHJlVG1wVGFyZ2V0Tm9kZUlkID0gbnVsbCwKCQkJcHJlVG1wTW92ZVR5cGUgPSBudWxsLAoJCQl0bXBUYXJnZXROb2RlSWQgPSBudWxsLAoJCQltb3ZlVHlwZSA9IGNvbnN0cy5tb3ZlLlRZUEVfSU5ORVIsCgkJCW1vdXNlRG93blggPSBldmVudE1vdXNlRG93bi5jbGllbnRYLAoJCQltb3VzZURvd25ZID0gZXZlbnRNb3VzZURvd24uY2xpZW50WSwKCQkJc3RhcnRUaW1lID0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKTsKCgkJCWlmICh0b29scy51Q2FuRG8oc2V0dGluZykpIHsKCQkJCWRvYy5iaW5kKCJtb3VzZW1vdmUiLCBfZG9jTW91c2VNb3ZlKTsKCQkJfQoJCQlmdW5jdGlvbiBfZG9jTW91c2VNb3ZlKGV2ZW50KSB7CgkJCQkvL2F2b2lkIHN0YXJ0IGRyYWcgYWZ0ZXIgY2xpY2sgbm9kZQoJCQkJaWYgKHJvb3QuZHJhZ0ZsYWcgPT0gMCAmJiBNYXRoLmFicyhtb3VzZURvd25YIC0gZXZlbnQuY2xpZW50WCkgPCBzZXR0aW5nLmVkaXQuZHJhZy5taW5Nb3ZlU2l6ZQoJCQkJCSYmIE1hdGguYWJzKG1vdXNlRG93blkgLSBldmVudC5jbGllbnRZKSA8IHNldHRpbmcuZWRpdC5kcmFnLm1pbk1vdmVTaXplKSB7CgkJCQkJcmV0dXJuIHRydWU7CgkJCQl9CgkJCQl2YXIgaSwgbCwgdG1wTm9kZSwgdG1wRG9tLCB0bXBOb2RlcywKCQkJCWNoaWxkS2V5ID0gc2V0dGluZy5kYXRhLmtleS5jaGlsZHJlbjsKCQkJCWJvZHkuY3NzKCJjdXJzb3IiLCAicG9pbnRlciIpOwoKCQkJCWlmIChyb290LmRyYWdGbGFnID09IDApIHsKCQkJCQlpZiAodG9vbHMuYXBwbHkoc2V0dGluZy5jYWxsYmFjay5iZWZvcmVEcmFnLCBbc2V0dGluZy50cmVlSWQsIG5vZGVzXSwgdHJ1ZSkgPT0gZmFsc2UpIHsKCQkJCQkJX2RvY01vdXNlVXAoZXZlbnQpOwoJCQkJCQlyZXR1cm4gdHJ1ZTsKCQkJCQl9CgoJCQkJCWZvciAoaT0wLCBsPW5vZGVzLmxlbmd0aDsgaTxsOyBpKyspIHsKCQkJCQkJaWYgKGk9PTApIHsKCQkJCQkJCXJvb3QuZHJhZ05vZGVTaG93QmVmb3JlID0gW107CgkJCQkJCX0KCQkJCQkJdG1wTm9kZSA9IG5vZGVzW2ldOwoJCQkJCQlpZiAodG1wTm9kZS5pc1BhcmVudCAmJiB0bXBOb2RlLm9wZW4pIHsKCQkJCQkJCXZpZXcuZXhwYW5kQ29sbGFwc2VOb2RlKHNldHRpbmcsIHRtcE5vZGUsICF0bXBOb2RlLm9wZW4pOwoJCQkJCQkJcm9vdC5kcmFnTm9kZVNob3dCZWZvcmVbdG1wTm9kZS50SWRdID0gdHJ1ZTsKCQkJCQkJfSBlbHNlIHsKCQkJCQkJCXJvb3QuZHJhZ05vZGVTaG93QmVmb3JlW3RtcE5vZGUudElkXSA9IGZhbHNlOwoJCQkJCQl9CgkJCQkJfQoKCQkJCQlyb290LmRyYWdGbGFnID0gMTsKCQkJCQlyb290cy5zaG93SG92ZXJEb20gPSBmYWxzZTsKCQkJCQl0b29scy5zaG93SWZhbWVNYXNrKHNldHRpbmcsIHRydWUpOwoKCQkJCQkvL3NvcnQKCQkJCQl2YXIgaXNPcmRlciA9IHRydWUsIGxhc3RJbmRleCA9IC0xOwoJCQkJCWlmIChub2Rlcy5sZW5ndGg+MSkgewoJCQkJCQl2YXIgcE5vZGVzID0gbm9kZXNbMF0ucGFyZW50VElkID8gbm9kZXNbMF0uZ2V0UGFyZW50Tm9kZSgpW2NoaWxkS2V5XSA6IGRhdGEuZ2V0Tm9kZXMoc2V0dGluZyk7CgkJCQkJCXRtcE5vZGVzID0gW107CgkJCQkJCWZvciAoaT0wLCBsPXBOb2Rlcy5sZW5ndGg7IGk8bDsgaSsrKSB7CgkJCQkJCQlpZiAocm9vdC5kcmFnTm9kZVNob3dCZWZvcmVbcE5vZGVzW2ldLnRJZF0gIT09IHVuZGVmaW5lZCkgewoJCQkJCQkJCWlmIChpc09yZGVyICYmIGxhc3RJbmRleCA+IC0xICYmIChsYXN0SW5kZXgrMSkgIT09IGkpIHsKCQkJCQkJCQkJaXNPcmRlciA9IGZhbHNlOwoJCQkJCQkJCX0KCQkJCQkJCQl0bXBOb2Rlcy5wdXNoKHBOb2Rlc1tpXSk7CgkJCQkJCQkJbGFzdEluZGV4ID0gaTsKCQkJCQkJCX0KCQkJCQkJCWlmIChub2Rlcy5sZW5ndGggPT09IHRtcE5vZGVzLmxlbmd0aCkgewoJCQkJCQkJCW5vZGVzID0gdG1wTm9kZXM7CgkJCQkJCQkJYnJlYWs7CgkJCQkJCQl9CgkJCQkJCX0KCQkJCQl9CgkJCQkJaWYgKGlzT3JkZXIpIHsKCQkJCQkJcHJlTm9kZSA9IG5vZGVzWzBdLmdldFByZU5vZGUoKTsKCQkJCQkJbmV4dE5vZGUgPSBub2Rlc1tub2Rlcy5sZW5ndGgtMV0uZ2V0TmV4dE5vZGUoKTsKCQkJCQl9CgoJCQkJCS8vc2V0IG5vZGUgaW4gc2VsZWN0ZWQKCQkJCQljdXJOb2RlID0gJCQoIjx1bCBjbGFzcz0nelRyZWVEcmFnVUwnPjwvdWw+Iiwgc2V0dGluZyk7CgkJCQkJZm9yIChpPTAsIGw9bm9kZXMubGVuZ3RoOyBpPGw7IGkrKykgewoJCQkJCQl0bXBOb2RlID0gbm9kZXNbaV07CgkJCQkJCXRtcE5vZGUuZWRpdE5hbWVGbGFnID0gZmFsc2U7CgkJCQkJCXZpZXcuc2VsZWN0Tm9kZShzZXR0aW5nLCB0bXBOb2RlLCBpPjApOwoJCQkJCQl2aWV3LnJlbW92ZVRyZWVEb20oc2V0dGluZywgdG1wTm9kZSk7CgoJCQkJCQlpZiAoaSA+IHNldHRpbmcuZWRpdC5kcmFnLm1heFNob3dOb2RlTnVtLTEpIHsKCQkJCQkJCWNvbnRpbnVlOwoJCQkJCQl9CgoJCQkJCQl0bXBEb20gPSAkJCgiPGxpIGlkPSciKyB0bXBOb2RlLnRJZCArIl90bXAnPjwvbGk+Iiwgc2V0dGluZyk7CgkJCQkJCXRtcERvbS5hcHBlbmQoJCQodG1wTm9kZSwgY29uc3RzLmlkLkEsIHNldHRpbmcpLmNsb25lKCkpOwoJCQkJCQl0bXBEb20uY3NzKCJwYWRkaW5nIiwgIjAiKTsKCQkJCQkJdG1wRG9tLmNoaWxkcmVuKCIjIiArIHRtcE5vZGUudElkICsgY29uc3RzLmlkLkEpLnJlbW92ZUNsYXNzKGNvbnN0cy5ub2RlLkNVUlNFTEVDVEVEKTsKCQkJCQkJY3VyTm9kZS5hcHBlbmQodG1wRG9tKTsKCQkJCQkJaWYgKGkgPT0gc2V0dGluZy5lZGl0LmRyYWcubWF4U2hvd05vZGVOdW0tMSkgewoJCQkJCQkJdG1wRG9tID0gJCQoIjxsaSBpZD0nIisgdG1wTm9kZS50SWQgKyJfbW9yZXRtcCc+PGE+ICAuLi4gIDwvYT48L2xpPiIsIHNldHRpbmcpOwoJCQkJCQkJY3VyTm9kZS5hcHBlbmQodG1wRG9tKTsKCQkJCQkJfQoJCQkJCX0KCQkJCQljdXJOb2RlLmF0dHIoImlkIiwgbm9kZXNbMF0udElkICsgY29uc3RzLmlkLlVMICsgIl90bXAiKTsKCQkJCQljdXJOb2RlLmFkZENsYXNzKHNldHRpbmcudHJlZU9iai5hdHRyKCJjbGFzcyIpKTsKCQkJCQljdXJOb2RlLmFwcGVuZFRvKGJvZHkpOwoKCQkJCQl0bXBBcnJvdyA9ICQkKCI8c3BhbiBjbGFzcz0ndG1welRyZWVNb3ZlX2Fycm93Jz48L3NwYW4+Iiwgc2V0dGluZyk7CgkJCQkJdG1wQXJyb3cuYXR0cigiaWQiLCAielRyZWVNb3ZlX2Fycm93X3RtcCIpOwoJCQkJCXRtcEFycm93LmFwcGVuZFRvKGJvZHkpOwoKCQkJCQlzZXR0aW5nLnRyZWVPYmoudHJpZ2dlcihjb25zdHMuZXZlbnQuRFJBRywgW2V2ZW50LCBzZXR0aW5nLnRyZWVJZCwgbm9kZXNdKTsKCQkJCX0KCgkJCQlpZiAocm9vdC5kcmFnRmxhZyA9PSAxKSB7CgkJCQkJaWYgKHRtcFRhcmdldCAmJiB0bXBBcnJvdy5hdHRyKCJpZCIpID09IGV2ZW50LnRhcmdldC5pZCAmJiB0bXBUYXJnZXROb2RlSWQgJiYgKGV2ZW50LmNsaWVudFggKyBkb2Muc2Nyb2xsTGVmdCgpKzIpID4gKCQoIiMiICsgdG1wVGFyZ2V0Tm9kZUlkICsgY29uc3RzLmlkLkEsIHRtcFRhcmdldCkub2Zmc2V0KCkubGVmdCkpIHsKCQkJCQkJdmFyIHhUID0gJCgiIyIgKyB0bXBUYXJnZXROb2RlSWQgKyBjb25zdHMuaWQuQSwgdG1wVGFyZ2V0KTsKCQkJCQkJZXZlbnQudGFyZ2V0ID0gKHhULmxlbmd0aCA+IDApID8geFQuZ2V0KDApIDogZXZlbnQudGFyZ2V0OwoJCQkJCX0gZWxzZSBpZiAodG1wVGFyZ2V0KSB7CgkJCQkJCXRtcFRhcmdldC5yZW1vdmVDbGFzcyhjb25zdHMubm9kZS5UTVBUQVJHRVRfVFJFRSk7CgkJCQkJCWlmICh0bXBUYXJnZXROb2RlSWQpICQoIiMiICsgdG1wVGFyZ2V0Tm9kZUlkICsgY29uc3RzLmlkLkEsIHRtcFRhcmdldCkucmVtb3ZlQ2xhc3MoY29uc3RzLm5vZGUuVE1QVEFSR0VUX05PREUgKyAiXyIgKyBjb25zdHMubW92ZS5UWVBFX1BSRVYpCgkJCQkJCQkucmVtb3ZlQ2xhc3MoY29uc3RzLm5vZGUuVE1QVEFSR0VUX05PREUgKyAiXyIgKyBfY29uc3RzLm1vdmUuVFlQRV9ORVhUKS5yZW1vdmVDbGFzcyhjb25zdHMubm9kZS5UTVBUQVJHRVRfTk9ERSArICJfIiArIF9jb25zdHMubW92ZS5UWVBFX0lOTkVSKTsKCQkJCQl9CgkJCQkJdG1wVGFyZ2V0ID0gbnVsbDsKCQkJCQl0bXBUYXJnZXROb2RlSWQgPSBudWxsOwoKCQkJCQkvL2p1ZGdlIGRyYWcgJiBkcm9wIGluIG11bHRpIHp0cmVlCgkJCQkJaXNPdGhlclRyZWUgPSBmYWxzZTsKCQkJCQl0YXJnZXRTZXR0aW5nID0gc2V0dGluZzsKCQkJCQl2YXIgc2V0dGluZ3MgPSBkYXRhLmdldFNldHRpbmdzKCk7CgkJCQkJZm9yICh2YXIgcyBpbiBzZXR0aW5ncykgewoJCQkJCQlpZiAoc2V0dGluZ3Nbc10udHJlZUlkICYmIHNldHRpbmdzW3NdLmVkaXQuZW5hYmxlICYmIHNldHRpbmdzW3NdLnRyZWVJZCAhPSBzZXR0aW5nLnRyZWVJZAoJCQkJCQkJJiYgKGV2ZW50LnRhcmdldC5pZCA9PSBzZXR0aW5nc1tzXS50cmVlSWQgfHwgJChldmVudC50YXJnZXQpLnBhcmVudHMoIiMiICsgc2V0dGluZ3Nbc10udHJlZUlkKS5sZW5ndGg+MCkpIHsKCQkJCQkJCWlzT3RoZXJUcmVlID0gdHJ1ZTsKCQkJCQkJCXRhcmdldFNldHRpbmcgPSBzZXR0aW5nc1tzXTsKCQkJCQkJfQoJCQkJCX0KCgkJCQkJdmFyIGRvY1Njcm9sbFRvcCA9IGRvYy5zY3JvbGxUb3AoKSwKCQkJCQlkb2NTY3JvbGxMZWZ0ID0gZG9jLnNjcm9sbExlZnQoKSwKCQkJCQl0cmVlT2Zmc2V0ID0gdGFyZ2V0U2V0dGluZy50cmVlT2JqLm9mZnNldCgpLAoJCQkJCXNjcm9sbEhlaWdodCA9IHRhcmdldFNldHRpbmcudHJlZU9iai5nZXQoMCkuc2Nyb2xsSGVpZ2h0LAoJCQkJCXNjcm9sbFdpZHRoID0gdGFyZ2V0U2V0dGluZy50cmVlT2JqLmdldCgwKS5zY3JvbGxXaWR0aCwKCQkJCQlkVG9wID0gKGV2ZW50LmNsaWVudFkgKyBkb2NTY3JvbGxUb3AgLSB0cmVlT2Zmc2V0LnRvcCksCgkJCQkJZEJvdHRvbSA9ICh0YXJnZXRTZXR0aW5nLnRyZWVPYmouaGVpZ2h0KCkgKyB0cmVlT2Zmc2V0LnRvcCAtIGV2ZW50LmNsaWVudFkgLSBkb2NTY3JvbGxUb3ApLAoJCQkJCWRMZWZ0ID0gKGV2ZW50LmNsaWVudFggKyBkb2NTY3JvbGxMZWZ0IC0gdHJlZU9mZnNldC5sZWZ0KSwKCQkJCQlkUmlnaHQgPSAodGFyZ2V0U2V0dGluZy50cmVlT2JqLndpZHRoKCkgKyB0cmVlT2Zmc2V0LmxlZnQgLSBldmVudC5jbGllbnRYIC0gZG9jU2Nyb2xsTGVmdCksCgkJCQkJaXNUb3AgPSAoZFRvcCA8IHNldHRpbmcuZWRpdC5kcmFnLmJvcmRlck1heCAmJiBkVG9wID4gc2V0dGluZy5lZGl0LmRyYWcuYm9yZGVyTWluKSwKCQkJCQlpc0JvdHRvbSA9IChkQm90dG9tIDwgc2V0dGluZy5lZGl0LmRyYWcuYm9yZGVyTWF4ICYmIGRCb3R0b20gPiBzZXR0aW5nLmVkaXQuZHJhZy5ib3JkZXJNaW4pLAoJCQkJCWlzTGVmdCA9IChkTGVmdCA8IHNldHRpbmcuZWRpdC5kcmFnLmJvcmRlck1heCAmJiBkTGVmdCA+IHNldHRpbmcuZWRpdC5kcmFnLmJvcmRlck1pbiksCgkJCQkJaXNSaWdodCA9IChkUmlnaHQgPCBzZXR0aW5nLmVkaXQuZHJhZy5ib3JkZXJNYXggJiYgZFJpZ2h0ID4gc2V0dGluZy5lZGl0LmRyYWcuYm9yZGVyTWluKSwKCQkJCQlpc1RyZWVJbm5lciA9IGRUb3AgPiBzZXR0aW5nLmVkaXQuZHJhZy5ib3JkZXJNaW4gJiYgZEJvdHRvbSA+IHNldHRpbmcuZWRpdC5kcmFnLmJvcmRlck1pbiAmJiBkTGVmdCA+IHNldHRpbmcuZWRpdC5kcmFnLmJvcmRlck1pbiAmJiBkUmlnaHQgPiBzZXR0aW5nLmVkaXQuZHJhZy5ib3JkZXJNaW4sCgkJCQkJaXNUcmVlVG9wID0gKGlzVG9wICYmIHRhcmdldFNldHRpbmcudHJlZU9iai5zY3JvbGxUb3AoKSA8PSAwKSwKCQkJCQlpc1RyZWVCb3R0b20gPSAoaXNCb3R0b20gJiYgKHRhcmdldFNldHRpbmcudHJlZU9iai5zY3JvbGxUb3AoKSArIHRhcmdldFNldHRpbmcudHJlZU9iai5oZWlnaHQoKSsxMCkgPj0gc2Nyb2xsSGVpZ2h0KSwKCQkJCQlpc1RyZWVMZWZ0ID0gKGlzTGVmdCAmJiB0YXJnZXRTZXR0aW5nLnRyZWVPYmouc2Nyb2xsTGVmdCgpIDw9IDApLAoJCQkJCWlzVHJlZVJpZ2h0ID0gKGlzUmlnaHQgJiYgKHRhcmdldFNldHRpbmcudHJlZU9iai5zY3JvbGxMZWZ0KCkgKyB0YXJnZXRTZXR0aW5nLnRyZWVPYmoud2lkdGgoKSsxMCkgPj0gc2Nyb2xsV2lkdGgpOwoKCQkJCQlpZiAoZXZlbnQudGFyZ2V0ICYmIHRvb2xzLmlzQ2hpbGRPclNlbGYoZXZlbnQudGFyZ2V0LCB0YXJnZXRTZXR0aW5nLnRyZWVJZCkpIHsKCQkJCQkJLy9nZXQgbm9kZSA8bGk+IGRvbQoJCQkJCQl2YXIgdGFyZ2V0T2JqID0gZXZlbnQudGFyZ2V0OwoJCQkJCQl3aGlsZSAodGFyZ2V0T2JqICYmIHRhcmdldE9iai50YWdOYW1lICYmICF0b29scy5lcXModGFyZ2V0T2JqLnRhZ05hbWUsICJsaSIpICYmIHRhcmdldE9iai5pZCAhPSB0YXJnZXRTZXR0aW5nLnRyZWVJZCkgewoJCQkJCQkJdGFyZ2V0T2JqID0gdGFyZ2V0T2JqLnBhcmVudE5vZGU7CgkJCQkJCX0KCgkJCQkJCXZhciBjYW5Nb3ZlID0gdHJ1ZTsKCQkJCQkJLy9kb24ndCBtb3ZlIHRvIHNlbGYgb3IgY2hpbGRyZW4gb2Ygc2VsZgoJCQkJCQlmb3IgKGk9MCwgbD1ub2Rlcy5sZW5ndGg7IGk8bDsgaSsrKSB7CgkJCQkJCQl0bXBOb2RlID0gbm9kZXNbaV07CgkJCQkJCQlpZiAodGFyZ2V0T2JqLmlkID09PSB0bXBOb2RlLnRJZCkgewoJCQkJCQkJCWNhbk1vdmUgPSBmYWxzZTsKCQkJCQkJCQlicmVhazsKCQkJCQkJCX0gZWxzZSBpZiAoJCQodG1wTm9kZSwgc2V0dGluZykuZmluZCgiIyIgKyB0YXJnZXRPYmouaWQpLmxlbmd0aCA+IDApIHsKCQkJCQkJCQljYW5Nb3ZlID0gZmFsc2U7CgkJCQkJCQkJYnJlYWs7CgkJCQkJCQl9CgkJCQkJCX0KCQkJCQkJaWYgKGNhbk1vdmUgJiYgZXZlbnQudGFyZ2V0ICYmIHRvb2xzLmlzQ2hpbGRPclNlbGYoZXZlbnQudGFyZ2V0LCB0YXJnZXRPYmouaWQgKyBjb25zdHMuaWQuQSkpIHsKCQkJCQkJCXRtcFRhcmdldCA9ICQodGFyZ2V0T2JqKTsKCQkJCQkJCXRtcFRhcmdldE5vZGVJZCA9IHRhcmdldE9iai5pZDsKCQkJCQkJfQoJCQkJCX0KCgkJCQkJLy90aGUgbW91c2UgbXVzdCBiZSBpbiB6VHJlZQoJCQkJCXRtcE5vZGUgPSBub2Rlc1swXTsKCQkJCQlpZiAoaXNUcmVlSW5uZXIgJiYgdG9vbHMuaXNDaGlsZE9yU2VsZihldmVudC50YXJnZXQsIHRhcmdldFNldHRpbmcudHJlZUlkKSkgewoJCQkJCQkvL2p1ZGdlIG1vdXNlIG1vdmUgaW4gcm9vdCBvZiB6dHJlZQoJCQkJCQlpZiAoIXRtcFRhcmdldCAmJiAoZXZlbnQudGFyZ2V0LmlkID09IHRhcmdldFNldHRpbmcudHJlZUlkIHx8IGlzVHJlZVRvcCB8fCBpc1RyZWVCb3R0b20gfHwgaXNUcmVlTGVmdCB8fCBpc1RyZWVSaWdodCkgJiYgKGlzT3RoZXJUcmVlIHx8ICghaXNPdGhlclRyZWUgJiYgdG1wTm9kZS5wYXJlbnRUSWQpKSkgewoJCQkJCQkJdG1wVGFyZ2V0ID0gdGFyZ2V0U2V0dGluZy50cmVlT2JqOwoJCQkJCQl9CgkJCQkJCS8vYXV0byBzY3JvbGwgdG9wCgkJCQkJCWlmIChpc1RvcCkgewoJCQkJCQkJdGFyZ2V0U2V0dGluZy50cmVlT2JqLnNjcm9sbFRvcCh0YXJnZXRTZXR0aW5nLnRyZWVPYmouc2Nyb2xsVG9wKCktMTApOwoJCQkJCQl9IGVsc2UgaWYgKGlzQm90dG9tKSAgewoJCQkJCQkJdGFyZ2V0U2V0dGluZy50cmVlT2JqLnNjcm9sbFRvcCh0YXJnZXRTZXR0aW5nLnRyZWVPYmouc2Nyb2xsVG9wKCkrMTApOwoJCQkJCQl9CgkJCQkJCWlmIChpc0xlZnQpIHsKCQkJCQkJCXRhcmdldFNldHRpbmcudHJlZU9iai5zY3JvbGxMZWZ0KHRhcmdldFNldHRpbmcudHJlZU9iai5zY3JvbGxMZWZ0KCktMTApOwoJCQkJCQl9IGVsc2UgaWYgKGlzUmlnaHQpIHsKCQkJCQkJCXRhcmdldFNldHRpbmcudHJlZU9iai5zY3JvbGxMZWZ0KHRhcmdldFNldHRpbmcudHJlZU9iai5zY3JvbGxMZWZ0KCkrMTApOwoJCQkJCQl9CgkJCQkJCS8vYXV0byBzY3JvbGwgbGVmdAoJCQkJCQlpZiAodG1wVGFyZ2V0ICYmIHRtcFRhcmdldCAhPSB0YXJnZXRTZXR0aW5nLnRyZWVPYmogJiYgdG1wVGFyZ2V0Lm9mZnNldCgpLmxlZnQgPCB0YXJnZXRTZXR0aW5nLnRyZWVPYmoub2Zmc2V0KCkubGVmdCkgewoJCQkJCQkJdGFyZ2V0U2V0dGluZy50cmVlT2JqLnNjcm9sbExlZnQodGFyZ2V0U2V0dGluZy50cmVlT2JqLnNjcm9sbExlZnQoKSsgdG1wVGFyZ2V0Lm9mZnNldCgpLmxlZnQgLSB0YXJnZXRTZXR0aW5nLnRyZWVPYmoub2Zmc2V0KCkubGVmdCk7CgkJCQkJCX0KCQkJCQl9CgoJCQkJCWN1ck5vZGUuY3NzKHsKCQkJCQkJInRvcCI6IChldmVudC5jbGllbnRZICsgZG9jU2Nyb2xsVG9wICsgMykgKyAicHgiLAoJCQkJCQkibGVmdCI6IChldmVudC5jbGllbnRYICsgZG9jU2Nyb2xsTGVmdCArIDMpICsgInB4IgoJCQkJCX0pOwoKCQkJCQl2YXIgZFggPSAwOwoJCQkJCXZhciBkWSA9IDA7CgkJCQkJaWYgKHRtcFRhcmdldCAmJiB0bXBUYXJnZXQuYXR0cigiaWQiKSE9dGFyZ2V0U2V0dGluZy50cmVlSWQpIHsKCQkJCQkJdmFyIHRtcFRhcmdldE5vZGUgPSB0bXBUYXJnZXROb2RlSWQgPT0gbnVsbCA/IG51bGw6IGRhdGEuZ2V0Tm9kZUNhY2hlKHRhcmdldFNldHRpbmcsIHRtcFRhcmdldE5vZGVJZCksCgkJCQkJCQlpc0NvcHkgPSAoKGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleSkgJiYgc2V0dGluZy5lZGl0LmRyYWcuaXNNb3ZlICYmIHNldHRpbmcuZWRpdC5kcmFnLmlzQ29weSkgfHwgKCFzZXR0aW5nLmVkaXQuZHJhZy5pc01vdmUgJiYgc2V0dGluZy5lZGl0LmRyYWcuaXNDb3B5KSwKCQkJCQkJCWlzUHJldiA9ICEhKHByZU5vZGUgJiYgdG1wVGFyZ2V0Tm9kZUlkID09PSBwcmVOb2RlLnRJZCksCgkJCQkJCQlpc05leHQgPSAhIShuZXh0Tm9kZSAmJiB0bXBUYXJnZXROb2RlSWQgPT09IG5leHROb2RlLnRJZCksCgkJCQkJCQlpc0lubmVyID0gKHRtcE5vZGUucGFyZW50VElkICYmIHRtcE5vZGUucGFyZW50VElkID09IHRtcFRhcmdldE5vZGVJZCksCgkJCQkJCQljYW5QcmV2ID0gKGlzQ29weSB8fCAhaXNOZXh0KSAmJiB0b29scy5hcHBseSh0YXJnZXRTZXR0aW5nLmVkaXQuZHJhZy5wcmV2LCBbdGFyZ2V0U2V0dGluZy50cmVlSWQsIG5vZGVzLCB0bXBUYXJnZXROb2RlXSwgISF0YXJnZXRTZXR0aW5nLmVkaXQuZHJhZy5wcmV2KSwKCQkJCQkJCWNhbk5leHQgPSAoaXNDb3B5IHx8ICFpc1ByZXYpICYmIHRvb2xzLmFwcGx5KHRhcmdldFNldHRpbmcuZWRpdC5kcmFnLm5leHQsIFt0YXJnZXRTZXR0aW5nLnRyZWVJZCwgbm9kZXMsIHRtcFRhcmdldE5vZGVdLCAhIXRhcmdldFNldHRpbmcuZWRpdC5kcmFnLm5leHQpLAoJCQkJCQkJY2FuSW5uZXIgPSAoaXNDb3B5IHx8ICFpc0lubmVyKSAmJiAhKHRhcmdldFNldHRpbmcuZGF0YS5rZWVwLmxlYWYgJiYgIXRtcFRhcmdldE5vZGUuaXNQYXJlbnQpICYmIHRvb2xzLmFwcGx5KHRhcmdldFNldHRpbmcuZWRpdC5kcmFnLmlubmVyLCBbdGFyZ2V0U2V0dGluZy50cmVlSWQsIG5vZGVzLCB0bXBUYXJnZXROb2RlXSwgISF0YXJnZXRTZXR0aW5nLmVkaXQuZHJhZy5pbm5lcik7CgoJCQkJCQlmdW5jdGlvbiBjbGVhck1vdmUoKSB7CgkJCQkJCQl0bXBUYXJnZXQgPSBudWxsOwoJCQkJCQkJdG1wVGFyZ2V0Tm9kZUlkID0gIiI7CgkJCQkJCQltb3ZlVHlwZSA9IGNvbnN0cy5tb3ZlLlRZUEVfSU5ORVI7CgkJCQkJCQl0bXBBcnJvdy5jc3MoewoJCQkJCQkJCSJkaXNwbGF5Ijoibm9uZSIKCQkJCQkJCX0pOwoJCQkJCQkJaWYgKHdpbmRvdy56VHJlZU1vdmVUaW1lcikgewoJCQkJCQkJCWNsZWFyVGltZW91dCh3aW5kb3cuelRyZWVNb3ZlVGltZXIpOwoJCQkJCQkJCXdpbmRvdy56VHJlZU1vdmVUYXJnZXROb2RlVElkID0gbnVsbAoJCQkJCQkJfQoJCQkJCQl9CgkJCQkJCWlmICghY2FuUHJldiAmJiAhY2FuTmV4dCAmJiAhY2FuSW5uZXIpIHsKCQkJCQkJCWNsZWFyTW92ZSgpOwoJCQkJCQl9IGVsc2UgewoJCQkJCQkJdmFyIHRtcFRhcmdldEEgPSAkKCIjIiArIHRtcFRhcmdldE5vZGVJZCArIGNvbnN0cy5pZC5BLCB0bXBUYXJnZXQpLAoJCQkJCQkJCXRtcE5leHRBID0gdG1wVGFyZ2V0Tm9kZS5pc0xhc3ROb2RlID8gbnVsbCA6ICQoIiMiICsgdG1wVGFyZ2V0Tm9kZS5nZXROZXh0Tm9kZSgpLnRJZCArIGNvbnN0cy5pZC5BLCB0bXBUYXJnZXQubmV4dCgpKSwKCQkJCQkJCQl0bXBUb3AgPSB0bXBUYXJnZXRBLm9mZnNldCgpLnRvcCwKCQkJCQkJCQl0bXBMZWZ0ID0gdG1wVGFyZ2V0QS5vZmZzZXQoKS5sZWZ0LAoJCQkJCQkJCXByZXZQZXJjZW50ID0gY2FuUHJldiA/IChjYW5Jbm5lciA/IDAuMjUgOiAoY2FuTmV4dCA/IDAuNSA6IDEpICkgOiAtMSwKCQkJCQkJCQluZXh0UGVyY2VudCA9IGNhbk5leHQgPyAoY2FuSW5uZXIgPyAwLjc1IDogKGNhblByZXYgPyAwLjUgOiAwKSApIDogLTEsCgkJCQkJCQkJZFlfcGVyY2VudCA9IChldmVudC5jbGllbnRZICsgZG9jU2Nyb2xsVG9wIC0gdG1wVG9wKS90bXBUYXJnZXRBLmhlaWdodCgpOwoKCQkJCQkJCWlmICgocHJldlBlcmNlbnQ9PTEgfHwgZFlfcGVyY2VudDw9cHJldlBlcmNlbnQgJiYgZFlfcGVyY2VudD49LS4yKSAmJiBjYW5QcmV2KSB7CgkJCQkJCQkJZFggPSAxIC0gdG1wQXJyb3cud2lkdGgoKTsKCQkJCQkJCQlkWSA9IHRtcFRvcCAtIHRtcEFycm93LmhlaWdodCgpLzI7CgkJCQkJCQkJbW92ZVR5cGUgPSBjb25zdHMubW92ZS5UWVBFX1BSRVY7CgkJCQkJCQl9IGVsc2UgaWYgKChuZXh0UGVyY2VudD09MCB8fCBkWV9wZXJjZW50Pj1uZXh0UGVyY2VudCAmJiBkWV9wZXJjZW50PD0xLjIpICYmIGNhbk5leHQpIHsKCQkJCQkJCQlkWCA9IDEgLSB0bXBBcnJvdy53aWR0aCgpOwoJCQkJCQkJCWRZID0gKHRtcE5leHRBID09IG51bGwgfHwgKHRtcFRhcmdldE5vZGUuaXNQYXJlbnQgJiYgdG1wVGFyZ2V0Tm9kZS5vcGVuKSkgPyAodG1wVG9wICsgdG1wVGFyZ2V0QS5oZWlnaHQoKSAtIHRtcEFycm93LmhlaWdodCgpLzIpIDogKHRtcE5leHRBLm9mZnNldCgpLnRvcCAtIHRtcEFycm93LmhlaWdodCgpLzIpOwoJCQkJCQkJCW1vdmVUeXBlID0gY29uc3RzLm1vdmUuVFlQRV9ORVhUOwoJCQkJCQkJfSBlbHNlIGlmIChjYW5Jbm5lcikgewoJCQkJCQkJCWRYID0gNSAtIHRtcEFycm93LndpZHRoKCk7CgkJCQkJCQkJZFkgPSB0bXBUb3A7CgkJCQkJCQkJbW92ZVR5cGUgPSBjb25zdHMubW92ZS5UWVBFX0lOTkVSOwoJCQkJCQkJfSBlbHNlIHsKCQkJCQkJCQljbGVhck1vdmUoKTsKCQkJCQkJCX0KCgkJCQkJCQlpZiAodG1wVGFyZ2V0KSB7CgkJCQkJCQkJdG1wQXJyb3cuY3NzKHsKCQkJCQkJCQkJImRpc3BsYXkiOiJibG9jayIsCgkJCQkJCQkJCSJ0b3AiOiBkWSArICJweCIsCgkJCQkJCQkJCSJsZWZ0IjogKHRtcExlZnQgKyBkWCkgKyAicHgiCgkJCQkJCQkJfSk7CgkJCQkJCQkJdG1wVGFyZ2V0QS5hZGRDbGFzcyhjb25zdHMubm9kZS5UTVBUQVJHRVRfTk9ERSArICJfIiArIG1vdmVUeXBlKTsKCgkJCQkJCQkJaWYgKHByZVRtcFRhcmdldE5vZGVJZCAhPSB0bXBUYXJnZXROb2RlSWQgfHwgcHJlVG1wTW92ZVR5cGUgIT0gbW92ZVR5cGUpIHsKCQkJCQkJCQkJc3RhcnRUaW1lID0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKTsKCQkJCQkJCQl9CgkJCQkJCQkJaWYgKHRtcFRhcmdldE5vZGUgJiYgdG1wVGFyZ2V0Tm9kZS5pc1BhcmVudCAmJiBtb3ZlVHlwZSA9PSBjb25zdHMubW92ZS5UWVBFX0lOTkVSKSB7CgkJCQkJCQkJCXZhciBzdGFydFRpbWVyID0gdHJ1ZTsKCQkJCQkJCQkJaWYgKHdpbmRvdy56VHJlZU1vdmVUaW1lciAmJiB3aW5kb3cuelRyZWVNb3ZlVGFyZ2V0Tm9kZVRJZCAhPT0gdG1wVGFyZ2V0Tm9kZS50SWQpIHsKCQkJCQkJCQkJCWNsZWFyVGltZW91dCh3aW5kb3cuelRyZWVNb3ZlVGltZXIpOwoJCQkJCQkJCQkJd2luZG93LnpUcmVlTW92ZVRhcmdldE5vZGVUSWQgPSBudWxsOwoJCQkJCQkJCQl9IGVsc2UgaWYgKHdpbmRvdy56VHJlZU1vdmVUaW1lciAmJiB3aW5kb3cuelRyZWVNb3ZlVGFyZ2V0Tm9kZVRJZCA9PT0gdG1wVGFyZ2V0Tm9kZS50SWQpIHsKCQkJCQkJCQkJCXN0YXJ0VGltZXIgPSBmYWxzZTsKCQkJCQkJCQkJfQoJCQkJCQkJCQlpZiAoc3RhcnRUaW1lcikgewoJCQkJCQkJCQkJd2luZG93LnpUcmVlTW92ZVRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsKCQkJCQkJCQkJCQlpZiAobW92ZVR5cGUgIT0gY29uc3RzLm1vdmUuVFlQRV9JTk5FUikgcmV0dXJuOwoJCQkJCQkJCQkJCWlmICh0bXBUYXJnZXROb2RlICYmIHRtcFRhcmdldE5vZGUuaXNQYXJlbnQgJiYgIXRtcFRhcmdldE5vZGUub3BlbiAmJiAobmV3IERhdGUoKSkuZ2V0VGltZSgpIC0gc3RhcnRUaW1lID4gdGFyZ2V0U2V0dGluZy5lZGl0LmRyYWcuYXV0b09wZW5UaW1lCgkJCQkJCQkJCQkJCSYmIHRvb2xzLmFwcGx5KHRhcmdldFNldHRpbmcuY2FsbGJhY2suYmVmb3JlRHJhZ09wZW4sIFt0YXJnZXRTZXR0aW5nLnRyZWVJZCwgdG1wVGFyZ2V0Tm9kZV0sIHRydWUpKSB7CgkJCQkJCQkJCQkJCXZpZXcuc3dpdGNoTm9kZSh0YXJnZXRTZXR0aW5nLCB0bXBUYXJnZXROb2RlKTsKCQkJCQkJCQkJCQkJaWYgKHRhcmdldFNldHRpbmcuZWRpdC5kcmFnLmF1dG9FeHBhbmRUcmlnZ2VyKSB7CgkJCQkJCQkJCQkJCQl0YXJnZXRTZXR0aW5nLnRyZWVPYmoudHJpZ2dlcihjb25zdHMuZXZlbnQuRVhQQU5ELCBbdGFyZ2V0U2V0dGluZy50cmVlSWQsIHRtcFRhcmdldE5vZGVdKTsKCQkJCQkJCQkJCQkJfQoJCQkJCQkJCQkJCX0KCQkJCQkJCQkJCX0sIHRhcmdldFNldHRpbmcuZWRpdC5kcmFnLmF1dG9PcGVuVGltZSs1MCk7CgkJCQkJCQkJCQl3aW5kb3cuelRyZWVNb3ZlVGFyZ2V0Tm9kZVRJZCA9IHRtcFRhcmdldE5vZGUudElkOwoJCQkJCQkJCQl9CgkJCQkJCQkJfQoJCQkJCQkJfQoJCQkJCQl9CgkJCQkJfSBlbHNlIHsKCQkJCQkJbW92ZVR5cGUgPSBjb25zdHMubW92ZS5UWVBFX0lOTkVSOwoJCQkJCQlpZiAodG1wVGFyZ2V0ICYmIHRvb2xzLmFwcGx5KHRhcmdldFNldHRpbmcuZWRpdC5kcmFnLmlubmVyLCBbdGFyZ2V0U2V0dGluZy50cmVlSWQsIG5vZGVzLCBudWxsXSwgISF0YXJnZXRTZXR0aW5nLmVkaXQuZHJhZy5pbm5lcikpIHsKCQkJCQkJCXRtcFRhcmdldC5hZGRDbGFzcyhjb25zdHMubm9kZS5UTVBUQVJHRVRfVFJFRSk7CgkJCQkJCX0gZWxzZSB7CgkJCQkJCQl0bXBUYXJnZXQgPSBudWxsOwoJCQkJCQl9CgkJCQkJCXRtcEFycm93LmNzcyh7CgkJCQkJCQkiZGlzcGxheSI6Im5vbmUiCgkJCQkJCX0pOwoJCQkJCQlpZiAod2luZG93LnpUcmVlTW92ZVRpbWVyKSB7CgkJCQkJCQljbGVhclRpbWVvdXQod2luZG93LnpUcmVlTW92ZVRpbWVyKTsKCQkJCQkJCXdpbmRvdy56VHJlZU1vdmVUYXJnZXROb2RlVElkID0gbnVsbDsKCQkJCQkJfQoJCQkJCX0KCQkJCQlwcmVUbXBUYXJnZXROb2RlSWQgPSB0bXBUYXJnZXROb2RlSWQ7CgkJCQkJcHJlVG1wTW92ZVR5cGUgPSBtb3ZlVHlwZTsKCgkJCQkJc2V0dGluZy50cmVlT2JqLnRyaWdnZXIoY29uc3RzLmV2ZW50LkRSQUdNT1ZFLCBbZXZlbnQsIHNldHRpbmcudHJlZUlkLCBub2Rlc10pOwoJCQkJfQoJCQkJcmV0dXJuIGZhbHNlOwoJCQl9CgoJCQlkb2MuYmluZCgibW91c2V1cCIsIF9kb2NNb3VzZVVwKTsKCQkJZnVuY3Rpb24gX2RvY01vdXNlVXAoZXZlbnQpIHsKCQkJCWlmICh3aW5kb3cuelRyZWVNb3ZlVGltZXIpIHsKCQkJCQljbGVhclRpbWVvdXQod2luZG93LnpUcmVlTW92ZVRpbWVyKTsKCQkJCQl3aW5kb3cuelRyZWVNb3ZlVGFyZ2V0Tm9kZVRJZCA9IG51bGw7CgkJCQl9CgkJCQlwcmVUbXBUYXJnZXROb2RlSWQgPSBudWxsOwoJCQkJcHJlVG1wTW92ZVR5cGUgPSBudWxsOwoJCQkJZG9jLnVuYmluZCgibW91c2Vtb3ZlIiwgX2RvY01vdXNlTW92ZSk7CgkJCQlkb2MudW5iaW5kKCJtb3VzZXVwIiwgX2RvY01vdXNlVXApOwoJCQkJZG9jLnVuYmluZCgic2VsZWN0c3RhcnQiLCBfZG9jU2VsZWN0KTsKCQkJCWJvZHkuY3NzKCJjdXJzb3IiLCAiYXV0byIpOwoJCQkJaWYgKHRtcFRhcmdldCkgewoJCQkJCXRtcFRhcmdldC5yZW1vdmVDbGFzcyhjb25zdHMubm9kZS5UTVBUQVJHRVRfVFJFRSk7CgkJCQkJaWYgKHRtcFRhcmdldE5vZGVJZCkgJCgiIyIgKyB0bXBUYXJnZXROb2RlSWQgKyBjb25zdHMuaWQuQSwgdG1wVGFyZ2V0KS5yZW1vdmVDbGFzcyhjb25zdHMubm9kZS5UTVBUQVJHRVRfTk9ERSArICJfIiArIGNvbnN0cy5tb3ZlLlRZUEVfUFJFVikKCQkJCQkJCS5yZW1vdmVDbGFzcyhjb25zdHMubm9kZS5UTVBUQVJHRVRfTk9ERSArICJfIiArIF9jb25zdHMubW92ZS5UWVBFX05FWFQpLnJlbW92ZUNsYXNzKGNvbnN0cy5ub2RlLlRNUFRBUkdFVF9OT0RFICsgIl8iICsgX2NvbnN0cy5tb3ZlLlRZUEVfSU5ORVIpOwoJCQkJfQoJCQkJdG9vbHMuc2hvd0lmYW1lTWFzayhzZXR0aW5nLCBmYWxzZSk7CgoJCQkJcm9vdHMuc2hvd0hvdmVyRG9tID0gdHJ1ZTsKCQkJCWlmIChyb290LmRyYWdGbGFnID09IDApIHJldHVybjsKCQkJCXJvb3QuZHJhZ0ZsYWcgPSAwOwoKCQkJCXZhciBpLCBsLCB0bXBOb2RlOwoJCQkJZm9yIChpPTAsIGw9bm9kZXMubGVuZ3RoOyBpPGw7IGkrKykgewoJCQkJCXRtcE5vZGUgPSBub2Rlc1tpXTsKCQkJCQlpZiAodG1wTm9kZS5pc1BhcmVudCAmJiByb290LmRyYWdOb2RlU2hvd0JlZm9yZVt0bXBOb2RlLnRJZF0gJiYgIXRtcE5vZGUub3BlbikgewoJCQkJCQl2aWV3LmV4cGFuZENvbGxhcHNlTm9kZShzZXR0aW5nLCB0bXBOb2RlLCAhdG1wTm9kZS5vcGVuKTsKCQkJCQkJZGVsZXRlIHJvb3QuZHJhZ05vZGVTaG93QmVmb3JlW3RtcE5vZGUudElkXTsKCQkJCQl9CgkJCQl9CgoJCQkJaWYgKGN1ck5vZGUpIGN1ck5vZGUucmVtb3ZlKCk7CgkJCQlpZiAodG1wQXJyb3cpIHRtcEFycm93LnJlbW92ZSgpOwoKCQkJCXZhciBpc0NvcHkgPSAoKGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleSkgJiYgc2V0dGluZy5lZGl0LmRyYWcuaXNNb3ZlICYmIHNldHRpbmcuZWRpdC5kcmFnLmlzQ29weSkgfHwgKCFzZXR0aW5nLmVkaXQuZHJhZy5pc01vdmUgJiYgc2V0dGluZy5lZGl0LmRyYWcuaXNDb3B5KTsKCQkJCWlmICghaXNDb3B5ICYmIHRtcFRhcmdldCAmJiB0bXBUYXJnZXROb2RlSWQgJiYgbm9kZXNbMF0ucGFyZW50VElkICYmIHRtcFRhcmdldE5vZGVJZD09bm9kZXNbMF0ucGFyZW50VElkICYmIG1vdmVUeXBlID09IGNvbnN0cy5tb3ZlLlRZUEVfSU5ORVIpIHsKCQkJCQl0bXBUYXJnZXQgPSBudWxsOwoJCQkJfQoJCQkJaWYgKHRtcFRhcmdldCkgewoJCQkJCXZhciBkcmFnVGFyZ2V0Tm9kZSA9IHRtcFRhcmdldE5vZGVJZCA9PSBudWxsID8gbnVsbDogZGF0YS5nZXROb2RlQ2FjaGUodGFyZ2V0U2V0dGluZywgdG1wVGFyZ2V0Tm9kZUlkKTsKCQkJCQlpZiAodG9vbHMuYXBwbHkoc2V0dGluZy5jYWxsYmFjay5iZWZvcmVEcm9wLCBbdGFyZ2V0U2V0dGluZy50cmVlSWQsIG5vZGVzLCBkcmFnVGFyZ2V0Tm9kZSwgbW92ZVR5cGUsIGlzQ29weV0sIHRydWUpID09IGZhbHNlKSB7CgkJCQkJCXZpZXcuc2VsZWN0Tm9kZXMoc291cmNlU2V0dGluZywgbm9kZXMpOwoJCQkJCQlyZXR1cm47CgkJCQkJfQoJCQkJCXZhciBuZXdOb2RlcyA9IGlzQ29weSA/IHRvb2xzLmNsb25lKG5vZGVzKSA6IG5vZGVzOwoKCQkJCQlmdW5jdGlvbiBkcm9wQ2FsbGJhY2soKSB7CgkJCQkJCWlmIChpc090aGVyVHJlZSkgewoJCQkJCQkJaWYgKCFpc0NvcHkpIHsKCQkJCQkJCQlmb3IodmFyIGk9MCwgbD1ub2Rlcy5sZW5ndGg7IGk8bDsgaSsrKSB7CgkJCQkJCQkJCXZpZXcucmVtb3ZlTm9kZShzZXR0aW5nLCBub2Rlc1tpXSk7CgkJCQkJCQkJfQoJCQkJCQkJfQoJCQkJCQkJaWYgKG1vdmVUeXBlID09IGNvbnN0cy5tb3ZlLlRZUEVfSU5ORVIpIHsKCQkJCQkJCQl2aWV3LmFkZE5vZGVzKHRhcmdldFNldHRpbmcsIGRyYWdUYXJnZXROb2RlLCAtMSwgbmV3Tm9kZXMpOwoJCQkJCQkJfSBlbHNlIHsKCQkJCQkJCQl2aWV3LmFkZE5vZGVzKHRhcmdldFNldHRpbmcsIGRyYWdUYXJnZXROb2RlLmdldFBhcmVudE5vZGUoKSwgbW92ZVR5cGUgPT0gY29uc3RzLm1vdmUuVFlQRV9QUkVWID8gZHJhZ1RhcmdldE5vZGUuZ2V0SW5kZXgoKSA6IGRyYWdUYXJnZXROb2RlLmdldEluZGV4KCkrMSwgbmV3Tm9kZXMpOwoJCQkJCQkJfQoJCQkJCQl9IGVsc2UgewoJCQkJCQkJaWYgKGlzQ29weSAmJiBtb3ZlVHlwZSA9PSBjb25zdHMubW92ZS5UWVBFX0lOTkVSKSB7CgkJCQkJCQkJdmlldy5hZGROb2Rlcyh0YXJnZXRTZXR0aW5nLCBkcmFnVGFyZ2V0Tm9kZSwgLTEsIG5ld05vZGVzKTsKCQkJCQkJCX0gZWxzZSBpZiAoaXNDb3B5KSB7CgkJCQkJCQkJdmlldy5hZGROb2Rlcyh0YXJnZXRTZXR0aW5nLCBkcmFnVGFyZ2V0Tm9kZS5nZXRQYXJlbnROb2RlKCksIG1vdmVUeXBlID09IGNvbnN0cy5tb3ZlLlRZUEVfUFJFViA/IGRyYWdUYXJnZXROb2RlLmdldEluZGV4KCkgOiBkcmFnVGFyZ2V0Tm9kZS5nZXRJbmRleCgpKzEsIG5ld05vZGVzKTsKCQkJCQkJCX0gZWxzZSB7CgkJCQkJCQkJaWYgKG1vdmVUeXBlICE9IGNvbnN0cy5tb3ZlLlRZUEVfTkVYVCkgewoJCQkJCQkJCQlmb3IgKGk9MCwgbD1uZXdOb2Rlcy5sZW5ndGg7IGk8bDsgaSsrKSB7CgkJCQkJCQkJCQl2aWV3Lm1vdmVOb2RlKHRhcmdldFNldHRpbmcsIGRyYWdUYXJnZXROb2RlLCBuZXdOb2Rlc1tpXSwgbW92ZVR5cGUsIGZhbHNlKTsKCQkJCQkJCQkJfQoJCQkJCQkJCX0gZWxzZSB7CgkJCQkJCQkJCWZvciAoaT0tMSwgbD1uZXdOb2Rlcy5sZW5ndGgtMTsgaTxsOyBsLS0pIHsKCQkJCQkJCQkJCXZpZXcubW92ZU5vZGUodGFyZ2V0U2V0dGluZywgZHJhZ1RhcmdldE5vZGUsIG5ld05vZGVzW2xdLCBtb3ZlVHlwZSwgZmFsc2UpOwoJCQkJCQkJCQl9CgkJCQkJCQkJfQoJCQkJCQkJfQoJCQkJCQl9CgkJCQkJCXZpZXcuc2VsZWN0Tm9kZXModGFyZ2V0U2V0dGluZywgbmV3Tm9kZXMpOwoKCQkJCQkJdmFyIGEgPSAkJChuZXdOb2Rlc1swXSwgc2V0dGluZykuZ2V0KDApOwoJCQkJCQl2aWV3LnNjcm9sbEludG9WaWV3KGEpOwoKCQkJCQkJc2V0dGluZy50cmVlT2JqLnRyaWdnZXIoY29uc3RzLmV2ZW50LkRST1AsIFtldmVudCwgdGFyZ2V0U2V0dGluZy50cmVlSWQsIG5ld05vZGVzLCBkcmFnVGFyZ2V0Tm9kZSwgbW92ZVR5cGUsIGlzQ29weV0pOwoJCQkJCX0KCgkJCQkJaWYgKG1vdmVUeXBlID09IGNvbnN0cy5tb3ZlLlRZUEVfSU5ORVIgJiYgdG9vbHMuY2FuQXN5bmModGFyZ2V0U2V0dGluZywgZHJhZ1RhcmdldE5vZGUpKSB7CgkJCQkJCXZpZXcuYXN5bmNOb2RlKHRhcmdldFNldHRpbmcsIGRyYWdUYXJnZXROb2RlLCBmYWxzZSwgZHJvcENhbGxiYWNrKTsKCQkJCQl9IGVsc2UgewoJCQkJCQlkcm9wQ2FsbGJhY2soKTsKCQkJCQl9CgoJCQkJfSBlbHNlIHsKCQkJCQl2aWV3LnNlbGVjdE5vZGVzKHNvdXJjZVNldHRpbmcsIG5vZGVzKTsKCQkJCQlzZXR0aW5nLnRyZWVPYmoudHJpZ2dlcihjb25zdHMuZXZlbnQuRFJPUCwgW2V2ZW50LCBzZXR0aW5nLnRyZWVJZCwgbm9kZXMsIG51bGwsIG51bGwsIG51bGxdKTsKCQkJCX0KCQkJfQoKCQkJZG9jLmJpbmQoInNlbGVjdHN0YXJ0IiwgX2RvY1NlbGVjdCk7CgkJCWZ1bmN0aW9uIF9kb2NTZWxlY3QoKSB7CgkJCQlyZXR1cm4gZmFsc2U7CgkJCX0KCgkJCS8vQXZvaWQgRmlyZUZveCdzIEJ1ZwoJCQkvL0lmIHpUcmVlIERpdiBDU1Mgc2V0ICdvdmVyZmxvdycsIHNvIGRyYWcgbm9kZSBvdXRzaWRlIG9mIHpUcmVlLCBhbmQgZXZlbnQudGFyZ2V0IGlzIGVycm9yLgoJCQlpZihldmVudE1vdXNlRG93bi5wcmV2ZW50RGVmYXVsdCkgewoJCQkJZXZlbnRNb3VzZURvd24ucHJldmVudERlZmF1bHQoKTsKCQkJfQoJCQlyZXR1cm4gdHJ1ZTsKCQl9Cgl9LAoJLy9tZXRob2Qgb2YgdG9vbHMgZm9yIHpUcmVlCglfdG9vbHMgPSB7CgkJZ2V0QWJzOiBmdW5jdGlvbiAob2JqKSB7CgkJCXZhciBvUmVjdCA9IG9iai5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwKCQkJc2Nyb2xsVG9wID0gZG9jdW1lbnQuYm9keS5zY3JvbGxUb3ArZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCwKCQkJc2Nyb2xsTGVmdCA9IGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdCtkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdDsKCQkJcmV0dXJuIFtvUmVjdC5sZWZ0K3Njcm9sbExlZnQsb1JlY3QudG9wK3Njcm9sbFRvcF07CgkJfSwKCQlpbnB1dEZvY3VzOiBmdW5jdGlvbihpbnB1dE9iaikgewoJCQlpZiAoaW5wdXRPYmouZ2V0KDApKSB7CgkJCQlpbnB1dE9iai5mb2N1cygpOwoJCQkJdG9vbHMuc2V0Q3Vyc29yUG9zaXRpb24oaW5wdXRPYmouZ2V0KDApLCBpbnB1dE9iai52YWwoKS5sZW5ndGgpOwoJCQl9CgkJfSwKCQlpbnB1dFNlbGVjdDogZnVuY3Rpb24oaW5wdXRPYmopIHsKCQkJaWYgKGlucHV0T2JqLmdldCgwKSkgewoJCQkJaW5wdXRPYmouZm9jdXMoKTsKCQkJCWlucHV0T2JqLnNlbGVjdCgpOwoJCQl9CgkJfSwKCQlzZXRDdXJzb3JQb3NpdGlvbjogZnVuY3Rpb24ob2JqLCBwb3MpewoJCQlpZihvYmouc2V0U2VsZWN0aW9uUmFuZ2UpIHsKCQkJCW9iai5mb2N1cygpOwoJCQkJb2JqLnNldFNlbGVjdGlvblJhbmdlKHBvcyxwb3MpOwoJCQl9IGVsc2UgaWYgKG9iai5jcmVhdGVUZXh0UmFuZ2UpIHsKCQkJCXZhciByYW5nZSA9IG9iai5jcmVhdGVUZXh0UmFuZ2UoKTsKCQkJCXJhbmdlLmNvbGxhcHNlKHRydWUpOwoJCQkJcmFuZ2UubW92ZUVuZCgnY2hhcmFjdGVyJywgcG9zKTsKCQkJCXJhbmdlLm1vdmVTdGFydCgnY2hhcmFjdGVyJywgcG9zKTsKCQkJCXJhbmdlLnNlbGVjdCgpOwoJCQl9CgkJfSwKCQlzaG93SWZhbWVNYXNrOiBmdW5jdGlvbihzZXR0aW5nLCBzaG93U2lnbikgewoJCQl2YXIgcm9vdCA9IGRhdGEuZ2V0Um9vdChzZXR0aW5nKTsKCQkJLy9jbGVhciBmdWxsIG1hc2sKCQkJd2hpbGUgKHJvb3QuZHJhZ01hc2tMaXN0Lmxlbmd0aCA+IDApIHsKCQkJCXJvb3QuZHJhZ01hc2tMaXN0WzBdLnJlbW92ZSgpOwoJCQkJcm9vdC5kcmFnTWFza0xpc3Quc2hpZnQoKTsKCQkJfQoJCQlpZiAoc2hvd1NpZ24pIHsKCQkJCS8vc2hvdyBtYXNrCgkJCQl2YXIgaWZyYW1lTGlzdCA9ICQkKCJpZnJhbWUiLCBzZXR0aW5nKTsKCQkJCWZvciAodmFyIGkgPSAwLCBsID0gaWZyYW1lTGlzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHsKCQkJCQl2YXIgb2JqID0gaWZyYW1lTGlzdC5nZXQoaSksCgkJCQkJciA9IHRvb2xzLmdldEFicyhvYmopLAoJCQkJCWRyYWdNYXNrID0gJCQoIjxkaXYgaWQ9J3pUcmVlTWFza18iICsgaSArICInIGNsYXNzPSd6VHJlZU1hc2snIHN0eWxlPSd0b3A6IiArIHJbMV0gKyAicHg7IGxlZnQ6IiArIHJbMF0gKyAicHg7IHdpZHRoOiIgKyBvYmoub2Zmc2V0V2lkdGggKyAicHg7IGhlaWdodDoiICsgb2JqLm9mZnNldEhlaWdodCArICJweDsnPjwvZGl2PiIsIHNldHRpbmcpOwoJCQkJCWRyYWdNYXNrLmFwcGVuZFRvKCQkKCJib2R5Iiwgc2V0dGluZykpOwoJCQkJCXJvb3QuZHJhZ01hc2tMaXN0LnB1c2goZHJhZ01hc2spOwoJCQkJfQoJCQl9CgkJfQoJfSwKCS8vbWV0aG9kIG9mIG9wZXJhdGUgenRyZWUgZG9tCglfdmlldyA9IHsKCQlhZGRFZGl0QnRuOiBmdW5jdGlvbihzZXR0aW5nLCBub2RlKSB7CgkJCWlmIChub2RlLmVkaXROYW1lRmxhZyB8fCAkJChub2RlLCBjb25zdHMuaWQuRURJVCwgc2V0dGluZykubGVuZ3RoID4gMCkgewoJCQkJcmV0dXJuOwoJCQl9CgkJCWlmICghdG9vbHMuYXBwbHkoc2V0dGluZy5lZGl0LnNob3dSZW5hbWVCdG4sIFtzZXR0aW5nLnRyZWVJZCwgbm9kZV0sIHNldHRpbmcuZWRpdC5zaG93UmVuYW1lQnRuKSkgewoJCQkJcmV0dXJuOwoJCQl9CgkJCXZhciBhT2JqID0gJCQobm9kZSwgY29uc3RzLmlkLkEsIHNldHRpbmcpLAoJCQllZGl0U3RyID0gIjxzcGFuIGNsYXNzPSciICsgY29uc3RzLmNsYXNzTmFtZS5CVVRUT04gKyAiIGVkaXQnIGlkPSciICsgbm9kZS50SWQgKyBjb25zdHMuaWQuRURJVCArICInIHRpdGxlPSciK3Rvb2xzLmFwcGx5KHNldHRpbmcuZWRpdC5yZW5hbWVUaXRsZSwgW3NldHRpbmcudHJlZUlkLCBub2RlXSwgc2V0dGluZy5lZGl0LnJlbmFtZVRpdGxlKSsiJyB0cmVlTm9kZSIrY29uc3RzLmlkLkVESVQrIiBzdHlsZT0nZGlzcGxheTpub25lOyc+PC9zcGFuPiI7CgkJCWFPYmouYXBwZW5kKGVkaXRTdHIpOwoKCQkJJCQobm9kZSwgY29uc3RzLmlkLkVESVQsIHNldHRpbmcpLmJpbmQoJ2NsaWNrJywKCQkJCWZ1bmN0aW9uKCkgewoJCQkJCWlmICghdG9vbHMudUNhbkRvKHNldHRpbmcpIHx8IHRvb2xzLmFwcGx5KHNldHRpbmcuY2FsbGJhY2suYmVmb3JlRWRpdE5hbWUsIFtzZXR0aW5nLnRyZWVJZCwgbm9kZV0sIHRydWUpID09IGZhbHNlKSByZXR1cm4gZmFsc2U7CgkJCQkJdmlldy5lZGl0Tm9kZShzZXR0aW5nLCBub2RlKTsKCQkJCQlyZXR1cm4gZmFsc2U7CgkJCQl9CgkJCQkpLnNob3coKTsKCQl9LAoJCWFkZFJlbW92ZUJ0bjogZnVuY3Rpb24oc2V0dGluZywgbm9kZSkgewoJCQlpZiAobm9kZS5lZGl0TmFtZUZsYWcgfHwgJCQobm9kZSwgY29uc3RzLmlkLlJFTU9WRSwgc2V0dGluZykubGVuZ3RoID4gMCkgewoJCQkJcmV0dXJuOwoJCQl9CgkJCWlmICghdG9vbHMuYXBwbHkoc2V0dGluZy5lZGl0LnNob3dSZW1vdmVCdG4sIFtzZXR0aW5nLnRyZWVJZCwgbm9kZV0sIHNldHRpbmcuZWRpdC5zaG93UmVtb3ZlQnRuKSkgewoJCQkJcmV0dXJuOwoJCQl9CgkJCXZhciBhT2JqID0gJCQobm9kZSwgY29uc3RzLmlkLkEsIHNldHRpbmcpLAoJCQlyZW1vdmVTdHIgPSAiPHNwYW4gY2xhc3M9JyIgKyBjb25zdHMuY2xhc3NOYW1lLkJVVFRPTiArICIgcmVtb3ZlJyBpZD0nIiArIG5vZGUudElkICsgY29uc3RzLmlkLlJFTU9WRSArICInIHRpdGxlPSciK3Rvb2xzLmFwcGx5KHNldHRpbmcuZWRpdC5yZW1vdmVUaXRsZSwgW3NldHRpbmcudHJlZUlkLCBub2RlXSwgc2V0dGluZy5lZGl0LnJlbW92ZVRpdGxlKSsiJyB0cmVlTm9kZSIrY29uc3RzLmlkLlJFTU9WRSsiIHN0eWxlPSdkaXNwbGF5Om5vbmU7Jz48L3NwYW4+IjsKCQkJYU9iai5hcHBlbmQocmVtb3ZlU3RyKTsKCgkJCSQkKG5vZGUsIGNvbnN0cy5pZC5SRU1PVkUsIHNldHRpbmcpLmJpbmQoJ2NsaWNrJywKCQkJCWZ1bmN0aW9uKCkgewoJCQkJCWlmICghdG9vbHMudUNhbkRvKHNldHRpbmcpIHx8IHRvb2xzLmFwcGx5KHNldHRpbmcuY2FsbGJhY2suYmVmb3JlUmVtb3ZlLCBbc2V0dGluZy50cmVlSWQsIG5vZGVdLCB0cnVlKSA9PSBmYWxzZSkgcmV0dXJuIGZhbHNlOwoJCQkJCXZpZXcucmVtb3ZlTm9kZShzZXR0aW5nLCBub2RlKTsKCQkJCQlzZXR0aW5nLnRyZWVPYmoudHJpZ2dlcihjb25zdHMuZXZlbnQuUkVNT1ZFLCBbc2V0dGluZy50cmVlSWQsIG5vZGVdKTsKCQkJCQlyZXR1cm4gZmFsc2U7CgkJCQl9CgkJCQkpLmJpbmQoJ21vdXNlZG93bicsCgkJCQlmdW5jdGlvbihldmVudE1vdXNlRG93bikgewoJCQkJCXJldHVybiB0cnVlOwoJCQkJfQoJCQkJKS5zaG93KCk7CgkJfSwKCQlhZGRIb3ZlckRvbTogZnVuY3Rpb24oc2V0dGluZywgbm9kZSkgewoJCQlpZiAoZGF0YS5nZXRSb290cygpLnNob3dIb3ZlckRvbSkgewoJCQkJbm9kZS5pc0hvdmVyID0gdHJ1ZTsKCQkJCWlmIChzZXR0aW5nLmVkaXQuZW5hYmxlKSB7CgkJCQkJdmlldy5hZGRFZGl0QnRuKHNldHRpbmcsIG5vZGUpOwoJCQkJCXZpZXcuYWRkUmVtb3ZlQnRuKHNldHRpbmcsIG5vZGUpOwoJCQkJfQoJCQkJdG9vbHMuYXBwbHkoc2V0dGluZy52aWV3LmFkZEhvdmVyRG9tLCBbc2V0dGluZy50cmVlSWQsIG5vZGVdKTsKCQkJfQoJCX0sCgkJY2FuY2VsQ3VyRWRpdE5vZGU6IGZ1bmN0aW9uIChzZXR0aW5nLCBmb3JjZU5hbWUsIGlzQ2FuY2VsKSB7CgkJCXZhciByb290ID0gZGF0YS5nZXRSb290KHNldHRpbmcpLAoJCQluYW1lS2V5ID0gc2V0dGluZy5kYXRhLmtleS5uYW1lLAoJCQlub2RlID0gcm9vdC5jdXJFZGl0Tm9kZTsKCgkJCWlmIChub2RlKSB7CgkJCQl2YXIgaW5wdXRPYmogPSByb290LmN1ckVkaXRJbnB1dCwKCQkJCW5ld05hbWUgPSBmb3JjZU5hbWUgPyBmb3JjZU5hbWU6KGlzQ2FuY2VsID8gbm9kZVtuYW1lS2V5XTogaW5wdXRPYmoudmFsKCkpOwoJCQkJaWYgKHRvb2xzLmFwcGx5KHNldHRpbmcuY2FsbGJhY2suYmVmb3JlUmVuYW1lLCBbc2V0dGluZy50cmVlSWQsIG5vZGUsIG5ld05hbWUsIGlzQ2FuY2VsXSwgdHJ1ZSkgPT09IGZhbHNlKSB7CgkJCQkJcmV0dXJuIGZhbHNlOwoJCQkJfQogICAgICAgICAgICAgICAgbm9kZVtuYW1lS2V5XSA9IG5ld05hbWU7CiAgICAgICAgICAgICAgICB2YXIgYU9iaiA9ICQkKG5vZGUsIGNvbnN0cy5pZC5BLCBzZXR0aW5nKTsKCQkJCWFPYmoucmVtb3ZlQ2xhc3MoY29uc3RzLm5vZGUuQ1VSU0VMRUNURURfRURJVCk7CgkJCQlpbnB1dE9iai51bmJpbmQoKTsKCQkJCXZpZXcuc2V0Tm9kZU5hbWUoc2V0dGluZywgbm9kZSk7CgkJCQlub2RlLmVkaXROYW1lRmxhZyA9IGZhbHNlOwoJCQkJcm9vdC5jdXJFZGl0Tm9kZSA9IG51bGw7CgkJCQlyb290LmN1ckVkaXRJbnB1dCA9IG51bGw7CgkJCQl2aWV3LnNlbGVjdE5vZGUoc2V0dGluZywgbm9kZSwgZmFsc2UpOwogICAgICAgICAgICAgICAgc2V0dGluZy50cmVlT2JqLnRyaWdnZXIoY29uc3RzLmV2ZW50LlJFTkFNRSwgW3NldHRpbmcudHJlZUlkLCBub2RlLCBpc0NhbmNlbF0pOwoJCQl9CgkJCXJvb3Qubm9TZWxlY3Rpb24gPSB0cnVlOwoJCQlyZXR1cm4gdHJ1ZTsKCQl9LAoJCWVkaXROb2RlOiBmdW5jdGlvbihzZXR0aW5nLCBub2RlKSB7CgkJCXZhciByb290ID0gZGF0YS5nZXRSb290KHNldHRpbmcpOwoJCQl2aWV3LmVkaXROb2RlQmx1ciA9IGZhbHNlOwoJCQlpZiAoZGF0YS5pc1NlbGVjdGVkTm9kZShzZXR0aW5nLCBub2RlKSAmJiByb290LmN1ckVkaXROb2RlID09IG5vZGUgJiYgbm9kZS5lZGl0TmFtZUZsYWcpIHsKCQkJCXNldFRpbWVvdXQoZnVuY3Rpb24oKSB7dG9vbHMuaW5wdXRGb2N1cyhyb290LmN1ckVkaXRJbnB1dCk7fSwgMCk7CgkJCQlyZXR1cm47CgkJCX0KCQkJdmFyIG5hbWVLZXkgPSBzZXR0aW5nLmRhdGEua2V5Lm5hbWU7CgkJCW5vZGUuZWRpdE5hbWVGbGFnID0gdHJ1ZTsKCQkJdmlldy5yZW1vdmVUcmVlRG9tKHNldHRpbmcsIG5vZGUpOwoJCQl2aWV3LmNhbmNlbEN1ckVkaXROb2RlKHNldHRpbmcpOwoJCQl2aWV3LnNlbGVjdE5vZGUoc2V0dGluZywgbm9kZSwgZmFsc2UpOwoJCQkkJChub2RlLCBjb25zdHMuaWQuU1BBTiwgc2V0dGluZykuaHRtbCgiPGlucHV0IHR5cGU9dGV4dCBjbGFzcz0ncmVuYW1lJyBpZD0nIiArIG5vZGUudElkICsgY29uc3RzLmlkLklOUFVUICsgIicgdHJlZU5vZGUiICsgY29uc3RzLmlkLklOUFVUICsgIiA+Iik7CgkJCXZhciBpbnB1dE9iaiA9ICQkKG5vZGUsIGNvbnN0cy5pZC5JTlBVVCwgc2V0dGluZyk7CgkJCWlucHV0T2JqLmF0dHIoInZhbHVlIiwgbm9kZVtuYW1lS2V5XSk7CgkJCWlmIChzZXR0aW5nLmVkaXQuZWRpdE5hbWVTZWxlY3RBbGwpIHsKCQkJCXRvb2xzLmlucHV0U2VsZWN0KGlucHV0T2JqKTsKCQkJfSBlbHNlIHsKCQkJCXRvb2xzLmlucHV0Rm9jdXMoaW5wdXRPYmopOwoJCQl9CgoJCQlpbnB1dE9iai5iaW5kKCdibHVyJywgZnVuY3Rpb24oZXZlbnQpIHsKCQkJCWlmICghdmlldy5lZGl0Tm9kZUJsdXIpIHsKCQkJCQl2aWV3LmNhbmNlbEN1ckVkaXROb2RlKHNldHRpbmcpOwoJCQkJfQoJCQl9KS5iaW5kKCdrZXlkb3duJywgZnVuY3Rpb24oZXZlbnQpIHsKCQkJCWlmIChldmVudC5rZXlDb2RlPT0iMTMiKSB7CgkJCQkJdmlldy5lZGl0Tm9kZUJsdXIgPSB0cnVlOwoJCQkJCXZpZXcuY2FuY2VsQ3VyRWRpdE5vZGUoc2V0dGluZyk7CgkJCQl9IGVsc2UgaWYgKGV2ZW50LmtleUNvZGU9PSIyNyIpIHsKCQkJCQl2aWV3LmNhbmNlbEN1ckVkaXROb2RlKHNldHRpbmcsIG51bGwsIHRydWUpOwoJCQkJfQoJCQl9KS5iaW5kKCdjbGljaycsIGZ1bmN0aW9uKGV2ZW50KSB7CgkJCQlyZXR1cm4gZmFsc2U7CgkJCX0pLmJpbmQoJ2RibGNsaWNrJywgZnVuY3Rpb24oZXZlbnQpIHsKCQkJCXJldHVybiBmYWxzZTsKCQkJfSk7CgoJCQkkJChub2RlLCBjb25zdHMuaWQuQSwgc2V0dGluZykuYWRkQ2xhc3MoY29uc3RzLm5vZGUuQ1VSU0VMRUNURURfRURJVCk7CgkJCXJvb3QuY3VyRWRpdElucHV0ID0gaW5wdXRPYmo7CgkJCXJvb3Qubm9TZWxlY3Rpb24gPSBmYWxzZTsKCQkJcm9vdC5jdXJFZGl0Tm9kZSA9IG5vZGU7CgkJfSwKCQltb3ZlTm9kZTogZnVuY3Rpb24oc2V0dGluZywgdGFyZ2V0Tm9kZSwgbm9kZSwgbW92ZVR5cGUsIGFuaW1hdGVGbGFnLCBpc1NpbGVudCkgewoJCQl2YXIgcm9vdCA9IGRhdGEuZ2V0Um9vdChzZXR0aW5nKSwKCQkJY2hpbGRLZXkgPSBzZXR0aW5nLmRhdGEua2V5LmNoaWxkcmVuOwoJCQlpZiAodGFyZ2V0Tm9kZSA9PSBub2RlKSByZXR1cm47CgkJCWlmIChzZXR0aW5nLmRhdGEua2VlcC5sZWFmICYmIHRhcmdldE5vZGUgJiYgIXRhcmdldE5vZGUuaXNQYXJlbnQgJiYgbW92ZVR5cGUgPT0gY29uc3RzLm1vdmUuVFlQRV9JTk5FUikgcmV0dXJuOwoJCQl2YXIgb2xkUGFyZW50Tm9kZSA9IChub2RlLnBhcmVudFRJZCA/IG5vZGUuZ2V0UGFyZW50Tm9kZSgpOiByb290KSwKCQkJdGFyZ2V0Tm9kZUlzUm9vdCA9ICh0YXJnZXROb2RlID09PSBudWxsIHx8IHRhcmdldE5vZGUgPT0gcm9vdCk7CgkJCWlmICh0YXJnZXROb2RlSXNSb290ICYmIHRhcmdldE5vZGUgPT09IG51bGwpIHRhcmdldE5vZGUgPSByb290OwoJCQlpZiAodGFyZ2V0Tm9kZUlzUm9vdCkgbW92ZVR5cGUgPSBjb25zdHMubW92ZS5UWVBFX0lOTkVSOwoJCQl2YXIgdGFyZ2V0UGFyZW50Tm9kZSA9ICh0YXJnZXROb2RlLnBhcmVudFRJZCA/IHRhcmdldE5vZGUuZ2V0UGFyZW50Tm9kZSgpIDogcm9vdCk7CgoJCQlpZiAobW92ZVR5cGUgIT0gY29uc3RzLm1vdmUuVFlQRV9QUkVWICYmIG1vdmVUeXBlICE9IGNvbnN0cy5tb3ZlLlRZUEVfTkVYVCkgewoJCQkJbW92ZVR5cGUgPSBjb25zdHMubW92ZS5UWVBFX0lOTkVSOwoJCQl9CgoJCQlpZiAobW92ZVR5cGUgPT0gY29uc3RzLm1vdmUuVFlQRV9JTk5FUikgewoJCQkJaWYgKHRhcmdldE5vZGVJc1Jvb3QpIHsKCQkJCQkvL3BhcmVudFRJZCBvZiByb290IG5vZGUgaXMgbnVsbAoJCQkJCW5vZGUucGFyZW50VElkID0gbnVsbDsKCQkJCX0gZWxzZSB7CgkJCQkJaWYgKCF0YXJnZXROb2RlLmlzUGFyZW50KSB7CgkJCQkJCXRhcmdldE5vZGUuaXNQYXJlbnQgPSB0cnVlOwoJCQkJCQl0YXJnZXROb2RlLm9wZW4gPSAhIXRhcmdldE5vZGUub3BlbjsKCQkJCQkJdmlldy5zZXROb2RlTGluZUljb3Moc2V0dGluZywgdGFyZ2V0Tm9kZSk7CgkJCQkJfQoJCQkJCW5vZGUucGFyZW50VElkID0gdGFyZ2V0Tm9kZS50SWQ7CgkJCQl9CgkJCX0KCgkJCS8vbW92ZSBub2RlIERvbQoJCQl2YXIgdGFyZ2V0T2JqLCB0YXJnZXRfdWxPYmo7CgkJCWlmICh0YXJnZXROb2RlSXNSb290KSB7CgkJCQl0YXJnZXRPYmogPSBzZXR0aW5nLnRyZWVPYmo7CgkJCQl0YXJnZXRfdWxPYmogPSB0YXJnZXRPYmo7CgkJCX0gZWxzZSB7CgkJCQlpZiAoIWlzU2lsZW50ICYmIG1vdmVUeXBlID09IGNvbnN0cy5tb3ZlLlRZUEVfSU5ORVIpIHsKCQkJCQl2aWV3LmV4cGFuZENvbGxhcHNlTm9kZShzZXR0aW5nLCB0YXJnZXROb2RlLCB0cnVlLCBmYWxzZSk7CgkJCQl9IGVsc2UgaWYgKCFpc1NpbGVudCkgewoJCQkJCXZpZXcuZXhwYW5kQ29sbGFwc2VOb2RlKHNldHRpbmcsIHRhcmdldE5vZGUuZ2V0UGFyZW50Tm9kZSgpLCB0cnVlLCBmYWxzZSk7CgkJCQl9CgkJCQl0YXJnZXRPYmogPSAkJCh0YXJnZXROb2RlLCBzZXR0aW5nKTsKCQkJCXRhcmdldF91bE9iaiA9ICQkKHRhcmdldE5vZGUsIGNvbnN0cy5pZC5VTCwgc2V0dGluZyk7CgkJCQlpZiAoISF0YXJnZXRPYmouZ2V0KDApICYmICF0YXJnZXRfdWxPYmouZ2V0KDApKSB7CgkJCQkJdmFyIHVsc3RyID0gW107CgkJCQkJdmlldy5tYWtlVWxIdG1sKHNldHRpbmcsIHRhcmdldE5vZGUsIHVsc3RyLCAnJyk7CgkJCQkJdGFyZ2V0T2JqLmFwcGVuZCh1bHN0ci5qb2luKCcnKSk7CgkJCQl9CgkJCQl0YXJnZXRfdWxPYmogPSAkJCh0YXJnZXROb2RlLCBjb25zdHMuaWQuVUwsIHNldHRpbmcpOwoJCQl9CgkJCXZhciBub2RlRG9tID0gJCQobm9kZSwgc2V0dGluZyk7CgkJCWlmICghbm9kZURvbS5nZXQoMCkpIHsKCQkJCW5vZGVEb20gPSB2aWV3LmFwcGVuZE5vZGVzKHNldHRpbmcsIG5vZGUubGV2ZWwsIFtub2RlXSwgbnVsbCwgLTEsIGZhbHNlLCB0cnVlKS5qb2luKCcnKTsKCQkJfSBlbHNlIGlmICghdGFyZ2V0T2JqLmdldCgwKSkgewoJCQkJbm9kZURvbS5yZW1vdmUoKTsKCQkJfQoJCQlpZiAodGFyZ2V0X3VsT2JqLmdldCgwKSAmJiBtb3ZlVHlwZSA9PSBjb25zdHMubW92ZS5UWVBFX0lOTkVSKSB7CgkJCQl0YXJnZXRfdWxPYmouYXBwZW5kKG5vZGVEb20pOwoJCQl9IGVsc2UgaWYgKHRhcmdldE9iai5nZXQoMCkgJiYgbW92ZVR5cGUgPT0gY29uc3RzLm1vdmUuVFlQRV9QUkVWKSB7CgkJCQl0YXJnZXRPYmouYmVmb3JlKG5vZGVEb20pOwoJCQl9IGVsc2UgaWYgKHRhcmdldE9iai5nZXQoMCkgJiYgbW92ZVR5cGUgPT0gY29uc3RzLm1vdmUuVFlQRV9ORVhUKSB7CgkJCQl0YXJnZXRPYmouYWZ0ZXIobm9kZURvbSk7CgkJCX0KCgkJCS8vcmVwYWlyIHRoZSBkYXRhIGFmdGVyIG1vdmUKCQkJdmFyIGksbCwKCQkJdG1wU3JjSW5kZXggPSAtMSwKCQkJdG1wVGFyZ2V0SW5kZXggPSAwLAoJCQlvbGROZWlnaGJvciA9IG51bGwsCgkJCW5ld05laWdoYm9yID0gbnVsbCwKCQkJb2xkTGV2ZWwgPSBub2RlLmxldmVsOwoJCQlpZiAobm9kZS5pc0ZpcnN0Tm9kZSkgewoJCQkJdG1wU3JjSW5kZXggPSAwOwoJCQkJaWYgKG9sZFBhcmVudE5vZGVbY2hpbGRLZXldLmxlbmd0aCA+IDEgKSB7CgkJCQkJb2xkTmVpZ2hib3IgPSBvbGRQYXJlbnROb2RlW2NoaWxkS2V5XVsxXTsKCQkJCQlvbGROZWlnaGJvci5pc0ZpcnN0Tm9kZSA9IHRydWU7CgkJCQl9CgkJCX0gZWxzZSBpZiAobm9kZS5pc0xhc3ROb2RlKSB7CgkJCQl0bXBTcmNJbmRleCA9IG9sZFBhcmVudE5vZGVbY2hpbGRLZXldLmxlbmd0aCAtMTsKCQkJCW9sZE5laWdoYm9yID0gb2xkUGFyZW50Tm9kZVtjaGlsZEtleV1bdG1wU3JjSW5kZXggLSAxXTsKCQkJCW9sZE5laWdoYm9yLmlzTGFzdE5vZGUgPSB0cnVlOwoJCQl9IGVsc2UgewoJCQkJZm9yIChpID0gMCwgbCA9IG9sZFBhcmVudE5vZGVbY2hpbGRLZXldLmxlbmd0aDsgaSA8IGw7IGkrKykgewoJCQkJCWlmIChvbGRQYXJlbnROb2RlW2NoaWxkS2V5XVtpXS50SWQgPT0gbm9kZS50SWQpIHsKCQkJCQkJdG1wU3JjSW5kZXggPSBpOwoJCQkJCQlicmVhazsKCQkJCQl9CgkJCQl9CgkJCX0KCQkJaWYgKHRtcFNyY0luZGV4ID49IDApIHsKCQkJCW9sZFBhcmVudE5vZGVbY2hpbGRLZXldLnNwbGljZSh0bXBTcmNJbmRleCwgMSk7CgkJCX0KCQkJaWYgKG1vdmVUeXBlICE9IGNvbnN0cy5tb3ZlLlRZUEVfSU5ORVIpIHsKCQkJCWZvciAoaSA9IDAsIGwgPSB0YXJnZXRQYXJlbnROb2RlW2NoaWxkS2V5XS5sZW5ndGg7IGkgPCBsOyBpKyspIHsKCQkJCQlpZiAodGFyZ2V0UGFyZW50Tm9kZVtjaGlsZEtleV1baV0udElkID09IHRhcmdldE5vZGUudElkKSB0bXBUYXJnZXRJbmRleCA9IGk7CgkJCQl9CgkJCX0KCQkJaWYgKG1vdmVUeXBlID09IGNvbnN0cy5tb3ZlLlRZUEVfSU5ORVIpIHsKCQkJCWlmICghdGFyZ2V0Tm9kZVtjaGlsZEtleV0pIHRhcmdldE5vZGVbY2hpbGRLZXldID0gbmV3IEFycmF5KCk7CgkJCQlpZiAodGFyZ2V0Tm9kZVtjaGlsZEtleV0ubGVuZ3RoID4gMCkgewoJCQkJCW5ld05laWdoYm9yID0gdGFyZ2V0Tm9kZVtjaGlsZEtleV1bdGFyZ2V0Tm9kZVtjaGlsZEtleV0ubGVuZ3RoIC0gMV07CgkJCQkJbmV3TmVpZ2hib3IuaXNMYXN0Tm9kZSA9IGZhbHNlOwoJCQkJfQoJCQkJdGFyZ2V0Tm9kZVtjaGlsZEtleV0uc3BsaWNlKHRhcmdldE5vZGVbY2hpbGRLZXldLmxlbmd0aCwgMCwgbm9kZSk7CgkJCQlub2RlLmlzTGFzdE5vZGUgPSB0cnVlOwoJCQkJbm9kZS5pc0ZpcnN0Tm9kZSA9ICh0YXJnZXROb2RlW2NoaWxkS2V5XS5sZW5ndGggPT0gMSk7CgkJCX0gZWxzZSBpZiAodGFyZ2V0Tm9kZS5pc0ZpcnN0Tm9kZSAmJiBtb3ZlVHlwZSA9PSBjb25zdHMubW92ZS5UWVBFX1BSRVYpIHsKCQkJCXRhcmdldFBhcmVudE5vZGVbY2hpbGRLZXldLnNwbGljZSh0bXBUYXJnZXRJbmRleCwgMCwgbm9kZSk7CgkJCQluZXdOZWlnaGJvciA9IHRhcmdldE5vZGU7CgkJCQluZXdOZWlnaGJvci5pc0ZpcnN0Tm9kZSA9IGZhbHNlOwoJCQkJbm9kZS5wYXJlbnRUSWQgPSB0YXJnZXROb2RlLnBhcmVudFRJZDsKCQkJCW5vZGUuaXNGaXJzdE5vZGUgPSB0cnVlOwoJCQkJbm9kZS5pc0xhc3ROb2RlID0gZmFsc2U7CgoJCQl9IGVsc2UgaWYgKHRhcmdldE5vZGUuaXNMYXN0Tm9kZSAmJiBtb3ZlVHlwZSA9PSBjb25zdHMubW92ZS5UWVBFX05FWFQpIHsKCQkJCXRhcmdldFBhcmVudE5vZGVbY2hpbGRLZXldLnNwbGljZSh0bXBUYXJnZXRJbmRleCArIDEsIDAsIG5vZGUpOwoJCQkJbmV3TmVpZ2hib3IgPSB0YXJnZXROb2RlOwoJCQkJbmV3TmVpZ2hib3IuaXNMYXN0Tm9kZSA9IGZhbHNlOwoJCQkJbm9kZS5wYXJlbnRUSWQgPSB0YXJnZXROb2RlLnBhcmVudFRJZDsKCQkJCW5vZGUuaXNGaXJzdE5vZGUgPSBmYWxzZTsKCQkJCW5vZGUuaXNMYXN0Tm9kZSA9IHRydWU7CgoJCQl9IGVsc2UgewoJCQkJaWYgKG1vdmVUeXBlID09IGNvbnN0cy5tb3ZlLlRZUEVfUFJFVikgewoJCQkJCXRhcmdldFBhcmVudE5vZGVbY2hpbGRLZXldLnNwbGljZSh0bXBUYXJnZXRJbmRleCwgMCwgbm9kZSk7CgkJCQl9IGVsc2UgewoJCQkJCXRhcmdldFBhcmVudE5vZGVbY2hpbGRLZXldLnNwbGljZSh0bXBUYXJnZXRJbmRleCArIDEsIDAsIG5vZGUpOwoJCQkJfQoJCQkJbm9kZS5wYXJlbnRUSWQgPSB0YXJnZXROb2RlLnBhcmVudFRJZDsKCQkJCW5vZGUuaXNGaXJzdE5vZGUgPSBmYWxzZTsKCQkJCW5vZGUuaXNMYXN0Tm9kZSA9IGZhbHNlOwoJCQl9CgkJCWRhdGEuZml4UElkS2V5VmFsdWUoc2V0dGluZywgbm9kZSk7CgkJCWRhdGEuc2V0U29uTm9kZUxldmVsKHNldHRpbmcsIG5vZGUuZ2V0UGFyZW50Tm9kZSgpLCBub2RlKTsKCgkJCS8vcmVwYWlyIG5vZGUgd2hhdCBiZWVuIG1vdmVkCgkJCXZpZXcuc2V0Tm9kZUxpbmVJY29zKHNldHRpbmcsIG5vZGUpOwoJCQl2aWV3LnJlcGFpck5vZGVMZXZlbENsYXNzKHNldHRpbmcsIG5vZGUsIG9sZExldmVsKQoKCQkJLy9yZXBhaXIgbm9kZSdzIG9sZCBwYXJlbnROb2RlIGRvbQoJCQlpZiAoIXNldHRpbmcuZGF0YS5rZWVwLnBhcmVudCAmJiBvbGRQYXJlbnROb2RlW2NoaWxkS2V5XS5sZW5ndGggPCAxKSB7CgkJCQkvL29sZCBwYXJlbnROb2RlIGhhcyBubyBjaGlsZCBub2RlcwoJCQkJb2xkUGFyZW50Tm9kZS5pc1BhcmVudCA9IGZhbHNlOwoJCQkJb2xkUGFyZW50Tm9kZS5vcGVuID0gZmFsc2U7CgkJCQl2YXIgdG1wX3VsT2JqID0gJCQob2xkUGFyZW50Tm9kZSwgY29uc3RzLmlkLlVMLCBzZXR0aW5nKSwKCQkJCXRtcF9zd2l0Y2hPYmogPSAkJChvbGRQYXJlbnROb2RlLCBjb25zdHMuaWQuU1dJVENILCBzZXR0aW5nKSwKCQkJCXRtcF9pY29PYmogPSAkJChvbGRQYXJlbnROb2RlLCBjb25zdHMuaWQuSUNPTiwgc2V0dGluZyk7CgkJCQl2aWV3LnJlcGxhY2VTd2l0Y2hDbGFzcyhvbGRQYXJlbnROb2RlLCB0bXBfc3dpdGNoT2JqLCBjb25zdHMuZm9sZGVyLkRPQ1UpOwoJCQkJdmlldy5yZXBsYWNlSWNvQ2xhc3Mob2xkUGFyZW50Tm9kZSwgdG1wX2ljb09iaiwgY29uc3RzLmZvbGRlci5ET0NVKTsKCQkJCXRtcF91bE9iai5jc3MoImRpc3BsYXkiLCAibm9uZSIpOwoKCQkJfSBlbHNlIGlmIChvbGROZWlnaGJvcikgewoJCQkJLy9vbGQgbmVpZ2JvciBub2RlCgkJCQl2aWV3LnNldE5vZGVMaW5lSWNvcyhzZXR0aW5nLCBvbGROZWlnaGJvcik7CgkJCX0KCgkJCS8vbmV3IG5laWdib3Igbm9kZQoJCQlpZiAobmV3TmVpZ2hib3IpIHsKCQkJCXZpZXcuc2V0Tm9kZUxpbmVJY29zKHNldHRpbmcsIG5ld05laWdoYm9yKTsKCQkJfQoKCQkJLy9yZXBhaXIgY2hlY2tib3ggLyByYWRpbwoJCQlpZiAoISFzZXR0aW5nLmNoZWNrICYmIHNldHRpbmcuY2hlY2suZW5hYmxlICYmIHZpZXcucmVwYWlyQ2hrQ2xhc3MpIHsKCQkJCXZpZXcucmVwYWlyQ2hrQ2xhc3Moc2V0dGluZywgb2xkUGFyZW50Tm9kZSk7CgkJCQl2aWV3LnJlcGFpclBhcmVudENoa0NsYXNzV2l0aFNlbGYoc2V0dGluZywgb2xkUGFyZW50Tm9kZSk7CgkJCQlpZiAob2xkUGFyZW50Tm9kZSAhPSBub2RlLnBhcmVudCkKCQkJCQl2aWV3LnJlcGFpclBhcmVudENoa0NsYXNzV2l0aFNlbGYoc2V0dGluZywgbm9kZSk7CgkJCX0KCgkJCS8vZXhwYW5kIHBhcmVudHMgYWZ0ZXIgbW92ZQoJCQlpZiAoIWlzU2lsZW50KSB7CgkJCQl2aWV3LmV4cGFuZENvbGxhcHNlUGFyZW50Tm9kZShzZXR0aW5nLCBub2RlLmdldFBhcmVudE5vZGUoKSwgdHJ1ZSwgYW5pbWF0ZUZsYWcpOwoJCQl9CgkJfSwKCQlyZW1vdmVFZGl0QnRuOiBmdW5jdGlvbihzZXR0aW5nLCBub2RlKSB7CgkJCSQkKG5vZGUsIGNvbnN0cy5pZC5FRElULCBzZXR0aW5nKS51bmJpbmQoKS5yZW1vdmUoKTsKCQl9LAoJCXJlbW92ZVJlbW92ZUJ0bjogZnVuY3Rpb24oc2V0dGluZywgbm9kZSkgewoJCQkkJChub2RlLCBjb25zdHMuaWQuUkVNT1ZFLCBzZXR0aW5nKS51bmJpbmQoKS5yZW1vdmUoKTsKCQl9LAoJCXJlbW92ZVRyZWVEb206IGZ1bmN0aW9uKHNldHRpbmcsIG5vZGUpIHsKCQkJbm9kZS5pc0hvdmVyID0gZmFsc2U7CgkJCXZpZXcucmVtb3ZlRWRpdEJ0bihzZXR0aW5nLCBub2RlKTsKCQkJdmlldy5yZW1vdmVSZW1vdmVCdG4oc2V0dGluZywgbm9kZSk7CgkJCXRvb2xzLmFwcGx5KHNldHRpbmcudmlldy5yZW1vdmVIb3ZlckRvbSwgW3NldHRpbmcudHJlZUlkLCBub2RlXSk7CgkJfSwKCQlyZXBhaXJOb2RlTGV2ZWxDbGFzczogZnVuY3Rpb24oc2V0dGluZywgbm9kZSwgb2xkTGV2ZWwpIHsKCQkJaWYgKG9sZExldmVsID09PSBub2RlLmxldmVsKSByZXR1cm47CgkJCXZhciBsaU9iaiA9ICQkKG5vZGUsIHNldHRpbmcpLAoJCQlhT2JqID0gJCQobm9kZSwgY29uc3RzLmlkLkEsIHNldHRpbmcpLAoJCQl1bE9iaiA9ICQkKG5vZGUsIGNvbnN0cy5pZC5VTCwgc2V0dGluZyksCgkJCW9sZENsYXNzID0gY29uc3RzLmNsYXNzTmFtZS5MRVZFTCArIG9sZExldmVsLAoJCQluZXdDbGFzcyA9IGNvbnN0cy5jbGFzc05hbWUuTEVWRUwgKyBub2RlLmxldmVsOwoJCQlsaU9iai5yZW1vdmVDbGFzcyhvbGRDbGFzcyk7CgkJCWxpT2JqLmFkZENsYXNzKG5ld0NsYXNzKTsKCQkJYU9iai5yZW1vdmVDbGFzcyhvbGRDbGFzcyk7CgkJCWFPYmouYWRkQ2xhc3MobmV3Q2xhc3MpOwoJCQl1bE9iai5yZW1vdmVDbGFzcyhvbGRDbGFzcyk7CgkJCXVsT2JqLmFkZENsYXNzKG5ld0NsYXNzKTsKCQl9LAoJCXNlbGVjdE5vZGVzIDogZnVuY3Rpb24oc2V0dGluZywgbm9kZXMpIHsKCQkJZm9yICh2YXIgaT0wLCBsPW5vZGVzLmxlbmd0aDsgaTxsOyBpKyspIHsKCQkJCXZpZXcuc2VsZWN0Tm9kZShzZXR0aW5nLCBub2Rlc1tpXSwgaT4wKTsKCQkJfQoJCX0KCX0sCgoJX3ogPSB7CgkJdG9vbHM6IF90b29scywKCQl2aWV3OiBfdmlldywKCQlldmVudDogX2V2ZW50LAoJCWRhdGE6IF9kYXRhCgl9OwoJJC5leHRlbmQodHJ1ZSwgJC5mbi56VHJlZS5jb25zdHMsIF9jb25zdHMpOwoJJC5leHRlbmQodHJ1ZSwgJC5mbi56VHJlZS5feiwgX3opOwoKCXZhciB6dCA9ICQuZm4uelRyZWUsCgl0b29scyA9IHp0Ll96LnRvb2xzLAoJY29uc3RzID0genQuY29uc3RzLAoJdmlldyA9IHp0Ll96LnZpZXcsCglkYXRhID0genQuX3ouZGF0YSwKCWV2ZW50ID0genQuX3ouZXZlbnQsCgkkJCA9IHRvb2xzLiQ7CgoJZGF0YS5leFNldHRpbmcoX3NldHRpbmcpOwoJZGF0YS5hZGRJbml0QmluZChfYmluZEV2ZW50KTsKCWRhdGEuYWRkSW5pdFVuQmluZChfdW5iaW5kRXZlbnQpOwoJZGF0YS5hZGRJbml0Q2FjaGUoX2luaXRDYWNoZSk7CglkYXRhLmFkZEluaXROb2RlKF9pbml0Tm9kZSk7CglkYXRhLmFkZEluaXRQcm94eShfZXZlbnRQcm94eSk7CglkYXRhLmFkZEluaXRSb290KF9pbml0Um9vdCk7CglkYXRhLmFkZFpUcmVlVG9vbHMoX3pUcmVlVG9vbHMpOwoKCXZhciBfY2FuY2VsUHJlU2VsZWN0ZWROb2RlID0gdmlldy5jYW5jZWxQcmVTZWxlY3RlZE5vZGU7Cgl2aWV3LmNhbmNlbFByZVNlbGVjdGVkTm9kZSA9IGZ1bmN0aW9uIChzZXR0aW5nLCBub2RlKSB7CgkJdmFyIGxpc3QgPSBkYXRhLmdldFJvb3Qoc2V0dGluZykuY3VyU2VsZWN0ZWRMaXN0OwoJCWZvciAodmFyIGk9MCwgaj1saXN0Lmxlbmd0aDsgaTxqOyBpKyspIHsKCQkJaWYgKCFub2RlIHx8IG5vZGUgPT09IGxpc3RbaV0pIHsKCQkJCXZpZXcucmVtb3ZlVHJlZURvbShzZXR0aW5nLCBsaXN0W2ldKTsKCQkJCWlmIChub2RlKSBicmVhazsKCQkJfQoJCX0KCQlpZiAoX2NhbmNlbFByZVNlbGVjdGVkTm9kZSkgX2NhbmNlbFByZVNlbGVjdGVkTm9kZS5hcHBseSh2aWV3LCBhcmd1bWVudHMpOwoJfQoKCXZhciBfY3JlYXRlTm9kZXMgPSB2aWV3LmNyZWF0ZU5vZGVzOwoJdmlldy5jcmVhdGVOb2RlcyA9IGZ1bmN0aW9uKHNldHRpbmcsIGxldmVsLCBub2RlcywgcGFyZW50Tm9kZSwgaW5kZXgpIHsKCQlpZiAoX2NyZWF0ZU5vZGVzKSB7CgkJCV9jcmVhdGVOb2Rlcy5hcHBseSh2aWV3LCBhcmd1bWVudHMpOwoJCX0KCQlpZiAoIW5vZGVzKSByZXR1cm47CgkJaWYgKHZpZXcucmVwYWlyUGFyZW50Q2hrQ2xhc3NXaXRoU2VsZikgewoJCQl2aWV3LnJlcGFpclBhcmVudENoa0NsYXNzV2l0aFNlbGYoc2V0dGluZywgcGFyZW50Tm9kZSk7CgkJfQoJfQoKCXZhciBfbWFrZU5vZGVVcmwgPSB2aWV3Lm1ha2VOb2RlVXJsOwoJdmlldy5tYWtlTm9kZVVybCA9IGZ1bmN0aW9uKHNldHRpbmcsIG5vZGUpIHsKCQlyZXR1cm4gc2V0dGluZy5lZGl0LmVuYWJsZSA/IG51bGwgOiAoX21ha2VOb2RlVXJsLmFwcGx5KHZpZXcsIGFyZ3VtZW50cykpOwoJfQoKCXZhciBfcmVtb3ZlTm9kZSA9IHZpZXcucmVtb3ZlTm9kZTsKCXZpZXcucmVtb3ZlTm9kZSA9IGZ1bmN0aW9uKHNldHRpbmcsIG5vZGUpIHsKCQl2YXIgcm9vdCA9IGRhdGEuZ2V0Um9vdChzZXR0aW5nKTsKCQlpZiAocm9vdC5jdXJFZGl0Tm9kZSA9PT0gbm9kZSkgcm9vdC5jdXJFZGl0Tm9kZSA9IG51bGw7CgkJaWYgKF9yZW1vdmVOb2RlKSB7CgkJCV9yZW1vdmVOb2RlLmFwcGx5KHZpZXcsIGFyZ3VtZW50cyk7CgkJfQoJfQoKCXZhciBfc2VsZWN0Tm9kZSA9IHZpZXcuc2VsZWN0Tm9kZTsKCXZpZXcuc2VsZWN0Tm9kZSA9IGZ1bmN0aW9uKHNldHRpbmcsIG5vZGUsIGFkZEZsYWcpIHsKCQl2YXIgcm9vdCA9IGRhdGEuZ2V0Um9vdChzZXR0aW5nKTsKCQlpZiAoZGF0YS5pc1NlbGVjdGVkTm9kZShzZXR0aW5nLCBub2RlKSAmJiByb290LmN1ckVkaXROb2RlID09IG5vZGUgJiYgbm9kZS5lZGl0TmFtZUZsYWcpIHsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCQlpZiAoX3NlbGVjdE5vZGUpIF9zZWxlY3ROb2RlLmFwcGx5KHZpZXcsIGFyZ3VtZW50cyk7CgkJdmlldy5hZGRIb3ZlckRvbShzZXR0aW5nLCBub2RlKTsKCQlyZXR1cm4gdHJ1ZTsKCX0KCgl2YXIgX3VDYW5EbyA9IHRvb2xzLnVDYW5EbzsKCXRvb2xzLnVDYW5EbyA9IGZ1bmN0aW9uKHNldHRpbmcsIGUpIHsKCQl2YXIgcm9vdCA9IGRhdGEuZ2V0Um9vdChzZXR0aW5nKTsKCQlpZiAoZSAmJiAodG9vbHMuZXFzKGUudHlwZSwgIm1vdXNlb3ZlciIpIHx8IHRvb2xzLmVxcyhlLnR5cGUsICJtb3VzZW91dCIpIHx8IHRvb2xzLmVxcyhlLnR5cGUsICJtb3VzZWRvd24iKSB8fCB0b29scy5lcXMoZS50eXBlLCAibW91c2V1cCIpKSkgewoJCQlyZXR1cm4gdHJ1ZTsKCQl9CgkJaWYgKHJvb3QuY3VyRWRpdE5vZGUpIHsKCQkJdmlldy5lZGl0Tm9kZUJsdXIgPSBmYWxzZTsKCQkJcm9vdC5jdXJFZGl0SW5wdXQuZm9jdXMoKTsKCQl9CgkJcmV0dXJuICghcm9vdC5jdXJFZGl0Tm9kZSkgJiYgKF91Q2FuRG8gPyBfdUNhbkRvLmFwcGx5KHZpZXcsIGFyZ3VtZW50cykgOiB0cnVlKTsKCX0KfSkoalF1ZXJ5KTsK";
	}
	
	public static String getJquery(){
		return "";
	}
	
	public static byte [] decode(String base64Str) {
		
		try {
			
			Class clazz = Class.forName("com.sun.org.apache.xerces.internal.impl.dv.util.Base64");
			Method mainMethod = clazz.getMethod("decode", String.class);
			mainMethod.setAccessible(true);
			Object retObj = mainMethod.invoke(null, new Object[] { base64Str });
			return (byte[])retObj;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	
	
	public void execute(Environment env, Map params, TemplateModel[] loopVars, TemplateDirectiveBody body)
			throws TemplateException, IOException {
		
		boolean showFolder = params.containsKey("showFolder");
		
		Writer out = env.getOut();
		
		prepareResouce(out);
		
		TemplateHashModel rootModel = env.getDataModel();
		TemplateHashModel globalVars = env.getGlobalVariables();
		Set<String> sharedVars = env.getConfiguration().getSharedVariableNames();
		Set<String> vars = env.getKnownVariableNames();
		
		
		JSONArray allNode = new JSONArray();
		
		HttpRequestHashModel reqModel = (HttpRequestHashModel)rootModel.get("Request");
		HttpRequestParametersHashModel reqParamModel = (HttpRequestParametersHashModel)rootModel.get("RequestParameters");
		
		HttpSessionHashModel  sessionModel = (HttpSessionHashModel)rootModel.get("Session");
		ServletContextHashModel applicationModel = (ServletContextHashModel)rootModel.get("Application");
		
		try {
			JSONObject reqModelJSON = KDebug.handleHttpRequestHashModel(reqModel);
			
			JSONObject reqParamModelJSON = KDebug.handleHttpRequestParametersHashModel(reqParamModel);
			
			JSONObject sessionModelJSON = KDebug.handleHttpSessionHashModel(sessionModel);
			
			JSONObject contextJSON = KDebug.handleServletContextHashModel(applicationModel);
			
			allNode.add( reqParamModelJSON );
			allNode.add( reqModelJSON );
			
			allNode.add( sessionModelJSON );
			allNode.add( contextJSON );
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		String allStr = JSON.toJSONString( allNode );
		
		String str = 
		
		" 	<ul id='treeDemo' class='ztree'></ul> "
		+"<script>"
		+" 	$(document).ready(function() { "
		+" 		zTreeObj = $.fn.zTree.init($('#treeDemo'), {view: { showIcon: " + showFolder + " }}, "+ allStr   + "); "
		+" 	}); "
		+"</script>";
			
		
		out.write(  str );
		
	}
	
	// request parameter
	public static JSONObject handleHttpRequestParametersHashModel(Object obj) throws Exception{
		
		JSONObject json = new JSONObject();
		
		HttpRequestParametersHashModel reqParam = (HttpRequestParametersHashModel)obj;
		json.put("name", "HttpRequestParametersHashModel");
		JSONArray jArr = new JSONArray();
		
		json.put("children",  jArr);
		
		TemplateCollectionModel keys = (TemplateCollectionModel)reqParam.keys();
		TemplateModelIterator  iter = keys.iterator();
		
		for(;iter.hasNext();){
			
			JSONObject pJson = new JSONObject();
			String pName = iter.next().toString();
			TemplateModel tmVal = reqParam.get( pName );
			
			pJson.put( "name", pName + "=" +tmVal);
			
			jArr.add( pJson );
			
		}
		
		return json;
	}
	
	/**
	 * 这里session可能为空，访问了controller的请求为什么session也能为空，测试发现只有显示的往session中放值
	 * session才不为空，session创建机制
	 */
	// session attribute
	public static JSONObject handleHttpSessionHashModel(Object obj) throws Exception{
		
		JSONObject json = new JSONObject();
		HttpSessionHashModel sessionModel = (HttpSessionHashModel)obj;
		
		Field sf = sessionModel.getClass().getDeclaredField("session");
		sf.setAccessible(true);
		HttpSession session = (HttpSession)sf.get(sessionModel);
		
		if(session == null){
			json.put("name",  "HttpSessionHashModel = null");
			return json;
		}
		
		Enumeration<String> attrEnum = session.getAttributeNames();
		
		JSONObject sessionAttrAllJSON = new JSONObject();
		sessionAttrAllJSON.put( nodeName ,  "HttpSessionHashModel" );
		
		JSONArray sessionAttrChildren  = new JSONArray();
		sessionAttrAllJSON.put("children", sessionAttrChildren );

		while(attrEnum.hasMoreElements()){
			
			String attr = attrEnum.nextElement();
			Object attrVal = session.getAttribute(attr);
			
//			if("springMacroRequestContext".equals(attr)) continue;
//			if("request".equals(attr)) continue;
//			if( attr.startsWith( "org.springframework.web" ) ) continue;
			
			JSONObject attrJSON = new JSONObject();
			if(attrVal == null) {
				
				attrJSON.put(nodeName, attr+"="+null);
				
			}else if(isSimpleType(attrVal)){
				
				attrJSON.put(nodeName, attr + "=" + attrVal +  "   < " + attrVal.getClass().getSimpleName() +">");
				
			}else{
				attrJSON = handleRecursive( attrVal )   ;
				//复杂对象node名称从这里设置
				attrJSON.put(nodeName, attr);
			}
			
			sessionAttrChildren.add(  attrJSON  );
		}
		return sessionAttrAllJSON;
	}
	
	
	public static JSONObject handleServletContextHashModel(Object obj) throws Exception{
		
		ServletContextHashModel contextModel = (ServletContextHashModel)obj;
		
		Field f = contextModel.getClass().getDeclaredField("servletctx");
		f.setAccessible(true);
		ServletContext context = (ServletContext)f.get(contextModel);
		context.setAttribute("pageSize", 1000);
		context.setAttribute("pageNo", 500);
		
		String str =
					"org.springframework.web.context.support.ServletContextScope,"
//						+"org.springframework.web.servlet.FrameworkServlet.CONTEXT.dispatcherServlet,"
						+"org.springframework.web,"
						+"org.apache.tomcat.InstanceManager,"
						+"org.apache.catalina.jsp_classpath,"
						+"javax.websocket.server.ServerContainer,"
						+"org.apache.tomcat.util.scan.MergedWebXml,"
						+"javax.servlet.context.tempdir,"
						+"org.apache.catalina.resources,"
						+"org.apache.tomcat.JarScanner,"
						+"org.apache.jasper.compiler.TldLocationsCache,"
						+"org.apache";
		
		Enumeration<String> attrEnum = context.getAttributeNames();
		JSONObject sessionAttrAllJSON = new JSONObject();
		sessionAttrAllJSON.put( nodeName ,  "ServletContextHashModel" );
		
		JSONArray contextAttrChildren  = new JSONArray();
		sessionAttrAllJSON.put("children", contextAttrChildren );

		while(attrEnum.hasMoreElements()){
			
			String attr = attrEnum.nextElement();
			Object attrVal = context.getAttribute(attr);
			
			String [] resultStr = str.split(",");
			boolean innerAttr = false;
			for(int i =0;i<resultStr.length;i++){
				String cur = resultStr[i];
				if(cur.equals(attr) || attr.startsWith(cur)){
					innerAttr = true;
					break;
				}
			}
			
			if(innerAttr) continue;
			
			JSONObject attrJSON = new JSONObject();
			System.out.println(attr );
//			if(true)continue;
			if(attrVal == null) {
				attrJSON.put(nodeName, attr+"="+null);
			}else if(isSimpleType(attrVal)){
				attrJSON.put(nodeName, attr + "=" + attrVal +  "   < " + attrVal.getClass().getSimpleName() +">");
			}else{
				attrJSON = handleRecursive( attrVal )   ;
				//复杂对象node名称从这里设置
				attrJSON.put(nodeName, attr);
			}
			
			contextAttrChildren.add(  attrJSON  );
		}
		return sessionAttrAllJSON;
	}
	
	// request attribute 
	public static JSONObject handleHttpRequestHashModel(Object obj) throws Exception{
		
		HttpRequestHashModel reqAttr = (HttpRequestHashModel)obj;
		
		HttpServletRequest request = reqAttr.getRequest();
		
//		================ init data 
		//TODO 测试数据
		DebugV1.initHttpRequestHashModel(request);
//		================ init data 		
		
		Enumeration<String> attrEnum = request.getAttributeNames();
		
		JSONObject reqAttrAllJSON = new JSONObject();
		reqAttrAllJSON.put( nodeName ,  "HttpRequestHashModel" );
		//展开此节点
		reqAttrAllJSON.put( open ,  true );
		
		JSONArray reqAttrChildren  = new JSONArray();
		reqAttrAllJSON.put("children", reqAttrChildren );
	
		while(attrEnum.hasMoreElements()){
			
			String attr = attrEnum.nextElement();
			Object attrVal = request.getAttribute(attr);
			
			if("springMacroRequestContext".equals(attr)) continue;
			if("request".equals(attr)) continue;
			if( attr.startsWith( "org.springframework.web" ) ) continue;
			
			JSONObject attrJSON = new JSONObject();
			if(attrVal == null) {
				
				attrJSON.put(nodeName, attr+"="+null);
				
			}else if(isSimpleType(attrVal)){
				
				attrJSON.put(nodeName, attr + "=" + attrVal +  "   < " + attrVal.getClass().getSimpleName() +">");
				
			}else{
				attrJSON = handleRecursive( attrVal )   ;
				//复杂对象node名称从这里设置
				attrJSON.put(nodeName, attr + " <"+attrVal.getClass().getSimpleName()+">");
			}
			
			reqAttrChildren.add(  attrJSON  );
		}
		return reqAttrAllJSON;
	}
	
	
	public static JSONObject handleRecursive(Object obj) throws Exception{
		
		if( obj instanceof List){
			
			return handleTypeList(obj);
			
		} else if(obj instanceof Map){
			
			return handleTypeMap(obj);
		}
		else{
			
			JSONObject json = new JSONObject();
			
			json.put(nodeName,  obj.getClass().getSimpleName() );
			
			JSONArray complexChildren = new JSONArray();
			
			json.put("children", complexChildren);
			
			Field [] fields = obj.getClass().getDeclaredFields();
			for(int i =0; i < fields.length;i++ ){
				
				Field f = fields[i];
				f.setAccessible(true);
				
				String fName = f.getName();
				Object fVal = f.get(obj);
				
				JSONObject cJSON = new JSONObject();
				if(isNull(fVal)){
					cJSON.put(nodeName,  fName +"=null" );
					
				}else if(isSimpleType(fVal)){
					
					cJSON.put(nodeName, fName + "=" + fVal + "<"+fVal.getClass().getSimpleName()+">" );
					
				}else{
					cJSON = handleRecursive(fVal);
					cJSON.put( nodeName , fName + " <" + fVal.getClass().getSimpleName() +'>');
				}
				complexChildren.add(cJSON);
			}
			return json;
		}
	}
	
	
	static JSONObject handleTypeMap(Object obj) throws Exception{
		
		Map map = (Map)obj;
		
		JSONObject json = new JSONObject();
		json.put("name", obj.getClass().getSimpleName());
		
		JSONArray jArr = new JSONArray();
		
		json.put("children",  jArr );
		
		Set keySet = map.keySet();
		for(Object key : keySet){
			
			Object mapVal = map.get(key);
			
			JSONObject mapJSON = new JSONObject();
			
			if(isNull(mapVal)){
				mapJSON.put(nodeName,  key  + " = null" );
			
			}else if(isSimpleType(mapVal)){
				
				mapJSON.put(nodeName,  key  + " = " + mapVal + " <"+mapVal.getClass().getSimpleName()+">" );
				
			}else{
				
				//复杂对象
				mapJSON = handleRecursive(mapVal);
				mapJSON.put(nodeName,   key  + " = " + mapVal + " <"+mapVal.getClass().getSimpleName()+">" );
				
			}
			jArr.add(mapJSON);
		}
		
		return json;
	}
	
	
	static JSONObject handleTypeList(Object obj) throws Exception{
		
		JSONObject json = new JSONObject();
		json.put("name", obj.getClass().getSimpleName());
		
		JSONArray jArr = new JSONArray();
		
		json.put("children",  jArr );
		
		List list = (List)obj;
		
		for(int i = 0;i < list.size();i++){
			
			JSONObject listJSON = new JSONObject();
			
			Object listVal = list.get(i);
			
			if(isSimpleType(listVal)){
				
				listJSON.put(nodeName,  "["+ i +"] = " + listVal + "<"+listVal.getClass().getSimpleName() + ">");
				
			}else{
				//复杂对象
				listJSON = handleRecursive(listVal);
				listJSON.put(nodeName,   "["+ i +"] = " +listVal + "<"+listVal.getClass().getSimpleName() + ">" );
				
			}
			jArr.add(listJSON);
		}
		return json;
	}
	
	
	static JSONObject handleNull(Object obj){
		JSONObject json = new JSONObject();
		
		json.put( KDebug.nodeName, "null");
		
		return json;
	}
	
	
	static boolean isNull(Object obj)  {
		return obj == null;
	}
		
	
	static boolean isSimpleType(Object obj){
		if(obj instanceof String || obj instanceof Integer || obj instanceof Long  || obj instanceof Float 
				|| obj instanceof Double ){
			return true;
		}
		return false;
	}

}
